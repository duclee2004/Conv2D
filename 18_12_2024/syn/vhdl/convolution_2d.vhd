-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution_2d is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolution_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution_2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=151,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=27,HLS_SYN_FF=2123,HLS_SYN_LUT=1740,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_0_ce0 : STD_LOGIC;
    signal input_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_1_ce0 : STD_LOGIC;
    signal input_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_2_ce0 : STD_LOGIC;
    signal input_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_0_ce0 : STD_LOGIC;
    signal kernel_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_1_ce0 : STD_LOGIC;
    signal kernel_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_2_ce0 : STD_LOGIC;
    signal kernel_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal indvar_flatten_reg_427 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_assign_reg_438 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_assign_reg_450 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_965_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_969 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_mid2_fu_501_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_assign_mid2_reg_981 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_assign_mid2_reg_981_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_reg_988 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_fu_535_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_993 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_reg_998 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_fu_567_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_1003 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_mid2_v_reg_1003_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_cast_fu_582_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_reg_1009 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_592_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_reg_1015 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_2_i_mid2_v_fu_606_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_2_i_mid2_v_reg_1020 : STD_LOGIC_VECTOR (2 downto 0);
    signal newIndex1_i_cast_fu_612_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal newIndex1_i_cast_reg_1025 : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_0_load_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_load_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1056 : STD_LOGIC_VECTOR (2 downto 0);
    signal kernel_2_load_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal input_1_load_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_load_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal newIndex3_i_cast_fu_653_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal newIndex3_i_cast_reg_1081 : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_0_load_1_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_load_1_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_load_1_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_load_1_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal input_2_load_1_reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_1_reg_1127 : STD_LOGIC_VECTOR (31 downto 0);
    signal newIndex5_i_cast_fu_668_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal newIndex5_i_cast_reg_1132 : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_0_load_2_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_1_load_2_reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_2_load_2_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_cast_fu_690_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_cast_reg_1168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal input_2_load_2_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_2_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_load_2_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_717_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_1204 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_21_fu_733_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_reg_1214 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_738_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_reg_1229 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_742_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_reg_1234 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_0_load_3_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_load_3_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_load_3_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_i_cast_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_i_cast_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_4_fu_752_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_761_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_776_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_785_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_461_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal tmp_1_0_i_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_i_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_i_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_i_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_1_0_2_i_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_i_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_i_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_i_reg_1351 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_822_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp1_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_i_fu_852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_i_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_i_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_i_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_i_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_i_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_i_fu_864_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_i_reg_1411 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_i_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_i_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_i_fu_890_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_i_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_431_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_row_assign_phi_fu_442_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_col_assign_phi_fu_454_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_cast_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_25_cast_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_20_cast_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_23_cast_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_26_cast_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal tmp_21_cast_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal tmp_24_cast_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal tmp_27_cast_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_461_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_fu_519_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul5_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul2_fu_545_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul2_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r8_fu_561_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_574_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_mid1_fu_586_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_2_i_mid2_v_v_c_fu_599_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_615_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_0_2_i_fu_628_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_637_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_637_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_656_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_683_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_694_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_706_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_cast_fu_713_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_722_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp3_fu_843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_876_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_895_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_cast_fu_902_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_906_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_909_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul2_fu_545_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul5_fu_519_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_637_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component convolution_2d_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution_2d_urcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component convolution_2d_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_0_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input_0_ce0 : IN STD_LOGIC;
        input_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input_1_ce0 : IN STD_LOGIC;
        input_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_2_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        input_2_ce0 : IN STD_LOGIC;
        input_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        kernel_0_ce0 : IN STD_LOGIC;
        kernel_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        kernel_1_ce0 : IN STD_LOGIC;
        kernel_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        kernel_2_ce0 : IN STD_LOGIC;
        kernel_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convolution_2d_CTRL_s_axi_U : component convolution_2d_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_0_address0 => input_0_address0,
        input_0_ce0 => input_0_ce0,
        input_0_q0 => input_0_q0,
        input_1_address0 => input_1_address0,
        input_1_ce0 => input_1_ce0,
        input_1_q0 => input_1_q0,
        input_2_address0 => input_2_address0,
        input_2_ce0 => input_2_ce0,
        input_2_q0 => input_2_q0,
        kernel_0_address0 => kernel_0_address0,
        kernel_0_ce0 => kernel_0_ce0,
        kernel_0_q0 => kernel_0_q0,
        kernel_1_address0 => kernel_1_address0,
        kernel_1_ce0 => kernel_1_ce0,
        kernel_1_q0 => kernel_1_q0,
        kernel_2_address0 => kernel_2_address0,
        kernel_2_ce0 => kernel_2_ce0,
        kernel_2_q0 => kernel_2_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => sum_2_2_2_i_reg_1426);

    convolution_2d_mubkb_U1 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_1_q0,
        din1 => input_2_q0,
        din2 => input_0_q0,
        din3 => grp_fu_461_p4,
        dout => grp_fu_461_p5);

    convolution_2d_mubkb_U2 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_2_q0,
        din1 => input_0_q0,
        din2 => input_1_q0,
        din3 => arrayNo_i_cast_reg_1254,
        dout => grp_fu_472_p5);

    convolution_2d_urcud_U3 : component convolution_2d_urcud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => col_assign_mid2_fu_501_p3,
        din1 => ap_const_lv3_3,
        ce => ap_const_logic_1,
        dout => grp_fu_509_p2);

    convolution_2d_mubkb_U4 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_0_load_reg_1066,
        din1 => input_1_load_reg_1071,
        din2 => input_2_load_reg_1076,
        din3 => arrayNo_i_cast_fu_747_p1,
        dout => tmp_4_fu_752_p5);

    convolution_2d_mubkb_U5 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_1_load_1_reg_1117,
        din1 => input_2_load_1_reg_1122,
        din2 => input_0_load_1_reg_1127,
        din3 => arrayNo_i_cast_fu_747_p1,
        dout => tmp_5_fu_761_p5);

    convolution_2d_mubkb_U6 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_2_load_2_reg_1189,
        din1 => input_0_load_2_reg_1194,
        din2 => input_1_load_2_reg_1199,
        din3 => arrayNo_i_cast_fu_747_p1,
        dout => tmp_6_fu_776_p5);

    convolution_2d_mubkb_U7 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_0_load_3_reg_1239,
        din1 => input_1_load_3_reg_1244,
        din2 => input_2_load_3_reg_1249,
        din3 => arrayNo_i_cast_fu_747_p1,
        dout => tmp_7_fu_785_p5);

    convolution_2d_mubkb_U8 : component convolution_2d_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_0_q0,
        din1 => input_1_q0,
        din2 => input_2_q0,
        din3 => arrayNo_i_cast_reg_1254,
        dout => tmp_s_fu_822_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then 
                col_assign_reg_450 <= c_reg_993;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_assign_reg_450 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then 
                indvar_flatten_reg_427 <= indvar_flatten_next_reg_969;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_427 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    row_assign_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then 
                row_assign_reg_438 <= tmp_mid2_v_reg_1003;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_assign_reg_438 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                    arrayNo_i_cast_reg_1254(2 downto 0) <= arrayNo_i_cast_fu_747_p1(2 downto 0);
                tmp_4_reg_1261 <= tmp_4_fu_752_p5;
                tmp_5_reg_1266 <= tmp_5_fu_761_p5;
                tmp_6_reg_1286 <= tmp_6_fu_776_p5;
                tmp_7_reg_1291 <= tmp_7_fu_785_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_483_p2 = ap_const_lv1_0))) then
                c_reg_993 <= c_fu_535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_483_p2 = ap_const_lv1_0))) then
                col_assign_mid2_reg_981 <= col_assign_mid2_fu_501_p3;
                exitcond_reg_974 <= exitcond_fu_495_p2;
                tmp_14_reg_988 <= mul5_fu_519_p2(7 downto 5);
                tmp_18_reg_998 <= mul2_fu_545_p2(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                col_assign_mid2_reg_981_pp0_iter1_reg <= col_assign_mid2_reg_981;
                exitcond_flatten_reg_965 <= exitcond_flatten_fu_483_p2;
                exitcond_flatten_reg_965_pp0_iter1_reg <= exitcond_flatten_reg_965;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_969 <= indvar_flatten_next_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                input_0_load_1_reg_1127 <= input_0_q0;
                input_1_load_1_reg_1117 <= input_1_q0;
                input_2_load_1_reg_1122 <= input_2_q0;
                kernel_0_load_2_reg_1153 <= kernel_0_q0;
                kernel_1_load_2_reg_1158 <= kernel_1_q0;
                kernel_2_load_2_reg_1163 <= kernel_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                input_0_load_2_reg_1194 <= input_0_q0;
                input_1_load_2_reg_1199 <= input_1_q0;
                input_2_load_2_reg_1189 <= input_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                input_0_load_3_reg_1239 <= input_0_q0;
                input_1_load_3_reg_1244 <= input_1_q0;
                input_2_load_3_reg_1249 <= input_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                input_0_load_reg_1066 <= input_0_q0;
                input_1_load_reg_1071 <= input_1_q0;
                input_2_load_reg_1076 <= input_2_q0;
                kernel_0_load_1_reg_1102 <= kernel_0_q0;
                kernel_1_load_1_reg_1107 <= kernel_1_q0;
                kernel_2_load_1_reg_1112 <= kernel_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                kernel_0_load_reg_1046 <= kernel_0_q0;
                kernel_1_load_reg_1051 <= kernel_1_q0;
                kernel_2_load_reg_1061 <= kernel_2_q0;
                tmp_mid2_v_reg_1003 <= tmp_mid2_v_fu_567_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                    newIndex1_i_cast_reg_1025(2 downto 0) <= newIndex1_i_cast_fu_612_p1(2 downto 0);
                    tmp_1_cast_reg_1009(3 downto 1) <= tmp_1_cast_fu_582_p1(3 downto 1);
                tmp_22_reg_1056 <= mul_fu_637_p2(7 downto 5);
                tmp_3_reg_1015 <= tmp_3_fu_592_p3;
                tmp_5_2_i_mid2_v_reg_1020 <= tmp_5_2_i_mid2_v_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                    newIndex3_i_cast_reg_1081(2 downto 0) <= newIndex3_i_cast_fu_653_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                    newIndex5_i_cast_reg_1132(2 downto 0) <= newIndex5_i_cast_fu_668_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then
                sum_2_2_2_i_reg_1426 <= sum_2_2_2_i_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp1_reg_1386 <= tmp1_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp2_reg_1361 <= tmp2_fu_833_p2;
                tmp_1_0_2_i_reg_1346 <= tmp_1_0_2_i_fu_814_p2;
                tmp_1_1_i_reg_1351 <= tmp_1_1_i_fu_818_p2;
                tmp_s_reg_1356 <= tmp_s_fu_822_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp5_reg_1421 <= tmp5_fu_872_p2;
                tmp_1_2_1_i_reg_1411 <= tmp_1_2_1_i_fu_864_p2;
                tmp_1_2_2_i_reg_1416 <= tmp_1_2_2_i_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp_10_reg_1381 <= grp_fu_461_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_11_reg_1396 <= grp_fu_472_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                    tmp_16_cast_reg_1168(3 downto 1) <= tmp_16_cast_fu_690_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp_17_reg_1204 <= tmp_17_fu_717_p2;
                tmp_21_reg_1214 <= tmp_21_fu_733_p2;
                tmp_24_reg_1229 <= tmp_24_fu_738_p2;
                tmp_25_reg_1234 <= tmp_25_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp_1_0_1_i_reg_1321 <= tmp_1_0_1_i_fu_804_p2;
                tmp_1_0_i_reg_1316 <= tmp_1_0_i_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_1_1_1_i_reg_1391 <= tmp_1_1_1_i_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_1_1_2_i_reg_1401 <= tmp_1_1_2_i_fu_856_p2;
                tmp_1_2_i_reg_1406 <= tmp_1_2_i_fu_860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp_8_reg_1296 <= grp_fu_461_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then
                tmp_9_reg_1326 <= grp_fu_472_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_mid2_v_reg_1003_pp0_iter1_reg <= tmp_mid2_v_reg_1003;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_1009(0) <= '0';
    tmp_1_cast_reg_1009(4) <= '0';
    newIndex1_i_cast_reg_1025(4 downto 3) <= "00";
    newIndex3_i_cast_reg_1081(4 downto 3) <= "00";
    newIndex5_i_cast_reg_1132(4 downto 3) <= "00";
    tmp_16_cast_reg_1168(0) <= '0';
    tmp_16_cast_reg_1168(4) <= '0';
    arrayNo_i_cast_reg_1254(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_483_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_483_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_483_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(10);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_483_p2)
    begin
        if ((exitcond_flatten_fu_483_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_454_p4_assign_proc : process(col_assign_reg_450, exitcond_flatten_reg_965, ap_CS_fsm_pp0_stage0, c_reg_993, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then 
            ap_phi_mux_col_assign_phi_fu_454_p4 <= c_reg_993;
        else 
            ap_phi_mux_col_assign_phi_fu_454_p4 <= col_assign_reg_450;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_431_p4_assign_proc : process(indvar_flatten_reg_427, exitcond_flatten_reg_965, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_969, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_965 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_431_p4 <= indvar_flatten_next_reg_969;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_431_p4 <= indvar_flatten_reg_427;
        end if; 
    end process;


    ap_phi_mux_row_assign_phi_fu_442_p4_assign_proc : process(row_assign_reg_438, exitcond_flatten_reg_965_pp0_iter1_reg, tmp_mid2_v_reg_1003, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_row_assign_phi_fu_442_p4 <= tmp_mid2_v_reg_1003;
        else 
            ap_phi_mux_row_assign_phi_fu_442_p4 <= row_assign_reg_438;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    arrayNo_i_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_509_p2),32));
    c_fu_535_p2 <= std_logic_vector(unsigned(col_assign_mid2_fu_501_p3) + unsigned(ap_const_lv3_1));
    col_assign_mid2_fu_501_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_495_p2(0) = '1') else 
        ap_phi_mux_col_assign_phi_fu_454_p4;
    exitcond_flatten_fu_483_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_431_p4 = ap_const_lv5_10) else "0";
    exitcond_fu_495_p2 <= "1" when (ap_phi_mux_col_assign_phi_fu_454_p4 = ap_const_lv3_4) else "0";

    grp_fu_461_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, arrayNo_i_cast_fu_747_p1, arrayNo_i_cast_reg_1254, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_461_p4 <= arrayNo_i_cast_reg_1254;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_461_p4 <= arrayNo_i_cast_fu_747_p1;
        else 
            grp_fu_461_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    indvar_flatten_next_fu_489_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_431_p4) + unsigned(ap_const_lv5_1));

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, tmp_19_cast_fu_621_p1, tmp_22_cast_fu_661_p1, ap_block_pp0_stage2, tmp_25_cast_fu_676_p1, ap_block_pp0_stage3, tmp_20_cast_fu_699_p1, ap_block_pp0_stage4, tmp_23_cast_fu_726_p1, ap_block_pp0_stage5, tmp_26_cast_fu_770_p1, ap_block_pp0_stage6, tmp_21_cast_fu_794_p1, ap_block_pp0_stage7, tmp_24_cast_fu_808_p1, ap_block_pp0_stage8, tmp_27_cast_fu_837_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_address0 <= tmp_27_cast_fu_837_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_24_cast_fu_808_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_21_cast_fu_794_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_26_cast_fu_770_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_23_cast_fu_726_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_20_cast_fu_699_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_25_cast_fu_676_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_22_cast_fu_661_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_address0 <= tmp_19_cast_fu_621_p1(4 - 1 downto 0);
        else 
            input_0_address0 <= "XXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, tmp_19_cast_fu_621_p1, tmp_22_cast_fu_661_p1, ap_block_pp0_stage2, tmp_25_cast_fu_676_p1, ap_block_pp0_stage3, tmp_20_cast_fu_699_p1, ap_block_pp0_stage4, tmp_23_cast_fu_726_p1, ap_block_pp0_stage5, tmp_26_cast_fu_770_p1, ap_block_pp0_stage6, tmp_21_cast_fu_794_p1, ap_block_pp0_stage7, tmp_24_cast_fu_808_p1, ap_block_pp0_stage8, tmp_27_cast_fu_837_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_address0 <= tmp_27_cast_fu_837_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_24_cast_fu_808_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_21_cast_fu_794_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_26_cast_fu_770_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_23_cast_fu_726_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_20_cast_fu_699_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_25_cast_fu_676_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_22_cast_fu_661_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_address0 <= tmp_19_cast_fu_621_p1(4 - 1 downto 0);
        else 
            input_1_address0 <= "XXXX";
        end if; 
    end process;


    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, tmp_19_cast_fu_621_p1, tmp_22_cast_fu_661_p1, ap_block_pp0_stage2, tmp_25_cast_fu_676_p1, ap_block_pp0_stage3, tmp_20_cast_fu_699_p1, ap_block_pp0_stage4, tmp_23_cast_fu_726_p1, ap_block_pp0_stage5, tmp_26_cast_fu_770_p1, ap_block_pp0_stage6, tmp_21_cast_fu_794_p1, ap_block_pp0_stage7, tmp_24_cast_fu_808_p1, ap_block_pp0_stage8, tmp_27_cast_fu_837_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_2_address0 <= tmp_27_cast_fu_837_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_24_cast_fu_808_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_21_cast_fu_794_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_26_cast_fu_770_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_23_cast_fu_726_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_20_cast_fu_699_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_25_cast_fu_676_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_22_cast_fu_661_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_address0 <= tmp_19_cast_fu_621_p1(4 - 1 downto 0);
        else 
            input_2_address0 <= "XXXX";
        end if; 
    end process;


    input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                kernel_0_address0 <= "XX";
            end if;
        else 
            kernel_0_address0 <= "XX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                kernel_1_address0 <= "XX";
            end if;
        else 
            kernel_1_address0 <= "XX";
        end if; 
    end process;


    kernel_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            kernel_1_ce0 <= ap_const_logic_1;
        else 
            kernel_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                kernel_2_address0 <= "XX";
            end if;
        else 
            kernel_2_address0 <= "XX";
        end if; 
    end process;


    kernel_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            kernel_2_ce0 <= ap_const_logic_1;
        else 
            kernel_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul2_fu_545_p0 <= mul2_fu_545_p00(3 - 1 downto 0);
    mul2_fu_545_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_535_p2),8));
    mul2_fu_545_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul2_fu_545_p0) * unsigned(ap_const_lv8_B), 8));
    mul5_fu_519_p0 <= mul5_fu_519_p00(3 - 1 downto 0);
    mul5_fu_519_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_fu_501_p3),8));
    mul5_fu_519_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul5_fu_519_p0) * unsigned(ap_const_lv8_B), 8));
    mul_fu_637_p0 <= mul_fu_637_p00(3 - 1 downto 0);
    mul_fu_637_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_0_2_i_fu_628_p2),8));
    mul_fu_637_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_637_p0) * unsigned(ap_const_lv8_B), 8));
    newIndex1_i_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_988),5));
    newIndex3_i_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_998),5));
    newIndex5_i_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1056),5));
    output_r_address0 <= tmp_28_cast_fu_915_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we0_assign_proc : process(exitcond_flatten_reg_965_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (exitcond_flatten_reg_965_pp0_iter1_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r8_fu_561_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_assign_phi_fu_442_p4) + unsigned(ap_const_lv3_1));
    r_mid1_fu_586_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_assign_phi_fu_442_p4) + unsigned(ap_const_lv3_2));
    sum_2_2_2_i_fu_890_p2 <= std_logic_vector(unsigned(tmp1_reg_1386) + unsigned(tmp4_fu_885_p2));
    tmp1_fu_847_p2 <= std_logic_vector(unsigned(tmp2_reg_1361) + unsigned(tmp3_fu_843_p2));
    tmp2_fu_833_p2 <= std_logic_vector(unsigned(tmp_1_0_1_i_reg_1321) + unsigned(tmp_1_0_i_reg_1316));
    tmp3_fu_843_p2 <= std_logic_vector(unsigned(tmp_1_1_i_reg_1351) + unsigned(tmp_1_0_2_i_reg_1346));
    tmp4_fu_885_p2 <= std_logic_vector(unsigned(tmp5_reg_1421) + unsigned(tmp6_fu_880_p2));
    tmp5_fu_872_p2 <= std_logic_vector(unsigned(tmp_1_1_2_i_reg_1401) + unsigned(tmp_1_1_1_i_reg_1391));
    tmp6_fu_880_p2 <= std_logic_vector(unsigned(tmp_1_2_i_reg_1406) + unsigned(tmp7_fu_876_p2));
    tmp7_fu_876_p2 <= std_logic_vector(unsigned(tmp_1_2_2_i_reg_1416) + unsigned(tmp_1_2_1_i_reg_1411));
    tmp_12_fu_683_p3 <= (tmp_3_reg_1015 & ap_const_lv1_0);
    tmp_13_fu_706_p3 <= (tmp_5_2_i_mid2_v_reg_1020 & ap_const_lv1_0);
    tmp_14_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_895_p3),6));
    tmp_15_fu_615_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_582_p1) + unsigned(newIndex1_i_cast_fu_612_p1));
    tmp_16_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_683_p3),5));
    tmp_16_fu_694_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_690_p1) + unsigned(newIndex1_i_cast_reg_1025));
    tmp_17_fu_717_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_713_p1) + unsigned(newIndex1_i_cast_reg_1025));
    tmp_18_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_706_p3),5));
    tmp_19_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_615_p2),64));
    tmp_19_fu_656_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_1009) + unsigned(newIndex3_i_cast_fu_653_p1));
    tmp_1_0_1_i_fu_804_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_5_reg_1266) * signed(kernel_1_load_reg_1051))), 32));
    tmp_1_0_2_i_fu_814_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_reg_1286) * signed(kernel_2_load_reg_1061))), 32));
    tmp_1_0_i_fu_800_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_reg_1261) * signed(kernel_0_load_reg_1046))), 32));
    tmp_1_1_1_i_fu_852_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_8_reg_1296) * signed(kernel_1_load_1_reg_1107))), 32));
    tmp_1_1_2_i_fu_856_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_9_reg_1326) * signed(kernel_2_load_1_reg_1112))), 32));
    tmp_1_1_i_fu_818_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_7_reg_1291) * signed(kernel_0_load_1_reg_1102))), 32));
    tmp_1_2_1_i_fu_864_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_10_reg_1381) * signed(kernel_1_load_2_reg_1158))), 32));
    tmp_1_2_2_i_fu_868_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_11_reg_1396) * signed(kernel_2_load_2_reg_1163))), 32));
    tmp_1_2_i_fu_860_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_s_reg_1356) * signed(kernel_0_load_2_reg_1153))), 32));
    tmp_1_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_574_p3),5));
    tmp_1_fu_895_p3 <= (tmp_mid2_v_reg_1003_pp0_iter1_reg & ap_const_lv2_0);
    tmp_20_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_694_p2),64));
    tmp_20_fu_722_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1168) + unsigned(newIndex3_i_cast_reg_1081));
    tmp_21_cast_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_1204),64));
    tmp_21_fu_733_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_713_p1) + unsigned(newIndex3_i_cast_reg_1081));
    tmp_22_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_656_p2),64));
    tmp_23_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_722_p2),64));
    tmp_23_fu_671_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_1009) + unsigned(newIndex5_i_cast_fu_668_p1));
    tmp_24_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1214),64));
    tmp_24_fu_738_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1168) + unsigned(newIndex5_i_cast_reg_1132));
    tmp_25_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_671_p2),64));
    tmp_25_fu_742_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_713_p1) + unsigned(newIndex5_i_cast_reg_1132));
    tmp_26_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1229),64));
    tmp_26_fu_909_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_902_p1) + unsigned(tmp_3_cast_fu_906_p1));
    tmp_27_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_1234),64));
    tmp_28_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_909_p2),64));
    tmp_3_cast_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_reg_981_pp0_iter1_reg),6));
    tmp_3_fu_592_p3 <= 
        r_mid1_fu_586_p2 when (exitcond_reg_974(0) = '1') else 
        r8_fu_561_p2;
    tmp_5_2_i_mid2_v_fu_606_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_assign_phi_fu_442_p4) + unsigned(tmp_5_2_i_mid2_v_v_c_fu_599_p3));
    tmp_5_2_i_mid2_v_v_c_fu_599_p3 <= 
        ap_const_lv3_3 when (exitcond_reg_974(0) = '1') else 
        ap_const_lv3_2;
    tmp_8_0_2_i_fu_628_p2 <= std_logic_vector(unsigned(col_assign_mid2_reg_981) + unsigned(ap_const_lv3_2));
    tmp_fu_574_p3 <= (tmp_mid2_v_fu_567_p3 & ap_const_lv1_0);
    tmp_mid2_v_fu_567_p3 <= 
        r8_fu_561_p2 when (exitcond_reg_974(0) = '1') else 
        ap_phi_mux_row_assign_phi_fu_442_p4;
end behav;
