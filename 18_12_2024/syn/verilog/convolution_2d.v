// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolution_2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=151,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=27,HLS_SYN_FF=2123,HLS_SYN_LUT=1740,HLS_VERSION=2018_3}" *)

module convolution_2d (
        ap_clk,
        ap_rst_n,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_pp0_stage2 = 11'd8;
parameter    ap_ST_fsm_pp0_stage3 = 11'd16;
parameter    ap_ST_fsm_pp0_stage4 = 11'd32;
parameter    ap_ST_fsm_pp0_stage5 = 11'd64;
parameter    ap_ST_fsm_pp0_stage6 = 11'd128;
parameter    ap_ST_fsm_pp0_stage7 = 11'd256;
parameter    ap_ST_fsm_pp0_stage8 = 11'd512;
parameter    ap_ST_fsm_state17 = 11'd1024;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [3:0] input_0_address0;
reg    input_0_ce0;
wire   [31:0] input_0_q0;
reg   [3:0] input_1_address0;
reg    input_1_ce0;
wire   [31:0] input_1_q0;
reg   [3:0] input_2_address0;
reg    input_2_ce0;
wire   [31:0] input_2_q0;
reg   [1:0] kernel_0_address0;
reg    kernel_0_ce0;
wire   [31:0] kernel_0_q0;
reg   [1:0] kernel_1_address0;
reg    kernel_1_ce0;
wire   [31:0] kernel_1_q0;
reg   [1:0] kernel_2_address0;
reg    kernel_2_ce0;
wire   [31:0] kernel_2_q0;
wire   [3:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [4:0] indvar_flatten_reg_427;
reg   [2:0] row_assign_reg_438;
reg   [2:0] col_assign_reg_450;
wire   [0:0] exitcond_flatten_fu_483_p2;
reg   [0:0] exitcond_flatten_reg_965;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_965_pp0_iter1_reg;
wire   [4:0] indvar_flatten_next_fu_489_p2;
reg   [4:0] indvar_flatten_next_reg_969;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_495_p2;
reg   [0:0] exitcond_reg_974;
wire   [2:0] col_assign_mid2_fu_501_p3;
reg   [2:0] col_assign_mid2_reg_981;
reg   [2:0] col_assign_mid2_reg_981_pp0_iter1_reg;
reg   [2:0] tmp_14_reg_988;
wire   [2:0] c_fu_535_p2;
reg   [2:0] c_reg_993;
reg   [2:0] tmp_18_reg_998;
wire   [2:0] tmp_mid2_v_fu_567_p3;
reg   [2:0] tmp_mid2_v_reg_1003;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [2:0] tmp_mid2_v_reg_1003_pp0_iter1_reg;
wire   [4:0] tmp_1_cast_fu_582_p1;
reg   [4:0] tmp_1_cast_reg_1009;
wire   [2:0] tmp_3_fu_592_p3;
reg   [2:0] tmp_3_reg_1015;
wire   [2:0] tmp_5_2_i_mid2_v_fu_606_p2;
reg   [2:0] tmp_5_2_i_mid2_v_reg_1020;
wire   [4:0] newIndex1_i_cast_fu_612_p1;
reg   [4:0] newIndex1_i_cast_reg_1025;
reg  signed [31:0] kernel_0_load_reg_1046;
reg  signed [31:0] kernel_1_load_reg_1051;
reg   [2:0] tmp_22_reg_1056;
reg  signed [31:0] kernel_2_load_reg_1061;
reg   [31:0] input_0_load_reg_1066;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] input_1_load_reg_1071;
reg   [31:0] input_2_load_reg_1076;
wire   [4:0] newIndex3_i_cast_fu_653_p1;
reg   [4:0] newIndex3_i_cast_reg_1081;
reg  signed [31:0] kernel_0_load_1_reg_1102;
reg  signed [31:0] kernel_1_load_1_reg_1107;
reg  signed [31:0] kernel_2_load_1_reg_1112;
reg   [31:0] input_1_load_1_reg_1117;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] input_2_load_1_reg_1122;
reg   [31:0] input_0_load_1_reg_1127;
wire   [4:0] newIndex5_i_cast_fu_668_p1;
reg   [4:0] newIndex5_i_cast_reg_1132;
reg  signed [31:0] kernel_0_load_2_reg_1153;
reg  signed [31:0] kernel_1_load_2_reg_1158;
reg  signed [31:0] kernel_2_load_2_reg_1163;
wire   [4:0] tmp_16_cast_fu_690_p1;
reg   [4:0] tmp_16_cast_reg_1168;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] input_2_load_2_reg_1189;
reg   [31:0] input_0_load_2_reg_1194;
reg   [31:0] input_1_load_2_reg_1199;
wire   [4:0] tmp_17_fu_717_p2;
reg   [4:0] tmp_17_reg_1204;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [4:0] tmp_21_fu_733_p2;
reg   [4:0] tmp_21_reg_1214;
wire   [4:0] tmp_24_fu_738_p2;
reg   [4:0] tmp_24_reg_1229;
wire   [4:0] tmp_25_fu_742_p2;
reg   [4:0] tmp_25_reg_1234;
reg   [31:0] input_0_load_3_reg_1239;
reg   [31:0] input_1_load_3_reg_1244;
reg   [31:0] input_2_load_3_reg_1249;
wire   [31:0] arrayNo_i_cast_fu_747_p1;
reg   [31:0] arrayNo_i_cast_reg_1254;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire  signed [31:0] tmp_4_fu_752_p5;
reg  signed [31:0] tmp_4_reg_1261;
wire  signed [31:0] tmp_5_fu_761_p5;
reg  signed [31:0] tmp_5_reg_1266;
wire  signed [31:0] tmp_6_fu_776_p5;
reg  signed [31:0] tmp_6_reg_1286;
wire  signed [31:0] tmp_7_fu_785_p5;
reg  signed [31:0] tmp_7_reg_1291;
wire  signed [31:0] grp_fu_461_p5;
reg  signed [31:0] tmp_8_reg_1296;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] tmp_1_0_i_fu_800_p2;
reg   [31:0] tmp_1_0_i_reg_1316;
wire   [31:0] tmp_1_0_1_i_fu_804_p2;
reg   [31:0] tmp_1_0_1_i_reg_1321;
wire  signed [31:0] grp_fu_472_p5;
reg  signed [31:0] tmp_9_reg_1326;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [31:0] tmp_1_0_2_i_fu_814_p2;
reg   [31:0] tmp_1_0_2_i_reg_1346;
wire   [31:0] tmp_1_1_i_fu_818_p2;
reg   [31:0] tmp_1_1_i_reg_1351;
wire  signed [31:0] tmp_s_fu_822_p5;
reg  signed [31:0] tmp_s_reg_1356;
wire   [31:0] tmp2_fu_833_p2;
reg   [31:0] tmp2_reg_1361;
reg  signed [31:0] tmp_10_reg_1381;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] tmp1_fu_847_p2;
reg   [31:0] tmp1_reg_1386;
wire   [31:0] tmp_1_1_1_i_fu_852_p2;
reg   [31:0] tmp_1_1_1_i_reg_1391;
reg  signed [31:0] tmp_11_reg_1396;
wire   [31:0] tmp_1_1_2_i_fu_856_p2;
reg   [31:0] tmp_1_1_2_i_reg_1401;
wire   [31:0] tmp_1_2_i_fu_860_p2;
reg   [31:0] tmp_1_2_i_reg_1406;
wire   [31:0] tmp_1_2_1_i_fu_864_p2;
reg   [31:0] tmp_1_2_1_i_reg_1411;
wire   [31:0] tmp_1_2_2_i_fu_868_p2;
reg   [31:0] tmp_1_2_2_i_reg_1416;
wire   [31:0] tmp5_fu_872_p2;
reg   [31:0] tmp5_reg_1421;
wire   [31:0] sum_2_2_2_i_fu_890_p2;
reg   [31:0] sum_2_2_2_i_reg_1426;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage5_subdone;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_431_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_row_assign_phi_fu_442_p4;
wire    ap_block_pp0_stage1;
reg   [2:0] ap_phi_mux_col_assign_phi_fu_454_p4;
wire   [63:0] tmp_19_cast_fu_621_p1;
wire   [63:0] tmp_22_cast_fu_661_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_25_cast_fu_676_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_20_cast_fu_699_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_23_cast_fu_726_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] tmp_26_cast_fu_770_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] tmp_21_cast_fu_794_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] tmp_24_cast_fu_808_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] tmp_27_cast_fu_837_p1;
wire   [63:0] tmp_28_cast_fu_915_p1;
reg   [31:0] grp_fu_461_p4;
wire   [2:0] mul5_fu_519_p0;
wire   [7:0] mul5_fu_519_p2;
wire   [2:0] mul2_fu_545_p0;
wire   [7:0] mul2_fu_545_p2;
wire   [2:0] r8_fu_561_p2;
wire   [3:0] tmp_fu_574_p3;
wire   [2:0] r_mid1_fu_586_p2;
wire   [2:0] tmp_5_2_i_mid2_v_v_c_fu_599_p3;
wire   [4:0] tmp_15_fu_615_p2;
wire   [2:0] tmp_8_0_2_i_fu_628_p2;
wire   [2:0] mul_fu_637_p0;
wire   [7:0] mul_fu_637_p2;
wire   [4:0] tmp_19_fu_656_p2;
wire   [4:0] tmp_23_fu_671_p2;
wire   [3:0] tmp_12_fu_683_p3;
wire   [4:0] tmp_16_fu_694_p2;
wire   [3:0] tmp_13_fu_706_p3;
wire   [4:0] tmp_18_cast_fu_713_p1;
wire   [4:0] tmp_20_fu_722_p2;
wire   [2:0] grp_fu_509_p2;
wire   [31:0] tmp3_fu_843_p2;
wire   [31:0] tmp7_fu_876_p2;
wire   [31:0] tmp6_fu_880_p2;
wire   [31:0] tmp4_fu_885_p2;
wire   [4:0] tmp_1_fu_895_p3;
wire   [5:0] tmp_14_cast_fu_902_p1;
wire   [5:0] tmp_3_cast_fu_906_p1;
wire   [5:0] tmp_26_fu_909_p2;
wire    ap_CS_fsm_state17;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul2_fu_545_p00;
wire   [7:0] mul5_fu_519_p00;
wire   [7:0] mul_fu_637_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

convolution_2d_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
convolution_2d_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_0_address0(input_0_address0),
    .input_0_ce0(input_0_ce0),
    .input_0_q0(input_0_q0),
    .input_1_address0(input_1_address0),
    .input_1_ce0(input_1_ce0),
    .input_1_q0(input_1_q0),
    .input_2_address0(input_2_address0),
    .input_2_ce0(input_2_ce0),
    .input_2_q0(input_2_q0),
    .kernel_0_address0(kernel_0_address0),
    .kernel_0_ce0(kernel_0_ce0),
    .kernel_0_q0(kernel_0_q0),
    .kernel_1_address0(kernel_1_address0),
    .kernel_1_ce0(kernel_1_ce0),
    .kernel_1_q0(kernel_1_q0),
    .kernel_2_address0(kernel_2_address0),
    .kernel_2_ce0(kernel_2_ce0),
    .kernel_2_q0(kernel_2_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(sum_2_2_2_i_reg_1426)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U1(
    .din0(input_1_q0),
    .din1(input_2_q0),
    .din2(input_0_q0),
    .din3(grp_fu_461_p4),
    .dout(grp_fu_461_p5)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U2(
    .din0(input_2_q0),
    .din1(input_0_q0),
    .din2(input_1_q0),
    .din3(arrayNo_i_cast_reg_1254),
    .dout(grp_fu_472_p5)
);

convolution_2d_urcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 3 ))
convolution_2d_urcud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(col_assign_mid2_fu_501_p3),
    .din1(3'd3),
    .ce(1'b1),
    .dout(grp_fu_509_p2)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U4(
    .din0(input_0_load_reg_1066),
    .din1(input_1_load_reg_1071),
    .din2(input_2_load_reg_1076),
    .din3(arrayNo_i_cast_fu_747_p1),
    .dout(tmp_4_fu_752_p5)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U5(
    .din0(input_1_load_1_reg_1117),
    .din1(input_2_load_1_reg_1122),
    .din2(input_0_load_1_reg_1127),
    .din3(arrayNo_i_cast_fu_747_p1),
    .dout(tmp_5_fu_761_p5)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U6(
    .din0(input_2_load_2_reg_1189),
    .din1(input_0_load_2_reg_1194),
    .din2(input_1_load_2_reg_1199),
    .din3(arrayNo_i_cast_fu_747_p1),
    .dout(tmp_6_fu_776_p5)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U7(
    .din0(input_0_load_3_reg_1239),
    .din1(input_1_load_3_reg_1244),
    .din2(input_2_load_3_reg_1249),
    .din3(arrayNo_i_cast_fu_747_p1),
    .dout(tmp_7_fu_785_p5)
);

convolution_2d_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution_2d_mubkb_U8(
    .din0(input_0_q0),
    .din1(input_1_q0),
    .din2(input_2_q0),
    .din3(arrayNo_i_cast_reg_1254),
    .dout(tmp_s_fu_822_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_965 == 1'd0))) begin
        col_assign_reg_450 <= c_reg_993;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_assign_reg_450 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_965 == 1'd0))) begin
        indvar_flatten_reg_427 <= indvar_flatten_next_reg_969;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_427 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        row_assign_reg_438 <= tmp_mid2_v_reg_1003;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_assign_reg_438 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_965 == 1'd0))) begin
        arrayNo_i_cast_reg_1254[2 : 0] <= arrayNo_i_cast_fu_747_p1[2 : 0];
        tmp_4_reg_1261 <= tmp_4_fu_752_p5;
        tmp_5_reg_1266 <= tmp_5_fu_761_p5;
        tmp_6_reg_1286 <= tmp_6_fu_776_p5;
        tmp_7_reg_1291 <= tmp_7_fu_785_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_483_p2 == 1'd0))) begin
        c_reg_993 <= c_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_483_p2 == 1'd0))) begin
        col_assign_mid2_reg_981 <= col_assign_mid2_fu_501_p3;
        exitcond_reg_974 <= exitcond_fu_495_p2;
        tmp_14_reg_988 <= {{mul5_fu_519_p2[7:5]}};
        tmp_18_reg_998 <= {{mul2_fu_545_p2[7:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_mid2_reg_981_pp0_iter1_reg <= col_assign_mid2_reg_981;
        exitcond_flatten_reg_965 <= exitcond_flatten_fu_483_p2;
        exitcond_flatten_reg_965_pp0_iter1_reg <= exitcond_flatten_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_969 <= indvar_flatten_next_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_965 == 1'd0))) begin
        input_0_load_1_reg_1127 <= input_0_q0;
        input_1_load_1_reg_1117 <= input_1_q0;
        input_2_load_1_reg_1122 <= input_2_q0;
        kernel_0_load_2_reg_1153 <= kernel_0_q0;
        kernel_1_load_2_reg_1158 <= kernel_1_q0;
        kernel_2_load_2_reg_1163 <= kernel_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_965 == 1'd0))) begin
        input_0_load_2_reg_1194 <= input_0_q0;
        input_1_load_2_reg_1199 <= input_1_q0;
        input_2_load_2_reg_1189 <= input_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_965 == 1'd0))) begin
        input_0_load_3_reg_1239 <= input_0_q0;
        input_1_load_3_reg_1244 <= input_1_q0;
        input_2_load_3_reg_1249 <= input_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_965 == 1'd0))) begin
        input_0_load_reg_1066 <= input_0_q0;
        input_1_load_reg_1071 <= input_1_q0;
        input_2_load_reg_1076 <= input_2_q0;
        kernel_0_load_1_reg_1102 <= kernel_0_q0;
        kernel_1_load_1_reg_1107 <= kernel_1_q0;
        kernel_2_load_1_reg_1112 <= kernel_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_965 == 1'd0))) begin
        kernel_0_load_reg_1046 <= kernel_0_q0;
        kernel_1_load_reg_1051 <= kernel_1_q0;
        kernel_2_load_reg_1061 <= kernel_2_q0;
        tmp_mid2_v_reg_1003 <= tmp_mid2_v_fu_567_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_965 == 1'd0))) begin
        newIndex1_i_cast_reg_1025[2 : 0] <= newIndex1_i_cast_fu_612_p1[2 : 0];
        tmp_1_cast_reg_1009[3 : 1] <= tmp_1_cast_fu_582_p1[3 : 1];
        tmp_22_reg_1056 <= {{mul_fu_637_p2[7:5]}};
        tmp_3_reg_1015 <= tmp_3_fu_592_p3;
        tmp_5_2_i_mid2_v_reg_1020 <= tmp_5_2_i_mid2_v_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_965 == 1'd0))) begin
        newIndex3_i_cast_reg_1081[2 : 0] <= newIndex3_i_cast_fu_653_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_965 == 1'd0))) begin
        newIndex5_i_cast_reg_1132[2 : 0] <= newIndex5_i_cast_fu_668_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        sum_2_2_2_i_reg_1426 <= sum_2_2_2_i_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp1_reg_1386 <= tmp1_fu_847_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp2_reg_1361 <= tmp2_fu_833_p2;
        tmp_1_0_2_i_reg_1346 <= tmp_1_0_2_i_fu_814_p2;
        tmp_1_1_i_reg_1351 <= tmp_1_1_i_fu_818_p2;
        tmp_s_reg_1356 <= tmp_s_fu_822_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        tmp5_reg_1421 <= tmp5_fu_872_p2;
        tmp_1_2_1_i_reg_1411 <= tmp_1_2_1_i_fu_864_p2;
        tmp_1_2_2_i_reg_1416 <= tmp_1_2_2_i_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp_10_reg_1381 <= grp_fu_461_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        tmp_11_reg_1396 <= grp_fu_472_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp_16_cast_reg_1168[3 : 1] <= tmp_16_cast_fu_690_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp_17_reg_1204 <= tmp_17_fu_717_p2;
        tmp_21_reg_1214 <= tmp_21_fu_733_p2;
        tmp_24_reg_1229 <= tmp_24_fu_738_p2;
        tmp_25_reg_1234 <= tmp_25_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp_1_0_1_i_reg_1321 <= tmp_1_0_1_i_fu_804_p2;
        tmp_1_0_i_reg_1316 <= tmp_1_0_i_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        tmp_1_1_1_i_reg_1391 <= tmp_1_1_1_i_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        tmp_1_1_2_i_reg_1401 <= tmp_1_1_2_i_fu_856_p2;
        tmp_1_2_i_reg_1406 <= tmp_1_2_i_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp_8_reg_1296 <= grp_fu_461_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_965 == 1'd0))) begin
        tmp_9_reg_1326 <= grp_fu_472_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_mid2_v_reg_1003_pp0_iter1_reg <= tmp_mid2_v_reg_1003;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_483_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_965 == 1'd0))) begin
        ap_phi_mux_col_assign_phi_fu_454_p4 = c_reg_993;
    end else begin
        ap_phi_mux_col_assign_phi_fu_454_p4 = col_assign_reg_450;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_965 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_431_p4 = indvar_flatten_next_reg_969;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_431_p4 = indvar_flatten_reg_427;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_row_assign_phi_fu_442_p4 = tmp_mid2_v_reg_1003;
    end else begin
        ap_phi_mux_row_assign_phi_fu_442_p4 = row_assign_reg_438;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_461_p4 = arrayNo_i_cast_reg_1254;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_461_p4 = arrayNo_i_cast_fu_747_p1;
    end else begin
        grp_fu_461_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_address0 = tmp_27_cast_fu_837_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_24_cast_fu_808_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_21_cast_fu_794_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_26_cast_fu_770_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_23_cast_fu_726_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_20_cast_fu_699_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_25_cast_fu_676_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_22_cast_fu_661_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_address0 = tmp_19_cast_fu_621_p1;
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_address0 = tmp_27_cast_fu_837_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_24_cast_fu_808_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_21_cast_fu_794_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_26_cast_fu_770_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_23_cast_fu_726_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_20_cast_fu_699_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_25_cast_fu_676_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_22_cast_fu_661_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_address0 = tmp_19_cast_fu_621_p1;
    end else begin
        input_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_address0 = tmp_27_cast_fu_837_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_24_cast_fu_808_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_21_cast_fu_794_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_26_cast_fu_770_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_23_cast_fu_726_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_20_cast_fu_699_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_25_cast_fu_676_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_22_cast_fu_661_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_address0 = tmp_19_cast_fu_621_p1;
    end else begin
        input_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_0_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_0_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_0_address0 = 64'd0;
        end else begin
            kernel_0_address0 = 'bx;
        end
    end else begin
        kernel_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_1_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_1_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_1_address0 = 64'd0;
        end else begin
            kernel_1_address0 = 'bx;
        end
    end else begin
        kernel_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        kernel_1_ce0 = 1'b1;
    end else begin
        kernel_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_2_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_2_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_2_address0 = 64'd0;
        end else begin
            kernel_2_address0 = 'bx;
        end
    end else begin
        kernel_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        kernel_2_ce0 = 1'b1;
    end else begin
        kernel_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_965_pp0_iter1_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_483_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_483_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign arrayNo_i_cast_fu_747_p1 = grp_fu_509_p2;

assign c_fu_535_p2 = (col_assign_mid2_fu_501_p3 + 3'd1);

assign col_assign_mid2_fu_501_p3 = ((exitcond_fu_495_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_col_assign_phi_fu_454_p4);

assign exitcond_flatten_fu_483_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_431_p4 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_495_p2 = ((ap_phi_mux_col_assign_phi_fu_454_p4 == 3'd4) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_489_p2 = (ap_phi_mux_indvar_flatten_phi_fu_431_p4 + 5'd1);

assign mul2_fu_545_p0 = mul2_fu_545_p00;

assign mul2_fu_545_p00 = c_fu_535_p2;

assign mul2_fu_545_p2 = (mul2_fu_545_p0 * $signed('hB));

assign mul5_fu_519_p0 = mul5_fu_519_p00;

assign mul5_fu_519_p00 = col_assign_mid2_fu_501_p3;

assign mul5_fu_519_p2 = (mul5_fu_519_p0 * $signed('hB));

assign mul_fu_637_p0 = mul_fu_637_p00;

assign mul_fu_637_p00 = tmp_8_0_2_i_fu_628_p2;

assign mul_fu_637_p2 = (mul_fu_637_p0 * $signed('hB));

assign newIndex1_i_cast_fu_612_p1 = tmp_14_reg_988;

assign newIndex3_i_cast_fu_653_p1 = tmp_18_reg_998;

assign newIndex5_i_cast_fu_668_p1 = tmp_22_reg_1056;

assign output_r_address0 = tmp_28_cast_fu_915_p1;

assign r8_fu_561_p2 = (ap_phi_mux_row_assign_phi_fu_442_p4 + 3'd1);

assign r_mid1_fu_586_p2 = (ap_phi_mux_row_assign_phi_fu_442_p4 + 3'd2);

assign sum_2_2_2_i_fu_890_p2 = (tmp1_reg_1386 + tmp4_fu_885_p2);

assign tmp1_fu_847_p2 = (tmp2_reg_1361 + tmp3_fu_843_p2);

assign tmp2_fu_833_p2 = (tmp_1_0_1_i_reg_1321 + tmp_1_0_i_reg_1316);

assign tmp3_fu_843_p2 = (tmp_1_1_i_reg_1351 + tmp_1_0_2_i_reg_1346);

assign tmp4_fu_885_p2 = (tmp5_reg_1421 + tmp6_fu_880_p2);

assign tmp5_fu_872_p2 = (tmp_1_1_2_i_reg_1401 + tmp_1_1_1_i_reg_1391);

assign tmp6_fu_880_p2 = (tmp_1_2_i_reg_1406 + tmp7_fu_876_p2);

assign tmp7_fu_876_p2 = (tmp_1_2_2_i_reg_1416 + tmp_1_2_1_i_reg_1411);

assign tmp_12_fu_683_p3 = {{tmp_3_reg_1015}, {1'd0}};

assign tmp_13_fu_706_p3 = {{tmp_5_2_i_mid2_v_reg_1020}, {1'd0}};

assign tmp_14_cast_fu_902_p1 = tmp_1_fu_895_p3;

assign tmp_15_fu_615_p2 = (tmp_1_cast_fu_582_p1 + newIndex1_i_cast_fu_612_p1);

assign tmp_16_cast_fu_690_p1 = tmp_12_fu_683_p3;

assign tmp_16_fu_694_p2 = (tmp_16_cast_fu_690_p1 + newIndex1_i_cast_reg_1025);

assign tmp_17_fu_717_p2 = (tmp_18_cast_fu_713_p1 + newIndex1_i_cast_reg_1025);

assign tmp_18_cast_fu_713_p1 = tmp_13_fu_706_p3;

assign tmp_19_cast_fu_621_p1 = tmp_15_fu_615_p2;

assign tmp_19_fu_656_p2 = (tmp_1_cast_reg_1009 + newIndex3_i_cast_fu_653_p1);

assign tmp_1_0_1_i_fu_804_p2 = ($signed(tmp_5_reg_1266) * $signed(kernel_1_load_reg_1051));

assign tmp_1_0_2_i_fu_814_p2 = ($signed(tmp_6_reg_1286) * $signed(kernel_2_load_reg_1061));

assign tmp_1_0_i_fu_800_p2 = ($signed(tmp_4_reg_1261) * $signed(kernel_0_load_reg_1046));

assign tmp_1_1_1_i_fu_852_p2 = ($signed(tmp_8_reg_1296) * $signed(kernel_1_load_1_reg_1107));

assign tmp_1_1_2_i_fu_856_p2 = ($signed(tmp_9_reg_1326) * $signed(kernel_2_load_1_reg_1112));

assign tmp_1_1_i_fu_818_p2 = ($signed(tmp_7_reg_1291) * $signed(kernel_0_load_1_reg_1102));

assign tmp_1_2_1_i_fu_864_p2 = ($signed(tmp_10_reg_1381) * $signed(kernel_1_load_2_reg_1158));

assign tmp_1_2_2_i_fu_868_p2 = ($signed(tmp_11_reg_1396) * $signed(kernel_2_load_2_reg_1163));

assign tmp_1_2_i_fu_860_p2 = ($signed(tmp_s_reg_1356) * $signed(kernel_0_load_2_reg_1153));

assign tmp_1_cast_fu_582_p1 = tmp_fu_574_p3;

assign tmp_1_fu_895_p3 = {{tmp_mid2_v_reg_1003_pp0_iter1_reg}, {2'd0}};

assign tmp_20_cast_fu_699_p1 = tmp_16_fu_694_p2;

assign tmp_20_fu_722_p2 = (tmp_16_cast_reg_1168 + newIndex3_i_cast_reg_1081);

assign tmp_21_cast_fu_794_p1 = tmp_17_reg_1204;

assign tmp_21_fu_733_p2 = (tmp_18_cast_fu_713_p1 + newIndex3_i_cast_reg_1081);

assign tmp_22_cast_fu_661_p1 = tmp_19_fu_656_p2;

assign tmp_23_cast_fu_726_p1 = tmp_20_fu_722_p2;

assign tmp_23_fu_671_p2 = (tmp_1_cast_reg_1009 + newIndex5_i_cast_fu_668_p1);

assign tmp_24_cast_fu_808_p1 = tmp_21_reg_1214;

assign tmp_24_fu_738_p2 = (tmp_16_cast_reg_1168 + newIndex5_i_cast_reg_1132);

assign tmp_25_cast_fu_676_p1 = tmp_23_fu_671_p2;

assign tmp_25_fu_742_p2 = (tmp_18_cast_fu_713_p1 + newIndex5_i_cast_reg_1132);

assign tmp_26_cast_fu_770_p1 = tmp_24_reg_1229;

assign tmp_26_fu_909_p2 = (tmp_14_cast_fu_902_p1 + tmp_3_cast_fu_906_p1);

assign tmp_27_cast_fu_837_p1 = tmp_25_reg_1234;

assign tmp_28_cast_fu_915_p1 = tmp_26_fu_909_p2;

assign tmp_3_cast_fu_906_p1 = col_assign_mid2_reg_981_pp0_iter1_reg;

assign tmp_3_fu_592_p3 = ((exitcond_reg_974[0:0] === 1'b1) ? r_mid1_fu_586_p2 : r8_fu_561_p2);

assign tmp_5_2_i_mid2_v_fu_606_p2 = (ap_phi_mux_row_assign_phi_fu_442_p4 + tmp_5_2_i_mid2_v_v_c_fu_599_p3);

assign tmp_5_2_i_mid2_v_v_c_fu_599_p3 = ((exitcond_reg_974[0:0] === 1'b1) ? 3'd3 : 3'd2);

assign tmp_8_0_2_i_fu_628_p2 = (col_assign_mid2_reg_981 + 3'd2);

assign tmp_fu_574_p3 = {{tmp_mid2_v_fu_567_p3}, {1'd0}};

assign tmp_mid2_v_fu_567_p3 = ((exitcond_reg_974[0:0] === 1'b1) ? r8_fu_561_p2 : ap_phi_mux_row_assign_phi_fu_442_p4);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_1009[0] <= 1'b0;
    tmp_1_cast_reg_1009[4] <= 1'b0;
    newIndex1_i_cast_reg_1025[4:3] <= 2'b00;
    newIndex3_i_cast_reg_1081[4:3] <= 2'b00;
    newIndex5_i_cast_reg_1132[4:3] <= 2'b00;
    tmp_16_cast_reg_1168[0] <= 1'b0;
    tmp_16_cast_reg_1168[4] <= 1'b0;
    arrayNo_i_cast_reg_1254[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //convolution_2d
