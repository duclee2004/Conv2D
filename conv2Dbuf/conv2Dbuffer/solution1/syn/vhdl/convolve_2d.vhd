-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolve_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=2582,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=416,HLS_SYN_LUT=810,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal or_cond_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_i_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond7_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_353_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_747 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_371_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_383_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_fu_409_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_768 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_427_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_781 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal tmp_28_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_439_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_795 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_5_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_reg_800 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_467_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_reg_806 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_fu_477_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_816 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_501_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_826 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_834 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond4_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_568_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_reg_844 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_fu_584_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_852 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_10_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_642_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_reg_867 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_cond_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_675_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_5_reg_879 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op165_write_state13 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal tmp_26_fu_697_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_reg_884 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_fu_709_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_892 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_i_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_load_1_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal kernel_load_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal result_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal line_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC;
    signal line_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_ce0 : STD_LOGIC;
    signal window_we0 : STD_LOGIC;
    signal window_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond9_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_assign_reg_233 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_244 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal j2_reg_267 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i3_reg_278 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i4_reg_289 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_2_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_313 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_1_i_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_reg_336 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_cast_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_658_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_363_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_359_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_389_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_449_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_457_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_445_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_483_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast_fu_497_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_526_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_13_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_540_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_550_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_558_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_562_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_cast_fu_596_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_608_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_614_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_628_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_cast_fu_624_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_636_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_685_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl6_cast_fu_693_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i1_cast_fu_681_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i2_cast_fu_715_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_fu_719_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component convolve_2d_line_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_2d_window IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    line_buf_U : component convolve_2d_line_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => line_buf_d0,
        q0 => line_buf_q0);

    window_U : component convolve_2d_window
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_address0,
        ce0 => window_ce0,
        we0 => window_we0,
        d0 => window_d0,
        q0 => window_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_reg_256 <= i_3_reg_795;
            elsif ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i1_reg_256 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i3_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i3_reg_278 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i3_reg_278 <= i_2_reg_834;
            end if; 
        end if;
    end process;

    i4_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i4_reg_289 <= i_4_reg_852;
            elsif (((exitcond4_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i4_reg_289 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_i_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_653_p2 = ap_const_lv1_1) and (exitcond_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_i_reg_313 <= ap_const_lv2_0;
            elsif (((exitcond_i_fu_703_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_i_reg_313 <= i_5_reg_879;
            end if; 
        end if;
    end process;

    i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_211 <= i_1_reg_747;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_211 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j2_reg_267 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j2_reg_267 <= j_2_reg_816;
            end if; 
        end if;
    end process;

    j_i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_i_reg_336 <= j_3_reg_892;
            elsif ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (exitcond1_i_fu_669_p2 = ap_const_lv1_0) and (or_cond_reg_872 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j_i_reg_336 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_222 <= ap_const_lv3_0;
            elsif (((exitcond9_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_222 <= j_1_fu_383_p2;
            end if; 
        end if;
    end process;

    result_1_i_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                result_1_i_reg_324 <= result_fu_734_p2;
            elsif ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (exitcond1_i_fu_669_p2 = ap_const_lv1_0) and (or_cond_reg_872 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                result_1_i_reg_324 <= result_2_reg_300;
            end if; 
        end if;
    end process;

    result_2_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_653_p2 = ap_const_lv1_1) and (exitcond_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                result_2_reg_300 <= ap_const_lv32_0;
            elsif (((exitcond_i_fu_703_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                result_2_reg_300 <= result_1_i_reg_324;
            end if; 
        end if;
    end process;

    x_assign_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_assign_reg_244 <= ap_const_lv3_0;
            elsif ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and ((exitcond1_i_fu_669_p2 = ap_const_lv1_1) or (or_cond_reg_872 = ap_const_lv1_0)))) then 
                x_assign_reg_244 <= x_reg_781;
            end if; 
        end if;
    end process;

    y_assign_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_assign_reg_233 <= ap_const_lv3_0;
            elsif ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_assign_reg_233 <= y_reg_768;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_747 <= i_1_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_2_reg_834 <= i_2_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_795 <= i_3_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_4_reg_852 <= i_4_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (or_cond_reg_872 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_5_reg_879 <= i_5_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_816 <= j_2_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_3_reg_892 <= j_3_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                kernel_load_reg_912 <= kernel_q0;
                window_load_1_reg_907 <= window_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                or_cond_reg_872 <= or_cond_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_578_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_10_reg_857 <= tmp_10_fu_590_p2;
                tmp_24_reg_867 <= tmp_24_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_16_reg_844 <= tmp_16_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_17_i_reg_917 <= tmp_17_i_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_18_reg_826 <= tmp_18_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_1_reg_773 <= tmp_1_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (exitcond1_i_fu_669_p2 = ap_const_lv1_0) and (or_cond_reg_872 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_26_reg_884 <= tmp_26_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_28_reg_786 <= in_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_2_reg_752 <= tmp_2_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_5_reg_800 <= tmp_5_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_8_cast_reg_806(2 downto 0) <= tmp_8_cast_fu_467_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                x_reg_781 <= x_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_768 <= y_fu_409_p2;
            end if;
        end if;
    end process;
    tmp_8_cast_reg_806(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_stream_V_full_n, in_stream_V_empty_n, ap_CS_fsm_state13, or_cond_reg_872, exitcond1_i_fu_669_p2, ap_CS_fsm_state5, exitcond7_fu_421_p2, ap_CS_fsm_state2, exitcond1_fu_347_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond8_fu_403_p2, ap_CS_fsm_state6, exitcond6_fu_433_p2, ap_CS_fsm_state7, exitcond5_fu_471_p2, ap_CS_fsm_state9, exitcond4_fu_510_p2, ap_CS_fsm_state11, exitcond_fu_578_p2, ap_predicate_op165_write_state13, ap_CS_fsm_state14, exitcond_i_fu_703_p2, exitcond9_fu_377_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond9_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond8_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond6_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond5_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((exitcond4_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((exitcond_fu_578_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and ((exitcond1_i_fu_669_p2 = ap_const_lv1_1) or (or_cond_reg_872 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (exitcond1_i_fu_669_p2 = ap_const_lv1_0) and (or_cond_reg_872 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((exitcond_i_fu_703_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state13_assign_proc : process(out_stream_V_full_n, ap_predicate_op165_write_state13)
    begin
                ap_block_state13 <= ((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(in_stream_V_empty_n, exitcond7_fu_421_p2)
    begin
                ap_block_state5 <= ((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, exitcond8_fu_403_p2)
    begin
        if (((exitcond8_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op165_write_state13_assign_proc : process(or_cond_reg_872, exitcond1_i_fu_669_p2)
    begin
                ap_predicate_op165_write_state13 <= ((exitcond1_i_fu_669_p2 = ap_const_lv1_1) and (or_cond_reg_872 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond8_fu_403_p2)
    begin
        if (((exitcond8_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_347_p2 <= "1" when (i_reg_211 = ap_const_lv2_2) else "0";
    exitcond1_i_fu_669_p2 <= "1" when (i_i_reg_313 = ap_const_lv2_3) else "0";
    exitcond4_fu_510_p2 <= "1" when (i3_reg_278 = ap_const_lv2_2) else "0";
    exitcond5_fu_471_p2 <= "1" when (j2_reg_267 = ap_const_lv2_2) else "0";
    exitcond6_fu_433_p2 <= "1" when (i1_reg_256 = ap_const_lv2_3) else "0";
    exitcond7_fu_421_p2 <= "1" when (x_assign_reg_244 = ap_const_lv3_7) else "0";
    exitcond8_fu_403_p2 <= "1" when (y_assign_reg_233 = ap_const_lv3_7) else "0";
    exitcond9_fu_377_p2 <= "1" when (j_reg_222 = ap_const_lv3_7) else "0";
    exitcond_fu_578_p2 <= "1" when (i4_reg_289 = ap_const_lv2_2) else "0";
    exitcond_i_fu_703_p2 <= "1" when (j_i_reg_336 = ap_const_lv2_3) else "0";
    i_1_fu_353_p2 <= std_logic_vector(unsigned(i_reg_211) + unsigned(ap_const_lv2_1));
    i_2_fu_516_p2 <= std_logic_vector(unsigned(i3_reg_278) + unsigned(ap_const_lv2_1));
    i_3_fu_439_p2 <= std_logic_vector(unsigned(i1_reg_256) + unsigned(ap_const_lv2_1));
    i_4_fu_584_p2 <= std_logic_vector(unsigned(i4_reg_289) + unsigned(ap_const_lv2_1));
    i_5_fu_675_p2 <= std_logic_vector(unsigned(i_i_reg_313) + unsigned(ap_const_lv2_1));

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_state5, exitcond7_fu_421_p2)
    begin
        if (((exitcond7_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_state5, exitcond7_fu_421_p2)
    begin
        if ((not(((exitcond7_fu_421_p2 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_383_p2 <= std_logic_vector(unsigned(j_reg_222) + unsigned(ap_const_lv3_1));
    j_2_fu_477_p2 <= std_logic_vector(unsigned(j2_reg_267) + unsigned(ap_const_lv2_1));
    j_3_fu_709_p2 <= std_logic_vector(unsigned(j_i_reg_336) + unsigned(ap_const_lv2_1));
    kernel_address0 <= tmp_38_cast_fu_724_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_18_cast_fu_398_p1, tmp_23_cast_fu_545_p1, tmp_31_cast_fu_619_p1, tmp_34_cast_fu_665_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            line_buf_address0 <= tmp_34_cast_fu_665_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            line_buf_address0 <= tmp_31_cast_fu_619_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            line_buf_address0 <= tmp_23_cast_fu_545_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            line_buf_address0 <= tmp_18_cast_fu_398_p1(4 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXX";
        end if; 
    end process;


    line_buf_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_15_fu_658_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            line_buf_d0 <= tmp_15_fu_658_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            line_buf_d0 <= ap_const_lv32_0;
        else 
            line_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buf_we0_assign_proc : process(ap_CS_fsm_state3, exitcond9_fu_377_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond9_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            line_buf_we0 <= ap_const_logic_1;
        else 
            line_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_653_p2 <= (tmp_7_fu_647_p2 and tmp_1_reg_773);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_CS_fsm_state13, or_cond_reg_872, exitcond1_i_fu_669_p2)
    begin
        if (((exitcond1_i_fu_669_p2 = ap_const_lv1_1) and (or_cond_reg_872 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= result_2_reg_300;

    out_stream_V_write_assign_proc : process(out_stream_V_full_n, ap_CS_fsm_state13, ap_predicate_op165_write_state13)
    begin
        if ((not(((ap_predicate_op165_write_state13 = ap_const_boolean_1) and (out_stream_V_full_n = ap_const_logic_0))) and (ap_predicate_op165_write_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_449_p3),5));
    p_shl2_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_550_p3),5));
    p_shl6_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_685_p3),5));
    result_fu_734_p2 <= std_logic_vector(unsigned(result_1_i_reg_324) + unsigned(tmp_17_i_reg_917));
    tmp_10_fu_590_p2 <= "1" when (i4_reg_289 = ap_const_lv2_1) else "0";
    tmp_11_fu_540_p2 <= std_logic_vector(unsigned(tmp_9_fu_534_p2) + unsigned(tmp_8_cast_reg_806));
    tmp_13_fu_550_p3 <= (i3_reg_278 & ap_const_lv2_0);
    tmp_14_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_584_p2),5));
    tmp_14_fu_562_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_558_p1) - unsigned(tmp_cast_13_fu_522_p1));
    tmp_15_fu_658_p3 <= 
        tmp_28_reg_786 when (tmp_10_reg_857(0) = '1') else 
        line_buf_q0;
    tmp_16_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_289),5));
    tmp_16_fu_568_p2 <= std_logic_vector(unsigned(tmp_14_fu_562_p2) + unsigned(ap_const_lv5_2));
    tmp_17_fu_487_p2 <= std_logic_vector(unsigned(tmp_5_reg_800) + unsigned(tmp_4_cast_fu_483_p1));
    tmp_17_i_fu_730_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_912) * signed(window_load_1_reg_907))), 32));
        tmp_18_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_393_p2),64));

    tmp_18_fu_501_p2 <= std_logic_vector(unsigned(tmp_5_reg_800) + unsigned(tmp_5_cast_fu_497_p1));
    tmp_19_fu_600_p3 <= (i_4_fu_584_p2 & ap_const_lv3_0);
    tmp_1_fu_415_p2 <= "0" when (y_assign_reg_233 = ap_const_lv3_0) else "1";
    tmp_20_fu_608_p2 <= std_logic_vector(unsigned(tmp_19_fu_600_p3) - unsigned(tmp_14_cast_fu_596_p1));
    tmp_21_fu_614_p2 <= std_logic_vector(unsigned(tmp_20_fu_608_p2) + unsigned(tmp_8_cast_reg_806));
    tmp_22_fu_628_p3 <= (i4_reg_289 & ap_const_lv3_0);
        tmp_23_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_540_p2),64));

    tmp_23_fu_636_p2 <= std_logic_vector(unsigned(tmp_22_fu_628_p3) - unsigned(tmp_16_cast_fu_624_p1));
    tmp_24_fu_642_p2 <= std_logic_vector(unsigned(tmp_23_fu_636_p2) + unsigned(tmp_8_cast_reg_806));
    tmp_25_fu_685_p3 <= (i_i_reg_313 & ap_const_lv2_0);
        tmp_26_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_844),64));

    tmp_26_fu_697_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_693_p1) - unsigned(tmp_i1_cast_fu_681_p1));
        tmp_27_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_487_p2),64));

    tmp_27_fu_719_p2 <= std_logic_vector(unsigned(tmp_26_reg_884) + unsigned(tmp_i2_cast_fu_715_p1));
        tmp_28_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_reg_826),64));

    tmp_2_fu_371_p2 <= std_logic_vector(unsigned(tmp_s_fu_363_p3) - unsigned(tmp_cast_fu_359_p1));
        tmp_31_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_614_p2),64));

        tmp_34_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_reg_867),64));

        tmp_38_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_719_p2),64));

    tmp_3_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_222),5));
    tmp_3_fu_393_p2 <= std_logic_vector(unsigned(tmp_2_reg_752) + unsigned(tmp_3_cast_fu_389_p1));
    tmp_4_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_477_p2),5));
    tmp_4_fu_449_p3 <= (i1_reg_256 & ap_const_lv2_0);
    tmp_5_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_267),5));
    tmp_5_fu_461_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_457_p1) - unsigned(tmp_9_cast_fu_445_p1));
    tmp_7_fu_647_p2 <= "0" when (x_assign_reg_244 = ap_const_lv3_0) else "1";
    tmp_8_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_reg_244),5));
    tmp_8_fu_526_p3 <= (i3_reg_278 & ap_const_lv3_0);
    tmp_9_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_256),5));
    tmp_9_fu_534_p2 <= std_logic_vector(unsigned(tmp_8_fu_526_p3) - unsigned(tmp_cast_13_fu_522_p1));
    tmp_cast_13_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_278),5));
    tmp_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_211),5));
    tmp_i1_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_313),5));
    tmp_i2_cast_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_336),5));
    tmp_s_fu_363_p3 <= (i_reg_211 & ap_const_lv3_0);

    window_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_27_cast_fu_492_p1, tmp_28_cast_fu_506_p1, tmp_26_cast_fu_574_p1, tmp_38_cast_fu_724_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            window_address0 <= tmp_38_cast_fu_724_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_address0 <= tmp_26_cast_fu_574_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_address0 <= tmp_28_cast_fu_506_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_address0 <= tmp_27_cast_fu_492_p1(4 - 1 downto 0);
        else 
            window_address0 <= "XXXX";
        end if; 
    end process;


    window_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            window_ce0 <= ap_const_logic_1;
        else 
            window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_d0_assign_proc : process(tmp_28_reg_786, ap_CS_fsm_state9, window_q0, line_buf_q0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_d0 <= line_buf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_d0 <= tmp_28_reg_786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_d0 <= window_q0;
        else 
            window_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    window_we0_assign_proc : process(ap_CS_fsm_state9, exitcond4_fu_510_p2, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond4_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            window_we0 <= ap_const_logic_1;
        else 
            window_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_427_p2 <= std_logic_vector(unsigned(x_assign_reg_244) + unsigned(ap_const_lv3_1));
    y_fu_409_p2 <= std_logic_vector(unsigned(y_assign_reg_233) + unsigned(ap_const_lv3_1));
end behav;
