-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolve_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=269,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=27,HLS_SYN_FF=924,HLS_SYN_LUT=896,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_cond_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_741_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_269 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_assign_reg_280 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_291 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state8_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_325_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_641 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_343_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_646 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_355_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal window_0_0_load_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_0_load_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_load_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_390_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next_reg_714 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_assign_mid2_fu_423_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_mid2_reg_719 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_assign_mid2_fu_451_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_assign_mid2_reg_724 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_addr_1_reg_729 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buf_addr_2_reg_735 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_cond_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_2_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_0_i_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_0_i_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_0_1_i_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_0_1_i_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_0_2_i_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_0_2_i_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_i_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_i_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_1_load_1_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_1_i_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_1_i_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_2_i_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_2_i_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_543_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_808 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_2_i_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_i_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_1_i_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_1_i_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_2_i_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_2_i_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal line_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_we0 : STD_LOGIC;
    signal line_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buf_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC;
    signal i_reg_247 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond9_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_273_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_y_assign_phi_fu_284_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_x_assign_phi_fu_295_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_cast_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal window_2_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal window_0_0_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal window_2_0_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_1_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_335_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_331_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_361_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_mid1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_464_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_468_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_mid2_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_0_1_i_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_1_1_i_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component convolve_2d_line_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    line_buf_U : component convolve_2d_line_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        we0 => line_buf_we0,
        d0 => line_buf_d0,
        q0 => line_buf_q0,
        address1 => line_buf_address1,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_q1,
        q1 => line_buf_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond1_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_247 <= i_1_reg_641;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_247 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_269 <= ap_const_lv6_0;
            elsif (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_269 <= indvar_flatten_next_reg_714;
            end if; 
        end if;
    end process;

    j_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_258 <= ap_const_lv3_0;
            elsif (((exitcond9_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_258 <= j_1_fu_355_p2;
            end if; 
        end if;
    end process;

    x_assign_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_assign_reg_291 <= ap_const_lv3_0;
            elsif (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_assign_reg_291 <= x_reg_808;
            end if; 
        end if;
    end process;

    y_assign_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_assign_reg_280 <= ap_const_lv3_0;
            elsif (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_assign_reg_280 <= y_assign_mid2_reg_724;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_710 <= exitcond_flatten_fu_384_p2;
                or_cond_reg_741_pp0_iter1_reg <= or_cond_reg_741;
                window_0_0_load_reg_695 <= window_0_0_fu_100;
                window_1_0_load_reg_705 <= window_1_0_fu_112;
                window_2_0_load_reg_700 <= window_2_0_fu_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_641 <= i_1_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_714 <= indvar_flatten_next_fu_390_p2;
                window_0_0_fu_100 <= window_0_1_fu_104;
                window_1_0_fu_112 <= window_1_1_fu_116;
                window_2_0_fu_108 <= window_2_1_fu_96;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    line_buf_addr_1_reg_729(2 downto 0) <= tmp_8_fu_459_p1(4 - 1 downto 0)(2 downto 0);
                line_buf_addr_2_reg_735 <= tmp_10_cast_fu_474_p1(4 - 1 downto 0);
                or_cond_reg_741 <= or_cond_fu_485_p2;
                x_assign_mid2_reg_719 <= x_assign_mid2_fu_423_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_311 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_315 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp2_reg_783 <= tmp2_fu_516_p2;
                tmp_17_0_2_i_reg_773 <= tmp_17_0_2_i_fu_506_p2;
                tmp_17_1_i_reg_778 <= tmp_17_1_i_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp3_reg_803 <= tmp3_fu_539_p2;
                tmp_17_1_1_i_reg_793 <= tmp_17_1_1_i_fu_528_p2;
                tmp_17_1_2_i_reg_798 <= tmp_17_1_2_i_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp4_reg_828 <= tmp4_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (or_cond_reg_741 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_17_0_1_i_reg_768 <= tmp_17_0_1_i_fu_500_p2;
                tmp_17_0_i_reg_763 <= tmp_17_0_i_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_741 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_17_2_1_i_reg_818 <= tmp_17_2_1_i_fu_553_p2;
                tmp_17_2_i_reg_813 <= tmp_17_2_i_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_17_2_2_i_reg_823 <= tmp_17_2_2_i_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_9_reg_646 <= tmp_9_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_reg_745 <= in_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                window_0_1_fu_104 <= window_0_2_reg_751;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                window_0_2_reg_751 <= line_buf_q0;
                window_1_2_reg_757 <= line_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                window_1_1_fu_116 <= window_1_2_reg_757;
                window_2_1_fu_96 <= tmp_reg_745;
                window_2_1_load_1_reg_788 <= window_2_1_fu_96;
                x_reg_808 <= x_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_384_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                y_assign_mid2_reg_724 <= y_assign_mid2_fu_451_p3;
            end if;
        end if;
    end process;
    line_buf_addr_1_reg_729(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, exitcond1_fu_319_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_flatten_fu_384_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, exitcond9_fu_349_p2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond9_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_384_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten_fu_384_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_710)
    begin
                ap_block_pp0_stage1_11001 <= ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_710)
    begin
                ap_block_pp0_stage1_subdone <= ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_741_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_01001 <= ((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_741_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_11001 <= ((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_741_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_subdone <= ((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage3_iter1_assign_proc : process(out_stream_V_full_n, or_cond_reg_741_pp0_iter1_reg)
    begin
                ap_block_state12_pp0_stage3_iter1 <= ((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (out_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter0_assign_proc : process(in_stream_V_empty_n, exitcond_flatten_reg_710)
    begin
                ap_block_state5_pp0_stage1_iter0 <= ((exitcond_flatten_reg_710 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten_fu_384_p2)
    begin
        if ((exitcond_flatten_fu_384_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_273_p4_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_710, indvar_flatten_reg_269, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_714, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_273_p4 <= indvar_flatten_next_reg_714;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_273_p4 <= indvar_flatten_reg_269;
        end if; 
    end process;


    ap_phi_mux_x_assign_phi_fu_295_p4_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_710, x_assign_reg_291, ap_CS_fsm_pp0_stage0, x_reg_808, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_x_assign_phi_fu_295_p4 <= x_reg_808;
        else 
            ap_phi_mux_x_assign_phi_fu_295_p4 <= x_assign_reg_291;
        end if; 
    end process;


    ap_phi_mux_y_assign_phi_fu_284_p4_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_flatten_reg_710, y_assign_reg_280, ap_CS_fsm_pp0_stage0, y_assign_mid2_reg_724, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_y_assign_phi_fu_284_p4 <= y_assign_mid2_reg_724;
        else 
            ap_phi_mux_y_assign_phi_fu_284_p4 <= y_assign_reg_280;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_319_p2 <= "1" when (i_reg_247 = ap_const_lv2_2) else "0";
    exitcond9_fu_349_p2 <= "1" when (j_reg_258 = ap_const_lv3_7) else "0";
    exitcond_flatten_fu_384_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_273_p4 = ap_const_lv6_31) else "0";
    exitcond_fu_417_p2 <= "1" when (ap_phi_mux_x_assign_phi_fu_295_p4 = ap_const_lv3_7) else "0";
    i_1_fu_325_p2 <= std_logic_vector(unsigned(i_reg_247) + unsigned(ap_const_lv2_1));

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_710)
    begin
        if (((exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_710, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_390_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_273_p4) + unsigned(ap_const_lv6_1));
    j_1_fu_355_p2 <= std_logic_vector(unsigned(j_reg_258) + unsigned(ap_const_lv3_1));

    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                kernel_address0 <= "XXXX";
            end if;
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                kernel_address1 <= "XXXX";
            end if;
        else 
            kernel_address1 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state3, line_buf_addr_2_reg_735, ap_block_pp0_stage0, tmp_11_cast_fu_370_p1, tmp_8_fu_459_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buf_address0 <= line_buf_addr_2_reg_735;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_address0 <= tmp_8_fu_459_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            line_buf_address0 <= tmp_11_cast_fu_370_p1(4 - 1 downto 0);
        else 
            line_buf_address0 <= "XXXX";
        end if; 
    end process;


    line_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buf_addr_1_reg_729, ap_block_pp0_stage0, tmp_10_cast_fu_474_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buf_address1 <= line_buf_addr_1_reg_729;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_buf_address1 <= tmp_10_cast_fu_474_p1(4 - 1 downto 0);
            else 
                line_buf_address1 <= "XXXX";
            end if;
        else 
            line_buf_address1 <= "XXXX";
        end if; 
    end process;


    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_d0_assign_proc : process(in_stream_V_dout, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buf_d0 <= in_stream_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            line_buf_d0 <= ap_const_lv32_0;
        else 
            line_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buf_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_710, ap_block_pp0_stage1_11001, ap_CS_fsm_state3, exitcond9_fu_349_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((exitcond9_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            line_buf_we0 <= ap_const_logic_1;
        else 
            line_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_710, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (exitcond_flatten_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buf_we1 <= ap_const_logic_1;
        else 
            line_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_485_p2 <= (tmp_7_fu_479_p2 and tmp_1_mid2_fu_443_p3);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, or_cond_reg_741_pp0_iter1_reg)
    begin
        if (((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= std_logic_vector(unsigned(tmp4_reg_828) + unsigned(tmp1_fu_582_p2));

    out_stream_V_write_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, or_cond_reg_741_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((or_cond_reg_741_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_582_p2 <= std_logic_vector(unsigned(tmp3_reg_803) + unsigned(tmp2_reg_783));
    tmp2_fu_516_p2 <= std_logic_vector(unsigned(tmp_17_0_i_reg_763) + unsigned(tmp_17_0_1_i_reg_768));
    tmp3_fu_539_p2 <= std_logic_vector(unsigned(tmp_17_0_2_i_reg_773) + unsigned(tmp_17_1_i_reg_778));
    tmp4_fu_576_p2 <= std_logic_vector(unsigned(tmp6_fu_571_p2) + unsigned(tmp5_fu_563_p2));
    tmp5_fu_563_p2 <= std_logic_vector(unsigned(tmp_17_1_1_i_reg_793) + unsigned(tmp_17_1_2_i_reg_798));
    tmp6_fu_571_p2 <= std_logic_vector(unsigned(tmp7_fu_567_p2) + unsigned(tmp_17_2_i_reg_813));
    tmp7_fu_567_p2 <= std_logic_vector(unsigned(tmp_17_2_1_i_reg_818) + unsigned(tmp_17_2_2_i_reg_823));
    tmp_10_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_468_p2),64));
        tmp_11_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_365_p2),64));

    tmp_17_0_1_i_fu_500_p1 <= window_0_1_fu_104;
    tmp_17_0_1_i_fu_500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_315) * signed(tmp_17_0_1_i_fu_500_p1))), 32));
    tmp_17_0_2_i_fu_506_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_311) * signed(window_0_2_reg_751))), 32));
    tmp_17_0_i_fu_495_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_311) * signed(window_0_0_load_reg_695))), 32));
    tmp_17_1_1_i_fu_528_p1 <= window_1_1_fu_116;
    tmp_17_1_1_i_fu_528_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_311) * signed(tmp_17_1_1_i_fu_528_p1))), 32));
    tmp_17_1_2_i_fu_534_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_315) * signed(window_1_2_reg_757))), 32));
    tmp_17_1_i_fu_511_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_315) * signed(window_1_0_load_reg_705))), 32));
    tmp_17_2_1_i_fu_553_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_315) * signed(window_2_1_load_1_reg_788))), 32));
    tmp_17_2_2_i_fu_558_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_311) * signed(tmp_reg_745))), 32));
    tmp_17_2_i_fu_548_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_311) * signed(window_2_0_load_reg_700))), 32));
    tmp_1_fu_468_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_464_p1) + unsigned(ap_const_lv4_7));
    tmp_1_mid1_fu_431_p2 <= "0" when (y_fu_411_p2 = ap_const_lv3_0) else "1";
    tmp_1_mid2_fu_443_p3 <= 
        tmp_1_mid1_fu_431_p2 when (exitcond_fu_417_p2(0) = '1') else 
        tmp_s_fu_437_p2;
    tmp_2_fu_365_p2 <= std_logic_vector(unsigned(tmp_9_reg_646) + unsigned(tmp_3_cast_fu_361_p1));
    tmp_3_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_258),5));
    tmp_4_fu_335_p3 <= (i_reg_247 & ap_const_lv3_0);
    tmp_7_fu_479_p2 <= "0" when (x_assign_mid2_fu_423_p3 = ap_const_lv3_0) else "1";
    tmp_8_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_mid2_fu_423_p3),4));
    tmp_8_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_mid2_fu_423_p3),64));
    tmp_9_fu_343_p2 <= std_logic_vector(unsigned(tmp_4_fu_335_p3) - unsigned(tmp_cast_fu_331_p1));
    tmp_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_247),5));
    tmp_s_fu_437_p2 <= "0" when (ap_phi_mux_y_assign_phi_fu_284_p4 = ap_const_lv3_0) else "1";
    x_assign_mid2_fu_423_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_417_p2(0) = '1') else 
        ap_phi_mux_x_assign_phi_fu_295_p4;
    x_fu_543_p2 <= std_logic_vector(unsigned(x_assign_mid2_reg_719) + unsigned(ap_const_lv3_1));
    y_assign_mid2_fu_451_p3 <= 
        y_fu_411_p2 when (exitcond_fu_417_p2(0) = '1') else 
        ap_phi_mux_y_assign_phi_fu_284_p4;
    y_fu_411_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_assign_phi_fu_284_p4) + unsigned(ap_const_lv3_1));
end behav;
