// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve_2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=269,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=27,HLS_SYN_FF=924,HLS_SYN_LUT=896,HLS_VERSION=2018_3}" *)

module convolve_2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_pp0_stage1 = 9'd16;
parameter    ap_ST_fsm_pp0_stage2 = 9'd32;
parameter    ap_ST_fsm_pp0_stage3 = 9'd64;
parameter    ap_ST_fsm_pp0_stage4 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
input  [31:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] kernel_address1;
output   kernel_ce1;
input  [31:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_stream_V_write;
reg in_stream_V_read;
reg[3:0] kernel_address0;
reg kernel_ce0;
reg[3:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3;
reg   [0:0] or_cond_reg_741;
reg   [0:0] or_cond_reg_741_pp0_iter1_reg;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_710;
reg   [5:0] indvar_flatten_reg_269;
reg   [2:0] y_assign_reg_280;
reg   [2:0] x_assign_reg_291;
reg  signed [31:0] reg_311;
reg    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state7_pp0_stage3_iter0;
reg    ap_block_state12_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] reg_315;
wire   [0:0] exitcond1_fu_319_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] i_1_fu_325_p2;
reg   [1:0] i_1_reg_641;
wire   [4:0] tmp_9_fu_343_p2;
reg   [4:0] tmp_9_reg_646;
wire   [2:0] j_1_fu_355_p2;
wire    ap_CS_fsm_state3;
reg  signed [31:0] window_0_0_load_reg_695;
reg  signed [31:0] window_2_0_load_reg_700;
reg  signed [31:0] window_1_0_load_reg_705;
wire   [0:0] exitcond_flatten_fu_384_p2;
wire   [5:0] indvar_flatten_next_fu_390_p2;
reg   [5:0] indvar_flatten_next_reg_714;
wire   [2:0] x_assign_mid2_fu_423_p3;
reg   [2:0] x_assign_mid2_reg_719;
wire   [2:0] y_assign_mid2_fu_451_p3;
reg   [2:0] y_assign_mid2_reg_724;
reg   [3:0] line_buf_addr_1_reg_729;
reg   [3:0] line_buf_addr_2_reg_735;
wire   [0:0] or_cond_fu_485_p2;
reg  signed [31:0] tmp_reg_745;
wire   [31:0] line_buf_q0;
reg  signed [31:0] window_0_2_reg_751;
wire   [31:0] line_buf_q1;
reg  signed [31:0] window_1_2_reg_757;
wire   [31:0] tmp_17_0_i_fu_495_p2;
reg   [31:0] tmp_17_0_i_reg_763;
wire   [31:0] tmp_17_0_1_i_fu_500_p2;
reg   [31:0] tmp_17_0_1_i_reg_768;
wire   [31:0] tmp_17_0_2_i_fu_506_p2;
reg   [31:0] tmp_17_0_2_i_reg_773;
wire   [31:0] tmp_17_1_i_fu_511_p2;
reg   [31:0] tmp_17_1_i_reg_778;
wire   [31:0] tmp2_fu_516_p2;
reg   [31:0] tmp2_reg_783;
reg  signed [31:0] window_2_1_load_1_reg_788;
wire   [31:0] tmp_17_1_1_i_fu_528_p2;
reg   [31:0] tmp_17_1_1_i_reg_793;
wire   [31:0] tmp_17_1_2_i_fu_534_p2;
reg   [31:0] tmp_17_1_2_i_reg_798;
wire   [31:0] tmp3_fu_539_p2;
reg   [31:0] tmp3_reg_803;
wire   [2:0] x_fu_543_p2;
reg   [2:0] x_reg_808;
wire   [31:0] tmp_17_2_i_fu_548_p2;
reg   [31:0] tmp_17_2_i_reg_813;
wire   [31:0] tmp_17_2_1_i_fu_553_p2;
reg   [31:0] tmp_17_2_1_i_reg_818;
wire   [31:0] tmp_17_2_2_i_fu_558_p2;
reg   [31:0] tmp_17_2_2_i_reg_823;
wire   [31:0] tmp4_fu_576_p2;
reg   [31:0] tmp4_reg_828;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage3_subdone;
reg   [3:0] line_buf_address0;
reg    line_buf_ce0;
reg    line_buf_we0;
reg   [31:0] line_buf_d0;
reg   [3:0] line_buf_address1;
reg    line_buf_ce1;
reg    line_buf_we1;
reg   [1:0] i_reg_247;
wire   [0:0] exitcond9_fu_349_p2;
reg   [2:0] j_reg_258;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_273_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_y_assign_phi_fu_284_p4;
reg   [2:0] ap_phi_mux_x_assign_phi_fu_295_p4;
wire  signed [63:0] tmp_11_cast_fu_370_p1;
wire   [63:0] tmp_8_fu_459_p1;
wire   [63:0] tmp_10_cast_fu_474_p1;
reg    ap_block_pp0_stage3_01001;
reg   [31:0] window_2_1_fu_96;
wire    ap_block_pp0_stage4;
reg   [31:0] window_0_0_fu_100;
reg   [31:0] window_0_1_fu_104;
wire    ap_block_pp0_stage2;
reg   [31:0] window_2_0_fu_108;
reg   [31:0] window_1_0_fu_112;
reg   [31:0] window_1_1_fu_116;
wire   [4:0] tmp_6_fu_335_p3;
wire   [4:0] tmp_cast_fu_331_p1;
wire   [4:0] tmp_3_cast_fu_361_p1;
wire   [4:0] tmp_2_fu_365_p2;
wire   [0:0] exitcond_fu_417_p2;
wire   [2:0] y_fu_411_p2;
wire   [0:0] tmp_1_mid1_fu_431_p2;
wire   [0:0] tmp_s_fu_437_p2;
wire   [3:0] tmp_8_cast_fu_464_p1;
wire   [3:0] tmp_1_fu_468_p2;
wire   [0:0] tmp_1_mid2_fu_443_p3;
wire   [0:0] tmp_7_fu_479_p2;
wire  signed [31:0] tmp_17_0_1_i_fu_500_p1;
wire  signed [31:0] tmp_17_1_1_i_fu_528_p1;
wire   [31:0] tmp7_fu_567_p2;
wire   [31:0] tmp6_fu_571_p2;
wire   [31:0] tmp5_fu_563_p2;
wire   [31:0] tmp1_fu_582_p2;
wire    ap_CS_fsm_state13;
reg   [8:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

convolve_2d_line_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_address0),
    .ce0(line_buf_ce0),
    .we0(line_buf_we0),
    .d0(line_buf_d0),
    .q0(line_buf_q0),
    .address1(line_buf_address1),
    .ce1(line_buf_ce1),
    .we1(line_buf_we1),
    .d1(line_buf_q1),
    .q1(line_buf_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond1_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_247 <= i_1_reg_641;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_247 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_269 <= 6'd0;
    end else if (((exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_269 <= indvar_flatten_next_reg_714;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_258 <= 3'd0;
    end else if (((exitcond9_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_258 <= j_1_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_assign_reg_291 <= 3'd0;
    end else if (((exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_assign_reg_291 <= x_reg_808;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_assign_reg_280 <= 3'd0;
    end else if (((exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_assign_reg_280 <= y_assign_mid2_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_710 <= exitcond_flatten_fu_384_p2;
        or_cond_reg_741_pp0_iter1_reg <= or_cond_reg_741;
        window_0_0_load_reg_695 <= window_0_0_fu_100;
        window_1_0_load_reg_705 <= window_1_0_fu_112;
        window_2_0_load_reg_700 <= window_2_0_fu_108;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_641 <= i_1_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_714 <= indvar_flatten_next_fu_390_p2;
        window_0_0_fu_100 <= window_0_1_fu_104;
        window_1_0_fu_112 <= window_1_1_fu_116;
        window_2_0_fu_108 <= window_2_1_fu_96;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_addr_1_reg_729[2 : 0] <= tmp_8_fu_459_p1[2 : 0];
        line_buf_addr_2_reg_735 <= tmp_10_cast_fu_474_p1;
        or_cond_reg_741 <= or_cond_fu_485_p2;
        x_assign_mid2_reg_719 <= x_assign_mid2_fu_423_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_311 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_315 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp2_reg_783 <= tmp2_fu_516_p2;
        tmp_17_0_2_i_reg_773 <= tmp_17_0_2_i_fu_506_p2;
        tmp_17_1_i_reg_778 <= tmp_17_1_i_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp3_reg_803 <= tmp3_fu_539_p2;
        tmp_17_1_1_i_reg_793 <= tmp_17_1_1_i_fu_528_p2;
        tmp_17_1_2_i_reg_798 <= tmp_17_1_2_i_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp4_reg_828 <= tmp4_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (or_cond_reg_741 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_17_0_1_i_reg_768 <= tmp_17_0_1_i_fu_500_p2;
        tmp_17_0_i_reg_763 <= tmp_17_0_i_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_741 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_17_2_1_i_reg_818 <= tmp_17_2_1_i_fu_553_p2;
        tmp_17_2_i_reg_813 <= tmp_17_2_i_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (or_cond_reg_741_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_17_2_2_i_reg_823 <= tmp_17_2_2_i_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_9_reg_646 <= tmp_9_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_reg_745 <= in_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        window_0_1_fu_104 <= window_0_2_reg_751;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        window_0_2_reg_751 <= line_buf_q0;
        window_1_2_reg_757 <= line_buf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        window_1_1_fu_116 <= window_1_2_reg_757;
        window_2_1_fu_96 <= tmp_reg_745;
        window_2_1_load_1_reg_788 <= window_2_1_fu_96;
        x_reg_808 <= x_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_384_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_assign_mid2_reg_724 <= y_assign_mid2_fu_451_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_384_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_273_p4 = indvar_flatten_next_reg_714;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_273_p4 = indvar_flatten_reg_269;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_x_assign_phi_fu_295_p4 = x_reg_808;
    end else begin
        ap_phi_mux_x_assign_phi_fu_295_p4 = x_assign_reg_291;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_y_assign_phi_fu_284_p4 = y_assign_mid2_reg_724;
    end else begin
        ap_phi_mux_y_assign_phi_fu_284_p4 = y_assign_reg_280;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_710 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = 64'd0;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address1 = 64'd1;
        end else begin
            kernel_address1 = 'bx;
        end
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buf_address0 = line_buf_addr_2_reg_735;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_address0 = tmp_8_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        line_buf_address0 = tmp_11_cast_fu_370_p1;
    end else begin
        line_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buf_address1 = line_buf_addr_1_reg_729;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            line_buf_address1 = tmp_10_cast_fu_474_p1;
        end else begin
            line_buf_address1 = 'bx;
        end
    end else begin
        line_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buf_ce0 = 1'b1;
    end else begin
        line_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buf_ce1 = 1'b1;
    end else begin
        line_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buf_d0 = in_stream_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        line_buf_d0 = 32'd0;
    end else begin
        line_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((exitcond9_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        line_buf_we0 = 1'b1;
    end else begin
        line_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_710 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buf_we1 = 1'b1;
    end else begin
        line_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond9_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_384_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten_fu_384_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((exitcond_flatten_reg_710 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((exitcond_flatten_reg_710 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage3_iter1 = ((or_cond_reg_741_pp0_iter1_reg == 1'd1) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter0 = ((exitcond_flatten_reg_710 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_319_p2 = ((i_reg_247 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond9_fu_349_p2 = ((j_reg_258 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_384_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_273_p4 == 6'd49) ? 1'b1 : 1'b0);

assign exitcond_fu_417_p2 = ((ap_phi_mux_x_assign_phi_fu_295_p4 == 3'd7) ? 1'b1 : 1'b0);

assign i_1_fu_325_p2 = (i_reg_247 + 2'd1);

assign indvar_flatten_next_fu_390_p2 = (ap_phi_mux_indvar_flatten_phi_fu_273_p4 + 6'd1);

assign j_1_fu_355_p2 = (j_reg_258 + 3'd1);

assign or_cond_fu_485_p2 = (tmp_7_fu_479_p2 & tmp_1_mid2_fu_443_p3);

assign out_stream_V_din = (tmp4_reg_828 + tmp1_fu_582_p2);

assign tmp1_fu_582_p2 = (tmp3_reg_803 + tmp2_reg_783);

assign tmp2_fu_516_p2 = (tmp_17_0_i_reg_763 + tmp_17_0_1_i_reg_768);

assign tmp3_fu_539_p2 = (tmp_17_0_2_i_reg_773 + tmp_17_1_i_reg_778);

assign tmp4_fu_576_p2 = (tmp6_fu_571_p2 + tmp5_fu_563_p2);

assign tmp5_fu_563_p2 = (tmp_17_1_1_i_reg_793 + tmp_17_1_2_i_reg_798);

assign tmp6_fu_571_p2 = (tmp7_fu_567_p2 + tmp_17_2_i_reg_813);

assign tmp7_fu_567_p2 = (tmp_17_2_1_i_reg_818 + tmp_17_2_2_i_reg_823);

assign tmp_10_cast_fu_474_p1 = tmp_1_fu_468_p2;

assign tmp_11_cast_fu_370_p1 = $signed(tmp_2_fu_365_p2);

assign tmp_17_0_1_i_fu_500_p1 = window_0_1_fu_104;

assign tmp_17_0_1_i_fu_500_p2 = ($signed(reg_315) * $signed(tmp_17_0_1_i_fu_500_p1));

assign tmp_17_0_2_i_fu_506_p2 = ($signed(reg_311) * $signed(window_0_2_reg_751));

assign tmp_17_0_i_fu_495_p2 = ($signed(reg_311) * $signed(window_0_0_load_reg_695));

assign tmp_17_1_1_i_fu_528_p1 = window_1_1_fu_116;

assign tmp_17_1_1_i_fu_528_p2 = ($signed(reg_311) * $signed(tmp_17_1_1_i_fu_528_p1));

assign tmp_17_1_2_i_fu_534_p2 = ($signed(reg_315) * $signed(window_1_2_reg_757));

assign tmp_17_1_i_fu_511_p2 = ($signed(reg_315) * $signed(window_1_0_load_reg_705));

assign tmp_17_2_1_i_fu_553_p2 = ($signed(reg_315) * $signed(window_2_1_load_1_reg_788));

assign tmp_17_2_2_i_fu_558_p2 = ($signed(reg_311) * $signed(tmp_reg_745));

assign tmp_17_2_i_fu_548_p2 = ($signed(reg_311) * $signed(window_2_0_load_reg_700));

assign tmp_1_fu_468_p2 = (tmp_8_cast_fu_464_p1 + 4'd7);

assign tmp_1_mid1_fu_431_p2 = ((y_fu_411_p2 != 3'd0) ? 1'b1 : 1'b0);

assign tmp_1_mid2_fu_443_p3 = ((exitcond_fu_417_p2[0:0] === 1'b1) ? tmp_1_mid1_fu_431_p2 : tmp_s_fu_437_p2);

assign tmp_2_fu_365_p2 = (tmp_9_reg_646 + tmp_3_cast_fu_361_p1);

assign tmp_3_cast_fu_361_p1 = j_reg_258;

assign tmp_6_fu_335_p3 = {{i_reg_247}, {3'd0}};

assign tmp_7_fu_479_p2 = ((x_assign_mid2_fu_423_p3 != 3'd0) ? 1'b1 : 1'b0);

assign tmp_8_cast_fu_464_p1 = x_assign_mid2_fu_423_p3;

assign tmp_8_fu_459_p1 = x_assign_mid2_fu_423_p3;

assign tmp_9_fu_343_p2 = (tmp_6_fu_335_p3 - tmp_cast_fu_331_p1);

assign tmp_cast_fu_331_p1 = i_reg_247;

assign tmp_s_fu_437_p2 = ((ap_phi_mux_y_assign_phi_fu_284_p4 != 3'd0) ? 1'b1 : 1'b0);

assign x_assign_mid2_fu_423_p3 = ((exitcond_fu_417_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_x_assign_phi_fu_295_p4);

assign x_fu_543_p2 = (x_assign_mid2_reg_719 + 3'd1);

assign y_assign_mid2_fu_451_p3 = ((exitcond_fu_417_p2[0:0] === 1'b1) ? y_fu_411_p2 : ap_phi_mux_y_assign_phi_fu_284_p4);

assign y_fu_411_p2 = (ap_phi_mux_y_assign_phi_fu_284_p4 + 3'd1);

always @ (posedge ap_clk) begin
    line_buf_addr_1_reg_729[3] <= 1'b0;
end

endmodule //convolve_2d
