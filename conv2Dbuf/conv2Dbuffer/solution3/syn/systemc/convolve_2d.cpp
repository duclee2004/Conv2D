// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolve_2d.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolve_2d::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolve_2d::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> convolve_2d::ap_ST_fsm_state1 = "1";
const sc_lv<5> convolve_2d::ap_ST_fsm_state2 = "10";
const sc_lv<5> convolve_2d::ap_ST_fsm_state3 = "100";
const sc_lv<5> convolve_2d::ap_ST_fsm_pp1_stage0 = "1000";
const sc_lv<5> convolve_2d::ap_ST_fsm_state11 = "10000";
const sc_lv<32> convolve_2d::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool convolve_2d::ap_const_boolean_1 = true;
const sc_lv<1> convolve_2d::ap_const_lv1_0 = "0";
const sc_lv<1> convolve_2d::ap_const_lv1_1 = "1";
const sc_lv<2> convolve_2d::ap_const_lv2_0 = "00";
const sc_lv<2> convolve_2d::ap_const_lv2_2 = "10";
const sc_lv<2> convolve_2d::ap_const_lv2_3 = "11";
const sc_lv<2> convolve_2d::ap_const_lv2_1 = "1";
const bool convolve_2d::ap_const_boolean_0 = false;
const sc_lv<32> convolve_2d::ap_const_lv32_3 = "11";
const sc_lv<32> convolve_2d::ap_const_lv32_1 = "1";
const sc_lv<32> convolve_2d::ap_const_lv32_2 = "10";
const sc_lv<4> convolve_2d::ap_const_lv4_0 = "0000";
const sc_lv<3> convolve_2d::ap_const_lv3_0 = "000";
const sc_lv<6> convolve_2d::ap_const_lv6_0 = "000000";
const sc_lv<4> convolve_2d::ap_const_lv4_E = "1110";
const sc_lv<4> convolve_2d::ap_const_lv4_1 = "1";
const sc_lv<3> convolve_2d::ap_const_lv3_7 = "111";
const sc_lv<3> convolve_2d::ap_const_lv3_1 = "1";
const sc_lv<6> convolve_2d::ap_const_lv6_31 = "110001";
const sc_lv<6> convolve_2d::ap_const_lv6_1 = "1";
const sc_lv<32> convolve_2d::ap_const_lv32_4 = "100";

convolve_2d::convolve_2d(sc_module_name name) : sc_module(name), mVcdFile(0) {
    line_buf_0_U = new convolve_2d_line_bkb("line_buf_0_U");
    line_buf_0_U->clk(ap_clk);
    line_buf_0_U->reset(ap_rst_n_inv);
    line_buf_0_U->address0(line_buf_0_address0);
    line_buf_0_U->ce0(line_buf_0_ce0);
    line_buf_0_U->we0(line_buf_0_we0);
    line_buf_0_U->d0(ap_var_for_const0);
    line_buf_0_U->q0(line_buf_0_q0);
    line_buf_0_U->address1(line_buf_0_addr_1_reg_561);
    line_buf_0_U->ce1(line_buf_0_ce1);
    line_buf_0_U->we1(line_buf_0_we1);
    line_buf_0_U->d1(line_buf_1_q0);
    line_buf_1_U = new convolve_2d_line_bkb("line_buf_1_U");
    line_buf_1_U->clk(ap_clk);
    line_buf_1_U->reset(ap_rst_n_inv);
    line_buf_1_U->address0(line_buf_1_address0);
    line_buf_1_U->ce0(line_buf_1_ce0);
    line_buf_1_U->we0(line_buf_1_we0);
    line_buf_1_U->d0(ap_var_for_const0);
    line_buf_1_U->q0(line_buf_1_q0);
    line_buf_1_U->address1(line_buf_1_addr_1_reg_567);
    line_buf_1_U->ce1(line_buf_1_ce1);
    line_buf_1_U->we1(line_buf_1_we1);
    line_buf_1_U->d1(tmp_6_reg_554);
    grp_convolve_fu_252 = new convolve("grp_convolve_fu_252");
    grp_convolve_fu_252->ap_clk(ap_clk);
    grp_convolve_fu_252->ap_rst(ap_rst_n_inv);
    grp_convolve_fu_252->window_0_0_read(window_0_0_load_reg_582);
    grp_convolve_fu_252->window_0_1_read(window_0_1_load_1_reg_602);
    grp_convolve_fu_252->window_0_2_read(window_0_2_reg_612);
    grp_convolve_fu_252->window_1_0_read(window_1_0_load_reg_592);
    grp_convolve_fu_252->window_1_1_read(window_1_1_load_1_reg_607);
    grp_convolve_fu_252->window_1_2_read(window_1_2_reg_617);
    grp_convolve_fu_252->window_2_0_read(window_2_0_load_reg_587);
    grp_convolve_fu_252->window_2_1_read(window_2_1_load_1_reg_597);
    grp_convolve_fu_252->window_2_2_read(tmp_6_reg_554_pp1_iter1_reg);
    grp_convolve_fu_252->kernel_0_0(kernel_0_0);
    grp_convolve_fu_252->kernel_0_1(kernel_0_1);
    grp_convolve_fu_252->kernel_0_2(kernel_0_2);
    grp_convolve_fu_252->kernel_1_0(kernel_1_0);
    grp_convolve_fu_252->kernel_1_1(kernel_1_1);
    grp_convolve_fu_252->kernel_1_2(kernel_1_2);
    grp_convolve_fu_252->kernel_2_0(kernel_2_0);
    grp_convolve_fu_252->kernel_2_1(kernel_2_1);
    grp_convolve_fu_252->kernel_2_2(kernel_2_2);
    grp_convolve_fu_252->ap_return(grp_convolve_fu_252_ap_return);
    grp_convolve_fu_252->ap_ce(grp_convolve_fu_252_ap_ce);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( in_stream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( in_stream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( ap_enable_reg_pp1_iter6 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( ap_block_state9_io );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_ap_block_pp1_stage0_11001_ignoreCallOp105);
    sensitive << ( in_stream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( ap_enable_reg_pp1_iter6 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( ap_block_state9_io );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( in_stream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( ap_enable_reg_pp1_iter6 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( ap_block_state9_io );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_ap_block_state10_io);
    sensitive << ( out_stream_V_1_ack_in );
    sensitive << ( or_cond_reg_573_pp1_iter5_reg );

    SC_METHOD(thread_ap_block_state10_pp1_stage0_iter6);

    SC_METHOD(thread_ap_block_state10_pp1_stage0_iter6_ignore_call0);

    SC_METHOD(thread_ap_block_state4_pp1_stage0_iter0);
    sensitive << ( in_stream_V_0_vld_out );
    sensitive << ( exitcond_flatten8_fu_340_p2 );

    SC_METHOD(thread_ap_block_state4_pp1_stage0_iter0_ignore_call0);
    sensitive << ( in_stream_V_0_vld_out );
    sensitive << ( exitcond_flatten8_fu_340_p2 );

    SC_METHOD(thread_ap_block_state5_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state5_pp1_stage0_iter1_ignore_call0);

    SC_METHOD(thread_ap_block_state6_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state6_pp1_stage0_iter2_ignore_call0);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter3);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter3_ignore_call0);

    SC_METHOD(thread_ap_block_state8_pp1_stage0_iter4);

    SC_METHOD(thread_ap_block_state8_pp1_stage0_iter4_ignore_call0);

    SC_METHOD(thread_ap_block_state9_io);
    sensitive << ( out_stream_V_1_ack_in );
    sensitive << ( or_cond_reg_573_pp1_iter4_reg );

    SC_METHOD(thread_ap_block_state9_pp1_stage0_iter5);

    SC_METHOD(thread_ap_block_state9_pp1_stage0_iter5_ignore_call0);

    SC_METHOD(thread_ap_condition_pp1_exit_iter1_state5);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( out_stream_V_1_ack_in );
    sensitive << ( out_stream_V_1_state );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( ap_enable_reg_pp1_iter6 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter4 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_V_1_ack_in );
    sensitive << ( out_stream_V_1_state );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond1_fu_352_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( x_assign_reg_241 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_exitcond_flatten8_fu_340_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( indvar_flatten6_reg_219 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_exitcond_flatten_fu_284_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( indvar_flatten_reg_186 );

    SC_METHOD(thread_exitcond_fu_296_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_flatten_fu_284_p2 );
    sensitive << ( j_reg_208 );

    SC_METHOD(thread_grp_convolve_fu_252_ap_ce);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001_ignoreCallOp105 );

    SC_METHOD(thread_i_s_fu_310_p2);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_i_t_mid2_v_fu_316_p3);
    sensitive << ( i_reg_197 );
    sensitive << ( exitcond_fu_296_p2 );
    sensitive << ( i_s_fu_310_p2 );

    SC_METHOD(thread_in_stream_V_0_ack_in);
    sensitive << ( in_stream_V_0_state );

    SC_METHOD(thread_in_stream_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream_V_0_data_out);
    sensitive << ( in_stream_V_0_payload_A );
    sensitive << ( in_stream_V_0_payload_B );
    sensitive << ( in_stream_V_0_sel );

    SC_METHOD(thread_in_stream_V_0_load_A);
    sensitive << ( in_stream_V_0_sel_wr );
    sensitive << ( in_stream_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_V_0_load_B);
    sensitive << ( in_stream_V_0_sel_wr );
    sensitive << ( in_stream_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_V_0_sel);
    sensitive << ( in_stream_V_0_sel_rd );

    SC_METHOD(thread_in_stream_V_0_state_cmp_full);
    sensitive << ( in_stream_V_0_state );

    SC_METHOD(thread_in_stream_V_0_vld_in);
    sensitive << ( in_stream_V_TVALID );

    SC_METHOD(thread_in_stream_V_0_vld_out);
    sensitive << ( in_stream_V_0_state );

    SC_METHOD(thread_in_stream_V_TDATA_blk_n);
    sensitive << ( in_stream_V_0_state );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );

    SC_METHOD(thread_in_stream_V_TREADY);
    sensitive << ( in_stream_V_0_state );

    SC_METHOD(thread_indvar_flatten_next7_fu_346_p2);
    sensitive << ( indvar_flatten6_reg_219 );

    SC_METHOD(thread_indvar_flatten_next_fu_290_p2);
    sensitive << ( indvar_flatten_reg_186 );

    SC_METHOD(thread_j_1_fu_334_p2);
    sensitive << ( j_mid2_fu_302_p3 );

    SC_METHOD(thread_j_mid2_fu_302_p3);
    sensitive << ( j_reg_208 );
    sensitive << ( exitcond_fu_296_p2 );

    SC_METHOD(thread_line_buf_0_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_328_p1 );
    sensitive << ( tmp_8_fu_400_p1 );

    SC_METHOD(thread_line_buf_0_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_line_buf_0_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_line_buf_0_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_flatten_fu_284_p2 );
    sensitive << ( tmp_fu_324_p1 );

    SC_METHOD(thread_line_buf_0_we1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( exitcond_flatten8_reg_540 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_line_buf_1_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_328_p1 );
    sensitive << ( tmp_8_fu_400_p1 );

    SC_METHOD(thread_line_buf_1_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_line_buf_1_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_line_buf_1_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_flatten_fu_284_p2 );
    sensitive << ( tmp_fu_324_p1 );

    SC_METHOD(thread_line_buf_1_we1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( exitcond_flatten8_reg_540 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_or_cond_fu_412_p2);
    sensitive << ( tmp_1_mid2_fu_384_p3 );
    sensitive << ( tmp_7_fu_406_p2 );

    SC_METHOD(thread_out_stream_V_1_ack_in);
    sensitive << ( out_stream_V_1_state );

    SC_METHOD(thread_out_stream_V_1_ack_out);
    sensitive << ( out_stream_V_TREADY );

    SC_METHOD(thread_out_stream_V_1_data_out);
    sensitive << ( out_stream_V_1_payload_A );
    sensitive << ( out_stream_V_1_payload_B );
    sensitive << ( out_stream_V_1_sel );

    SC_METHOD(thread_out_stream_V_1_load_A);
    sensitive << ( out_stream_V_1_sel_wr );
    sensitive << ( out_stream_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_1_load_B);
    sensitive << ( out_stream_V_1_sel_wr );
    sensitive << ( out_stream_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_1_sel);
    sensitive << ( out_stream_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_1_state_cmp_full);
    sensitive << ( out_stream_V_1_state );

    SC_METHOD(thread_out_stream_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( or_cond_reg_573_pp1_iter4_reg );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_1_vld_out);
    sensitive << ( out_stream_V_1_state );

    SC_METHOD(thread_out_stream_V_TDATA);
    sensitive << ( out_stream_V_1_data_out );

    SC_METHOD(thread_out_stream_V_TDATA_blk_n);
    sensitive << ( out_stream_V_1_state );
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( or_cond_reg_573_pp1_iter4_reg );
    sensitive << ( ap_enable_reg_pp1_iter6 );
    sensitive << ( or_cond_reg_573_pp1_iter5_reg );

    SC_METHOD(thread_out_stream_V_TVALID);
    sensitive << ( out_stream_V_1_state );

    SC_METHOD(thread_tmp_1_mid1_fu_372_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( y_fu_366_p2 );

    SC_METHOD(thread_tmp_1_mid2_fu_384_p3);
    sensitive << ( exitcond1_fu_352_p2 );
    sensitive << ( tmp_1_mid1_fu_372_p2 );
    sensitive << ( tmp_s_fu_378_p2 );

    SC_METHOD(thread_tmp_3_fu_328_p1);
    sensitive << ( j_mid2_fu_302_p3 );

    SC_METHOD(thread_tmp_7_fu_406_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( x_assign_mid2_fu_358_p3 );

    SC_METHOD(thread_tmp_8_fu_400_p1);
    sensitive << ( x_assign_mid2_fu_358_p3 );

    SC_METHOD(thread_tmp_fu_324_p1);
    sensitive << ( i_t_mid2_v_fu_316_p3 );

    SC_METHOD(thread_tmp_s_fu_378_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond_flatten8_fu_340_p2 );
    sensitive << ( y_assign_reg_230 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_x_assign_mid2_fu_358_p3);
    sensitive << ( x_assign_reg_241 );
    sensitive << ( exitcond1_fu_352_p2 );

    SC_METHOD(thread_x_fu_418_p2);
    sensitive << ( x_assign_mid2_fu_358_p3 );

    SC_METHOD(thread_y_assign_mid2_fu_392_p3);
    sensitive << ( y_assign_reg_230 );
    sensitive << ( exitcond1_fu_352_p2 );
    sensitive << ( y_fu_366_p2 );

    SC_METHOD(thread_y_fu_366_p2);
    sensitive << ( y_assign_reg_230 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_V_1_ack_in );
    sensitive << ( out_stream_V_1_state );
    sensitive << ( ap_enable_reg_pp1_iter5 );
    sensitive << ( ap_enable_reg_pp1_iter6 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_flatten_fu_284_p2 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    out_stream_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_1_state = "00";
    in_stream_V_0_sel_rd = SC_LOGIC_0;
    in_stream_V_0_sel_wr = SC_LOGIC_0;
    in_stream_V_0_state = "00";
    ap_enable_reg_pp1_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter4 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolve_2d_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_stream_V_TDATA, "(port)out_stream_V_TDATA");
    sc_trace(mVcdFile, out_stream_V_TVALID, "(port)out_stream_V_TVALID");
    sc_trace(mVcdFile, out_stream_V_TREADY, "(port)out_stream_V_TREADY");
    sc_trace(mVcdFile, in_stream_V_TDATA, "(port)in_stream_V_TDATA");
    sc_trace(mVcdFile, in_stream_V_TVALID, "(port)in_stream_V_TVALID");
    sc_trace(mVcdFile, in_stream_V_TREADY, "(port)in_stream_V_TREADY");
    sc_trace(mVcdFile, kernel_0_0, "(port)kernel_0_0");
    sc_trace(mVcdFile, kernel_0_1, "(port)kernel_0_1");
    sc_trace(mVcdFile, kernel_0_2, "(port)kernel_0_2");
    sc_trace(mVcdFile, kernel_1_0, "(port)kernel_1_0");
    sc_trace(mVcdFile, kernel_1_1, "(port)kernel_1_1");
    sc_trace(mVcdFile, kernel_1_2, "(port)kernel_1_2");
    sc_trace(mVcdFile, kernel_2_0, "(port)kernel_2_0");
    sc_trace(mVcdFile, kernel_2_1, "(port)kernel_2_1");
    sc_trace(mVcdFile, kernel_2_2, "(port)kernel_2_2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_V_1_data_out, "out_stream_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_1_vld_in, "out_stream_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_1_vld_out, "out_stream_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_1_ack_in, "out_stream_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_1_ack_out, "out_stream_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_1_payload_A, "out_stream_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_1_payload_B, "out_stream_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_1_sel_rd, "out_stream_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_1_sel_wr, "out_stream_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_1_sel, "out_stream_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_1_load_A, "out_stream_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_1_load_B, "out_stream_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_1_state, "out_stream_V_1_state");
    sc_trace(mVcdFile, out_stream_V_1_state_cmp_full, "out_stream_V_1_state_cmp_full");
    sc_trace(mVcdFile, in_stream_V_0_data_out, "in_stream_V_0_data_out");
    sc_trace(mVcdFile, in_stream_V_0_vld_in, "in_stream_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_V_0_vld_out, "in_stream_V_0_vld_out");
    sc_trace(mVcdFile, in_stream_V_0_ack_in, "in_stream_V_0_ack_in");
    sc_trace(mVcdFile, in_stream_V_0_ack_out, "in_stream_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_V_0_payload_A, "in_stream_V_0_payload_A");
    sc_trace(mVcdFile, in_stream_V_0_payload_B, "in_stream_V_0_payload_B");
    sc_trace(mVcdFile, in_stream_V_0_sel_rd, "in_stream_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream_V_0_sel_wr, "in_stream_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream_V_0_sel, "in_stream_V_0_sel");
    sc_trace(mVcdFile, in_stream_V_0_load_A, "in_stream_V_0_load_A");
    sc_trace(mVcdFile, in_stream_V_0_load_B, "in_stream_V_0_load_B");
    sc_trace(mVcdFile, in_stream_V_0_state, "in_stream_V_0_state");
    sc_trace(mVcdFile, in_stream_V_0_state_cmp_full, "in_stream_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_TDATA_blk_n, "out_stream_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter5, "ap_enable_reg_pp1_iter5");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, or_cond_reg_573, "or_cond_reg_573");
    sc_trace(mVcdFile, or_cond_reg_573_pp1_iter4_reg, "or_cond_reg_573_pp1_iter4_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter6, "ap_enable_reg_pp1_iter6");
    sc_trace(mVcdFile, or_cond_reg_573_pp1_iter5_reg, "or_cond_reg_573_pp1_iter5_reg");
    sc_trace(mVcdFile, in_stream_V_TDATA_blk_n, "in_stream_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, exitcond_flatten8_fu_340_p2, "exitcond_flatten8_fu_340_p2");
    sc_trace(mVcdFile, indvar_flatten6_reg_219, "indvar_flatten6_reg_219");
    sc_trace(mVcdFile, y_assign_reg_230, "y_assign_reg_230");
    sc_trace(mVcdFile, x_assign_reg_241, "x_assign_reg_241");
    sc_trace(mVcdFile, indvar_flatten_next_fu_290_p2, "indvar_flatten_next_fu_290_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_t_mid2_v_fu_316_p3, "i_t_mid2_v_fu_316_p3");
    sc_trace(mVcdFile, exitcond_flatten_fu_284_p2, "exitcond_flatten_fu_284_p2");
    sc_trace(mVcdFile, j_1_fu_334_p2, "j_1_fu_334_p2");
    sc_trace(mVcdFile, exitcond_flatten8_reg_540, "exitcond_flatten8_reg_540");
    sc_trace(mVcdFile, ap_block_state4_pp1_stage0_iter0, "ap_block_state4_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp1_stage0_iter1, "ap_block_state5_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_pp1_stage0_iter2, "ap_block_state6_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter3, "ap_block_state7_pp1_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage0_iter4, "ap_block_state8_pp1_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state9_pp1_stage0_iter5, "ap_block_state9_pp1_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state9_io, "ap_block_state9_io");
    sc_trace(mVcdFile, ap_block_state10_pp1_stage0_iter6, "ap_block_state10_pp1_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state10_io, "ap_block_state10_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next7_fu_346_p2, "indvar_flatten_next7_fu_346_p2");
    sc_trace(mVcdFile, y_assign_mid2_fu_392_p3, "y_assign_mid2_fu_392_p3");
    sc_trace(mVcdFile, tmp_6_reg_554, "tmp_6_reg_554");
    sc_trace(mVcdFile, tmp_6_reg_554_pp1_iter1_reg, "tmp_6_reg_554_pp1_iter1_reg");
    sc_trace(mVcdFile, line_buf_0_addr_1_reg_561, "line_buf_0_addr_1_reg_561");
    sc_trace(mVcdFile, line_buf_1_addr_1_reg_567, "line_buf_1_addr_1_reg_567");
    sc_trace(mVcdFile, or_cond_fu_412_p2, "or_cond_fu_412_p2");
    sc_trace(mVcdFile, or_cond_reg_573_pp1_iter1_reg, "or_cond_reg_573_pp1_iter1_reg");
    sc_trace(mVcdFile, or_cond_reg_573_pp1_iter2_reg, "or_cond_reg_573_pp1_iter2_reg");
    sc_trace(mVcdFile, or_cond_reg_573_pp1_iter3_reg, "or_cond_reg_573_pp1_iter3_reg");
    sc_trace(mVcdFile, x_fu_418_p2, "x_fu_418_p2");
    sc_trace(mVcdFile, window_0_0_load_reg_582, "window_0_0_load_reg_582");
    sc_trace(mVcdFile, window_2_0_load_reg_587, "window_2_0_load_reg_587");
    sc_trace(mVcdFile, window_1_0_load_reg_592, "window_1_0_load_reg_592");
    sc_trace(mVcdFile, window_2_1_load_1_reg_597, "window_2_1_load_1_reg_597");
    sc_trace(mVcdFile, window_0_1_load_1_reg_602, "window_0_1_load_1_reg_602");
    sc_trace(mVcdFile, window_1_1_load_1_reg_607, "window_1_1_load_1_reg_607");
    sc_trace(mVcdFile, line_buf_0_q0, "line_buf_0_q0");
    sc_trace(mVcdFile, window_0_2_reg_612, "window_0_2_reg_612");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, line_buf_1_q0, "line_buf_1_q0");
    sc_trace(mVcdFile, window_1_2_reg_617, "window_1_2_reg_617");
    sc_trace(mVcdFile, grp_convolve_fu_252_ap_return, "grp_convolve_fu_252_ap_return");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter1_state5, "ap_condition_pp1_exit_iter1_state5");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter3, "ap_enable_reg_pp1_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter4, "ap_enable_reg_pp1_iter4");
    sc_trace(mVcdFile, line_buf_0_address0, "line_buf_0_address0");
    sc_trace(mVcdFile, line_buf_0_ce0, "line_buf_0_ce0");
    sc_trace(mVcdFile, line_buf_0_we0, "line_buf_0_we0");
    sc_trace(mVcdFile, line_buf_0_ce1, "line_buf_0_ce1");
    sc_trace(mVcdFile, line_buf_0_we1, "line_buf_0_we1");
    sc_trace(mVcdFile, line_buf_1_address0, "line_buf_1_address0");
    sc_trace(mVcdFile, line_buf_1_ce0, "line_buf_1_ce0");
    sc_trace(mVcdFile, line_buf_1_we0, "line_buf_1_we0");
    sc_trace(mVcdFile, line_buf_1_ce1, "line_buf_1_ce1");
    sc_trace(mVcdFile, line_buf_1_we1, "line_buf_1_we1");
    sc_trace(mVcdFile, grp_convolve_fu_252_ap_ce, "grp_convolve_fu_252_ap_ce");
    sc_trace(mVcdFile, ap_block_state4_pp1_stage0_iter0_ignore_call0, "ap_block_state4_pp1_stage0_iter0_ignore_call0");
    sc_trace(mVcdFile, ap_block_state5_pp1_stage0_iter1_ignore_call0, "ap_block_state5_pp1_stage0_iter1_ignore_call0");
    sc_trace(mVcdFile, ap_block_state6_pp1_stage0_iter2_ignore_call0, "ap_block_state6_pp1_stage0_iter2_ignore_call0");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter3_ignore_call0, "ap_block_state7_pp1_stage0_iter3_ignore_call0");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage0_iter4_ignore_call0, "ap_block_state8_pp1_stage0_iter4_ignore_call0");
    sc_trace(mVcdFile, ap_block_state9_pp1_stage0_iter5_ignore_call0, "ap_block_state9_pp1_stage0_iter5_ignore_call0");
    sc_trace(mVcdFile, ap_block_state10_pp1_stage0_iter6_ignore_call0, "ap_block_state10_pp1_stage0_iter6_ignore_call0");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001_ignoreCallOp105, "ap_block_pp1_stage0_11001_ignoreCallOp105");
    sc_trace(mVcdFile, indvar_flatten_reg_186, "indvar_flatten_reg_186");
    sc_trace(mVcdFile, i_reg_197, "i_reg_197");
    sc_trace(mVcdFile, j_reg_208, "j_reg_208");
    sc_trace(mVcdFile, tmp_3_fu_328_p1, "tmp_3_fu_328_p1");
    sc_trace(mVcdFile, tmp_8_fu_400_p1, "tmp_8_fu_400_p1");
    sc_trace(mVcdFile, window_2_1_fu_100, "window_2_1_fu_100");
    sc_trace(mVcdFile, window_0_0_fu_104, "window_0_0_fu_104");
    sc_trace(mVcdFile, window_0_1_fu_108, "window_0_1_fu_108");
    sc_trace(mVcdFile, window_2_0_fu_112, "window_2_0_fu_112");
    sc_trace(mVcdFile, window_1_0_fu_116, "window_1_0_fu_116");
    sc_trace(mVcdFile, window_1_1_fu_120, "window_1_1_fu_120");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, tmp_fu_324_p1, "tmp_fu_324_p1");
    sc_trace(mVcdFile, exitcond_fu_296_p2, "exitcond_fu_296_p2");
    sc_trace(mVcdFile, i_s_fu_310_p2, "i_s_fu_310_p2");
    sc_trace(mVcdFile, j_mid2_fu_302_p3, "j_mid2_fu_302_p3");
    sc_trace(mVcdFile, exitcond1_fu_352_p2, "exitcond1_fu_352_p2");
    sc_trace(mVcdFile, y_fu_366_p2, "y_fu_366_p2");
    sc_trace(mVcdFile, tmp_1_mid1_fu_372_p2, "tmp_1_mid1_fu_372_p2");
    sc_trace(mVcdFile, tmp_s_fu_378_p2, "tmp_s_fu_378_p2");
    sc_trace(mVcdFile, x_assign_mid2_fu_358_p3, "x_assign_mid2_fu_358_p3");
    sc_trace(mVcdFile, tmp_1_mid2_fu_384_p3, "tmp_1_mid2_fu_384_p3");
    sc_trace(mVcdFile, tmp_7_fu_406_p2, "tmp_7_fu_406_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("convolve_2d.hdltvin.dat");
    mHdltvoutHandle.open("convolve_2d.hdltvout.dat");
}

convolve_2d::~convolve_2d() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete line_buf_0_U;
    delete line_buf_1_U;
    delete grp_convolve_fu_252;
}

void convolve_2d::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void convolve_2d::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten8_fu_340_p2.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter1_state5.read())) {
                ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter0.read();
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter3 = ap_enable_reg_pp1_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter4 = ap_enable_reg_pp1_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter5 = ap_enable_reg_pp1_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter6 = ap_enable_reg_pp1_iter5.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter6 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_284_p2.read()))) {
        i_reg_197 = i_t_mid2_v_fu_316_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_197 = ap_const_lv2_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_vld_out.read()))) {
            in_stream_V_0_sel_rd =  (sc_logic) (~in_stream_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_ack_in.read()))) {
            in_stream_V_0_sel_wr =  (sc_logic) (~in_stream_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_V_0_state.read())))) {
            in_stream_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_V_0_state.read())))) {
            in_stream_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_ack_out.read()))))) {
            in_stream_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        indvar_flatten6_reg_219 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten6_reg_219 = indvar_flatten_next7_fu_346_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_284_p2.read()))) {
        indvar_flatten_reg_186 = indvar_flatten_next_fu_290_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_186 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_284_p2.read()))) {
        j_reg_208 = j_1_fu_334_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_208 = ap_const_lv3_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_vld_out.read()))) {
            out_stream_V_1_sel_rd =  (sc_logic) (~out_stream_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_ack_in.read()))) {
            out_stream_V_1_sel_wr =  (sc_logic) (~out_stream_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_ack_out.read()))))) {
            out_stream_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_assign_reg_241 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        x_assign_reg_241 = x_fu_418_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        y_assign_reg_230 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        y_assign_reg_230 = y_assign_mid2_fu_392_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten8_reg_540 = exitcond_flatten8_fu_340_p2.read();
        or_cond_reg_573_pp1_iter1_reg = or_cond_reg_573.read();
        tmp_6_reg_554_pp1_iter1_reg = tmp_6_reg_554.read();
        window_0_0_load_reg_582 = window_0_0_fu_104.read();
        window_1_0_load_reg_592 = window_1_0_fu_116.read();
        window_2_0_load_reg_587 = window_2_0_fu_112.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_load_A.read())) {
        in_stream_V_0_payload_A = in_stream_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_load_B.read())) {
        in_stream_V_0_payload_B = in_stream_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        line_buf_0_addr_1_reg_561 =  (sc_lv<3>) (tmp_8_fu_400_p1.read());
        line_buf_1_addr_1_reg_567 =  (sc_lv<3>) (tmp_8_fu_400_p1.read());
        or_cond_reg_573 = or_cond_fu_412_p2.read();
        tmp_6_reg_554 = in_stream_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) {
        or_cond_reg_573_pp1_iter2_reg = or_cond_reg_573_pp1_iter1_reg.read();
        or_cond_reg_573_pp1_iter3_reg = or_cond_reg_573_pp1_iter2_reg.read();
        or_cond_reg_573_pp1_iter4_reg = or_cond_reg_573_pp1_iter3_reg.read();
        or_cond_reg_573_pp1_iter5_reg = or_cond_reg_573_pp1_iter4_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_load_A.read())) {
        out_stream_V_1_payload_A = grp_convolve_fu_252_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_load_B.read())) {
        out_stream_V_1_payload_B = grp_convolve_fu_252_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        window_0_0_fu_104 = window_0_1_fu_108.read();
        window_1_0_fu_116 = window_1_1_fu_120.read();
        window_2_0_fu_112 = window_2_1_fu_100.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_reg_540.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        window_0_1_fu_108 = line_buf_0_q0.read();
        window_0_2_reg_612 = line_buf_0_q0.read();
        window_1_1_fu_120 = line_buf_1_q0.read();
        window_1_2_reg_617 = line_buf_1_q0.read();
        window_2_1_fu_100 = tmp_6_reg_554.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_reg_540.read()))) {
        window_0_1_load_1_reg_602 = window_0_1_fu_108.read();
        window_1_1_load_1_reg_607 = window_1_1_fu_120.read();
        window_2_1_load_1_reg_597 = window_2_1_fu_100.read();
    }
}

void convolve_2d::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[3];
}

void convolve_2d::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolve_2d::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[4];
}

void convolve_2d::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolve_2d::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolve_2d::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_out.read()));
}

void convolve_2d::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter6.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())));
}

void convolve_2d::thread_ap_block_pp1_stage0_11001_ignoreCallOp105() {
    ap_block_pp1_stage0_11001_ignoreCallOp105 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter6.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())));
}

void convolve_2d::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter6.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())));
}

void convolve_2d::thread_ap_block_state10_io() {
    ap_block_state10_io = (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_573_pp1_iter5_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_ack_in.read()));
}

void convolve_2d::thread_ap_block_state10_pp1_stage0_iter6() {
    ap_block_state10_pp1_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state10_pp1_stage0_iter6_ignore_call0() {
    ap_block_state10_pp1_stage0_iter6_ignore_call0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state4_pp1_stage0_iter0() {
    ap_block_state4_pp1_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_out.read()));
}

void convolve_2d::thread_ap_block_state4_pp1_stage0_iter0_ignore_call0() {
    ap_block_state4_pp1_stage0_iter0_ignore_call0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_0_vld_out.read()));
}

void convolve_2d::thread_ap_block_state5_pp1_stage0_iter1() {
    ap_block_state5_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state5_pp1_stage0_iter1_ignore_call0() {
    ap_block_state5_pp1_stage0_iter1_ignore_call0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state6_pp1_stage0_iter2() {
    ap_block_state6_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state6_pp1_stage0_iter2_ignore_call0() {
    ap_block_state6_pp1_stage0_iter2_ignore_call0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state7_pp1_stage0_iter3() {
    ap_block_state7_pp1_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state7_pp1_stage0_iter3_ignore_call0() {
    ap_block_state7_pp1_stage0_iter3_ignore_call0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state8_pp1_stage0_iter4() {
    ap_block_state8_pp1_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state8_pp1_stage0_iter4_ignore_call0() {
    ap_block_state8_pp1_stage0_iter4_ignore_call0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state9_io() {
    ap_block_state9_io = (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_573_pp1_iter4_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_ack_in.read()));
}

void convolve_2d::thread_ap_block_state9_pp1_stage0_iter5() {
    ap_block_state9_pp1_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_block_state9_pp1_stage0_iter5_ignore_call0() {
    ap_block_state9_pp1_stage0_iter5_ignore_call0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolve_2d::thread_ap_condition_pp1_exit_iter1_state5() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0))) {
        ap_condition_pp1_exit_iter1_state5 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter1_state5 = ap_const_logic_0;
    }
}

void convolve_2d::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(out_stream_V_1_ack_in.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolve_2d::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void convolve_2d::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolve_2d::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter6.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void convolve_2d::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(out_stream_V_1_ack_in.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolve_2d::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void convolve_2d::thread_exitcond1_fu_352_p2() {
    exitcond1_fu_352_p2 = (!x_assign_reg_241.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(x_assign_reg_241.read() == ap_const_lv3_7);
}

void convolve_2d::thread_exitcond_flatten8_fu_340_p2() {
    exitcond_flatten8_fu_340_p2 = (!indvar_flatten6_reg_219.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten6_reg_219.read() == ap_const_lv6_31);
}

void convolve_2d::thread_exitcond_flatten_fu_284_p2() {
    exitcond_flatten_fu_284_p2 = (!indvar_flatten_reg_186.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_186.read() == ap_const_lv4_E);
}

void convolve_2d::thread_exitcond_fu_296_p2() {
    exitcond_fu_296_p2 = (!j_reg_208.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_208.read() == ap_const_lv3_7);
}

void convolve_2d::thread_grp_convolve_fu_252_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001_ignoreCallOp105.read(), ap_const_boolean_0))) {
        grp_convolve_fu_252_ap_ce = ap_const_logic_1;
    } else {
        grp_convolve_fu_252_ap_ce = ap_const_logic_0;
    }
}

void convolve_2d::thread_i_s_fu_310_p2() {
    i_s_fu_310_p2 = (!ap_const_lv2_1.is_01() || !i_reg_197.read().is_01())? sc_lv<2>(): (sc_biguint<2>(ap_const_lv2_1) + sc_biguint<2>(i_reg_197.read()));
}

void convolve_2d::thread_i_t_mid2_v_fu_316_p3() {
    i_t_mid2_v_fu_316_p3 = (!exitcond_fu_296_p2.read()[0].is_01())? sc_lv<2>(): ((exitcond_fu_296_p2.read()[0].to_bool())? i_s_fu_310_p2.read(): i_reg_197.read());
}

void convolve_2d::thread_in_stream_V_0_ack_in() {
    in_stream_V_0_ack_in = in_stream_V_0_state.read()[1];
}

void convolve_2d::thread_in_stream_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        in_stream_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_V_0_ack_out = ap_const_logic_0;
    }
}

void convolve_2d::thread_in_stream_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_0_sel.read())) {
        in_stream_V_0_data_out = in_stream_V_0_payload_B.read();
    } else {
        in_stream_V_0_data_out = in_stream_V_0_payload_A.read();
    }
}

void convolve_2d::thread_in_stream_V_0_load_A() {
    in_stream_V_0_load_A = (in_stream_V_0_state_cmp_full.read() & ~in_stream_V_0_sel_wr.read());
}

void convolve_2d::thread_in_stream_V_0_load_B() {
    in_stream_V_0_load_B = (in_stream_V_0_sel_wr.read() & in_stream_V_0_state_cmp_full.read());
}

void convolve_2d::thread_in_stream_V_0_sel() {
    in_stream_V_0_sel = in_stream_V_0_sel_rd.read();
}

void convolve_2d::thread_in_stream_V_0_state_cmp_full() {
    in_stream_V_0_state_cmp_full =  (sc_logic) ((!in_stream_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_V_0_state.read() != ap_const_lv2_1))[0];
}

void convolve_2d::thread_in_stream_V_0_vld_in() {
    in_stream_V_0_vld_in = in_stream_V_TVALID.read();
}

void convolve_2d::thread_in_stream_V_0_vld_out() {
    in_stream_V_0_vld_out = in_stream_V_0_state.read()[0];
}

void convolve_2d::thread_in_stream_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_fu_340_p2.read()))) {
        in_stream_V_TDATA_blk_n = in_stream_V_0_state.read()[0];
    } else {
        in_stream_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void convolve_2d::thread_in_stream_V_TREADY() {
    in_stream_V_TREADY = in_stream_V_0_state.read()[1];
}

void convolve_2d::thread_indvar_flatten_next7_fu_346_p2() {
    indvar_flatten_next7_fu_346_p2 = (!indvar_flatten6_reg_219.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(indvar_flatten6_reg_219.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void convolve_2d::thread_indvar_flatten_next_fu_290_p2() {
    indvar_flatten_next_fu_290_p2 = (!indvar_flatten_reg_186.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(indvar_flatten_reg_186.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void convolve_2d::thread_j_1_fu_334_p2() {
    j_1_fu_334_p2 = (!j_mid2_fu_302_p3.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_mid2_fu_302_p3.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void convolve_2d::thread_j_mid2_fu_302_p3() {
    j_mid2_fu_302_p3 = (!exitcond_fu_296_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond_fu_296_p2.read()[0].to_bool())? ap_const_lv3_0: j_reg_208.read());
}

void convolve_2d::thread_line_buf_0_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        line_buf_0_address0 =  (sc_lv<3>) (tmp_8_fu_400_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        line_buf_0_address0 =  (sc_lv<3>) (tmp_3_fu_328_p1.read());
    } else {
        line_buf_0_address0 = "XXX";
    }
}

void convolve_2d::thread_line_buf_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        line_buf_0_ce0 = ap_const_logic_1;
    } else {
        line_buf_0_ce0 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_0_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        line_buf_0_ce1 = ap_const_logic_1;
    } else {
        line_buf_0_ce1 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_284_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_324_p1.read()))) {
        line_buf_0_we0 = ap_const_logic_1;
    } else {
        line_buf_0_we0 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_0_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_reg_540.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        line_buf_0_we1 = ap_const_logic_1;
    } else {
        line_buf_0_we1 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_1_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        line_buf_1_address0 =  (sc_lv<3>) (tmp_8_fu_400_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        line_buf_1_address0 =  (sc_lv<3>) (tmp_3_fu_328_p1.read());
    } else {
        line_buf_1_address0 = "XXX";
    }
}

void convolve_2d::thread_line_buf_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        line_buf_1_ce0 = ap_const_logic_1;
    } else {
        line_buf_1_ce0 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_1_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        line_buf_1_ce1 = ap_const_logic_1;
    } else {
        line_buf_1_ce1 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_284_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_324_p1.read()))) {
        line_buf_1_we0 = ap_const_logic_1;
    } else {
        line_buf_1_we0 = ap_const_logic_0;
    }
}

void convolve_2d::thread_line_buf_1_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten8_reg_540.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        line_buf_1_we1 = ap_const_logic_1;
    } else {
        line_buf_1_we1 = ap_const_logic_0;
    }
}

void convolve_2d::thread_or_cond_fu_412_p2() {
    or_cond_fu_412_p2 = (tmp_1_mid2_fu_384_p3.read() & tmp_7_fu_406_p2.read());
}

void convolve_2d::thread_out_stream_V_1_ack_in() {
    out_stream_V_1_ack_in = out_stream_V_1_state.read()[1];
}

void convolve_2d::thread_out_stream_V_1_ack_out() {
    out_stream_V_1_ack_out = out_stream_V_TREADY.read();
}

void convolve_2d::thread_out_stream_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_1_sel.read())) {
        out_stream_V_1_data_out = out_stream_V_1_payload_B.read();
    } else {
        out_stream_V_1_data_out = out_stream_V_1_payload_A.read();
    }
}

void convolve_2d::thread_out_stream_V_1_load_A() {
    out_stream_V_1_load_A = (out_stream_V_1_state_cmp_full.read() & ~out_stream_V_1_sel_wr.read());
}

void convolve_2d::thread_out_stream_V_1_load_B() {
    out_stream_V_1_load_B = (out_stream_V_1_sel_wr.read() & out_stream_V_1_state_cmp_full.read());
}

void convolve_2d::thread_out_stream_V_1_sel() {
    out_stream_V_1_sel = out_stream_V_1_sel_rd.read();
}

void convolve_2d::thread_out_stream_V_1_state_cmp_full() {
    out_stream_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_1_state.read() != ap_const_lv2_1))[0];
}

void convolve_2d::thread_out_stream_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_573_pp1_iter4_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_1_vld_in = ap_const_logic_0;
    }
}

void convolve_2d::thread_out_stream_V_1_vld_out() {
    out_stream_V_1_vld_out = out_stream_V_1_state.read()[0];
}

void convolve_2d::thread_out_stream_V_TDATA() {
    out_stream_V_TDATA = out_stream_V_1_data_out.read();
}

void convolve_2d::thread_out_stream_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_573_pp1_iter4_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_573_pp1_iter5_reg.read())))) {
        out_stream_V_TDATA_blk_n = out_stream_V_1_state.read()[1];
    } else {
        out_stream_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void convolve_2d::thread_out_stream_V_TVALID() {
    out_stream_V_TVALID = out_stream_V_1_state.read()[0];
}

void convolve_2d::thread_tmp_1_mid1_fu_372_p2() {
    tmp_1_mid1_fu_372_p2 = (!y_fu_366_p2.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(y_fu_366_p2.read() != ap_const_lv3_0);
}

void convolve_2d::thread_tmp_1_mid2_fu_384_p3() {
    tmp_1_mid2_fu_384_p3 = (!exitcond1_fu_352_p2.read()[0].is_01())? sc_lv<1>(): ((exitcond1_fu_352_p2.read()[0].to_bool())? tmp_1_mid1_fu_372_p2.read(): tmp_s_fu_378_p2.read());
}

void convolve_2d::thread_tmp_3_fu_328_p1() {
    tmp_3_fu_328_p1 = esl_zext<64,3>(j_mid2_fu_302_p3.read());
}

void convolve_2d::thread_tmp_7_fu_406_p2() {
    tmp_7_fu_406_p2 = (!x_assign_mid2_fu_358_p3.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(x_assign_mid2_fu_358_p3.read() != ap_const_lv3_0);
}

void convolve_2d::thread_tmp_8_fu_400_p1() {
    tmp_8_fu_400_p1 = esl_zext<64,3>(x_assign_mid2_fu_358_p3.read());
}

void convolve_2d::thread_tmp_fu_324_p1() {
    tmp_fu_324_p1 = i_t_mid2_v_fu_316_p3.read().range(1-1, 0);
}

void convolve_2d::thread_tmp_s_fu_378_p2() {
    tmp_s_fu_378_p2 = (!y_assign_reg_230.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(y_assign_reg_230.read() != ap_const_lv3_0);
}

void convolve_2d::thread_x_assign_mid2_fu_358_p3() {
    x_assign_mid2_fu_358_p3 = (!exitcond1_fu_352_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond1_fu_352_p2.read()[0].to_bool())? ap_const_lv3_0: x_assign_reg_241.read());
}

void convolve_2d::thread_x_fu_418_p2() {
    x_fu_418_p2 = (!x_assign_mid2_fu_358_p3.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(x_assign_mid2_fu_358_p3.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void convolve_2d::thread_y_assign_mid2_fu_392_p3() {
    y_assign_mid2_fu_392_p3 = (!exitcond1_fu_352_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond1_fu_352_p2.read()[0].to_bool())? y_fu_366_p2.read(): y_assign_reg_230.read());
}

void convolve_2d::thread_y_fu_366_p2() {
    y_fu_366_p2 = (!y_assign_reg_230.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(y_assign_reg_230.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void convolve_2d::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_284_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter6.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter5.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter6.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter5.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(out_stream_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void convolve_2d::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_V_TDATA\" :  \"" << out_stream_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_V_TVALID\" :  \"" << out_stream_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_V_TREADY\" :  \"" << out_stream_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_V_TDATA\" :  \"" << in_stream_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_V_TVALID\" :  \"" << in_stream_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_stream_V_TREADY\" :  \"" << in_stream_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_0_0\" :  \"" << kernel_0_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_0_1\" :  \"" << kernel_0_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_0_2\" :  \"" << kernel_0_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_1_0\" :  \"" << kernel_1_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_1_1\" :  \"" << kernel_1_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_1_2\" :  \"" << kernel_1_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_2_0\" :  \"" << kernel_2_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_2_1\" :  \"" << kernel_2_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_2_2\" :  \"" << kernel_2_2.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

