-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_stream_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_TVALID : OUT STD_LOGIC;
    out_stream_V_TREADY : IN STD_LOGIC;
    in_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_TVALID : IN STD_LOGIC;
    in_stream_V_TREADY : OUT STD_LOGIC;
    kernel_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_1_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_2_2 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolve_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=72,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=27,HLS_SYN_FF=1778,HLS_SYN_LUT=914,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_1_sel : STD_LOGIC;
    signal out_stream_V_1_load_A : STD_LOGIC;
    signal out_stream_V_1_load_B : STD_LOGIC;
    signal out_stream_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_1_state_cmp_full : STD_LOGIC;
    signal in_stream_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_0_vld_in : STD_LOGIC;
    signal in_stream_V_0_vld_out : STD_LOGIC;
    signal in_stream_V_0_ack_in : STD_LOGIC;
    signal in_stream_V_0_ack_out : STD_LOGIC;
    signal in_stream_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_V_0_sel : STD_LOGIC;
    signal in_stream_V_0_load_A : STD_LOGIC;
    signal in_stream_V_0_load_B : STD_LOGIC;
    signal in_stream_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_V_0_state_cmp_full : STD_LOGIC;
    signal out_stream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal or_cond_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_573_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal or_cond_reg_573_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_stream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten8_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten6_reg_219 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_assign_reg_230 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_241 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_t_mid2_v_fu_316_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_334_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten8_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next7_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_assign_mid2_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_554_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buf_0_addr_1_reg_561 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_1_addr_1_reg_567 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_cond_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_573_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_573_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_573_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_418_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal window_0_0_load_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_0_load_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_load_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_1_load_1_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_load_1_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_1_load_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_2_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal line_buf_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolve_fu_252_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter1_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal line_buf_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_0_ce0 : STD_LOGIC;
    signal line_buf_0_we0 : STD_LOGIC;
    signal line_buf_0_ce1 : STD_LOGIC;
    signal line_buf_0_we1 : STD_LOGIC;
    signal line_buf_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buf_1_ce0 : STD_LOGIC;
    signal line_buf_1_we0 : STD_LOGIC;
    signal line_buf_1_ce1 : STD_LOGIC;
    signal line_buf_1_we1 : STD_LOGIC;
    signal grp_convolve_fu_252_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp1_stage0_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2_ignore_call0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3_ignore_call0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4_ignore_call0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter5_ignore_call0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter6_ignore_call0 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_ignoreCallOp105 : BOOLEAN;
    signal indvar_flatten_reg_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_208 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_2_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_0_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_0_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_1_fu_324_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_310_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_fu_302_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_mid1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_mid2_fu_358_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_mid2_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        window_0_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_0_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_0_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_1_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_1_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_1_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_2_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_2_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        window_2_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_1_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_2_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component convolve_2d_line_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    line_buf_0_U : component convolve_2d_line_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buf_0_address0,
        ce0 => line_buf_0_ce0,
        we0 => line_buf_0_we0,
        d0 => ap_const_lv32_0,
        q0 => line_buf_0_q0,
        address1 => line_buf_0_addr_1_reg_561,
        ce1 => line_buf_0_ce1,
        we1 => line_buf_0_we1,
        d1 => line_buf_1_q0);

    line_buf_1_U : component convolve_2d_line_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buf_1_address0,
        ce0 => line_buf_1_ce0,
        we0 => line_buf_1_we0,
        d0 => ap_const_lv32_0,
        q0 => line_buf_1_q0,
        address1 => line_buf_1_addr_1_reg_567,
        ce1 => line_buf_1_ce1,
        we1 => line_buf_1_we1,
        d1 => tmp_6_reg_554);

    grp_convolve_fu_252 : component convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        window_0_0_read => window_0_0_load_reg_582,
        window_0_1_read => window_0_1_load_1_reg_602,
        window_0_2_read => window_0_2_reg_612,
        window_1_0_read => window_1_0_load_reg_592,
        window_1_1_read => window_1_1_load_1_reg_607,
        window_1_2_read => window_1_2_reg_617,
        window_2_0_read => window_2_0_load_reg_587,
        window_2_1_read => window_2_1_load_1_reg_597,
        window_2_2_read => tmp_6_reg_554_pp1_iter1_reg,
        kernel_0_0 => kernel_0_0,
        kernel_0_1 => kernel_0_1,
        kernel_0_2 => kernel_0_2,
        kernel_1_0 => kernel_1_0,
        kernel_1_1 => kernel_1_1,
        kernel_1_2 => kernel_1_2,
        kernel_2_0 => kernel_2_0,
        kernel_2_1 => kernel_2_1,
        kernel_2_2 => kernel_2_2,
        ap_return => grp_convolve_fu_252_ap_return,
        ap_ce => grp_convolve_fu_252_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter1_state5)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_V_0_ack_out = ap_const_logic_1) and (in_stream_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_V_0_sel_rd <= not(in_stream_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_V_0_ack_in = ap_const_logic_1) and (in_stream_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_V_0_sel_wr <= not(in_stream_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_0_state = ap_const_lv2_2) and (in_stream_V_0_vld_in = ap_const_logic_0)) or ((in_stream_V_0_state = ap_const_lv2_3) and (in_stream_V_0_vld_in = ap_const_logic_0) and (in_stream_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_0_state = ap_const_lv2_1) and (in_stream_V_0_ack_out = ap_const_logic_0)) or ((in_stream_V_0_state = ap_const_lv2_3) and (in_stream_V_0_ack_out = ap_const_logic_0) and (in_stream_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_0_vld_in = ap_const_logic_0) and (in_stream_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_0_ack_out = ap_const_logic_0) and (in_stream_V_0_vld_in = ap_const_logic_1))) and (in_stream_V_0_state = ap_const_lv2_3)) or ((in_stream_V_0_state = ap_const_lv2_1) and (in_stream_V_0_ack_out = ap_const_logic_1)) or ((in_stream_V_0_state = ap_const_lv2_2) and (in_stream_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_1_ack_out = ap_const_logic_1) and (out_stream_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_1_sel_rd <= not(out_stream_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_1_ack_in = ap_const_logic_1) and (out_stream_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_1_sel_wr <= not(out_stream_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_1_state = ap_const_lv2_2) and (out_stream_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_1_state = ap_const_lv2_3) and (out_stream_V_1_vld_in = ap_const_logic_0) and (out_stream_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_1_state = ap_const_lv2_1) and (out_stream_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_1_state = ap_const_lv2_3) and (out_stream_V_1_ack_out = ap_const_logic_0) and (out_stream_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_1_vld_in = ap_const_logic_0) and (out_stream_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_1_ack_out = ap_const_logic_0) and (out_stream_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_1_state = ap_const_lv2_3)) or ((out_stream_V_1_state = ap_const_lv2_1) and (out_stream_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_1_state = ap_const_lv2_2) and (out_stream_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_197 <= i_t_mid2_v_fu_316_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_197 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten6_reg_219 <= ap_const_lv6_0;
            elsif (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten6_reg_219 <= indvar_flatten_next7_fu_346_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_186 <= indvar_flatten_next_fu_290_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_186 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_208 <= j_1_fu_334_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_208 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_assign_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_assign_reg_241 <= ap_const_lv3_0;
            elsif (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                x_assign_reg_241 <= x_fu_418_p2;
            end if; 
        end if;
    end process;

    y_assign_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y_assign_reg_230 <= ap_const_lv3_0;
            elsif (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                y_assign_reg_230 <= y_assign_mid2_fu_392_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten8_reg_540 <= exitcond_flatten8_fu_340_p2;
                or_cond_reg_573_pp1_iter1_reg <= or_cond_reg_573;
                tmp_6_reg_554_pp1_iter1_reg <= tmp_6_reg_554;
                window_0_0_load_reg_582 <= window_0_0_fu_104;
                window_1_0_load_reg_592 <= window_1_0_fu_116;
                window_2_0_load_reg_587 <= window_2_0_fu_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_0_load_A = ap_const_logic_1)) then
                in_stream_V_0_payload_A <= in_stream_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_0_load_B = ap_const_logic_1)) then
                in_stream_V_0_payload_B <= in_stream_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                line_buf_0_addr_1_reg_561 <= tmp_8_fu_400_p1(3 - 1 downto 0);
                line_buf_1_addr_1_reg_567 <= tmp_8_fu_400_p1(3 - 1 downto 0);
                or_cond_reg_573 <= or_cond_fu_412_p2;
                tmp_6_reg_554 <= in_stream_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                or_cond_reg_573_pp1_iter2_reg <= or_cond_reg_573_pp1_iter1_reg;
                or_cond_reg_573_pp1_iter3_reg <= or_cond_reg_573_pp1_iter2_reg;
                or_cond_reg_573_pp1_iter4_reg <= or_cond_reg_573_pp1_iter3_reg;
                or_cond_reg_573_pp1_iter5_reg <= or_cond_reg_573_pp1_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_1_payload_A <= grp_convolve_fu_252_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_1_payload_B <= grp_convolve_fu_252_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                window_0_0_fu_104 <= window_0_1_fu_108;
                window_1_0_fu_116 <= window_1_1_fu_120;
                window_2_0_fu_112 <= window_2_1_fu_100;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                window_0_1_fu_108 <= line_buf_0_q0;
                window_0_2_reg_612 <= line_buf_0_q0;
                window_1_1_fu_120 <= line_buf_1_q0;
                window_1_2_reg_617 <= line_buf_1_q0;
                window_2_1_fu_100 <= tmp_6_reg_554;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                window_0_1_load_1_reg_602 <= window_0_1_fu_108;
                window_1_1_load_1_reg_607 <= window_1_1_fu_120;
                window_2_1_load_1_reg_597 <= window_2_1_fu_100;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_stream_V_1_ack_in, out_stream_V_1_state, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, exitcond_flatten_fu_284_p2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((out_stream_V_1_ack_in = ap_const_logic_1) and (out_stream_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(in_stream_V_0_vld_out, ap_enable_reg_pp1_iter0, exitcond_flatten8_fu_340_p2)
    begin
                ap_block_pp1_stage0_01001 <= ((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (in_stream_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(in_stream_V_0_vld_out, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, exitcond_flatten8_fu_340_p2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001 <= (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (in_stream_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_11001_ignoreCallOp105_assign_proc : process(in_stream_V_0_vld_out, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, exitcond_flatten8_fu_340_p2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001_ignoreCallOp105 <= (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (in_stream_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(in_stream_V_0_vld_out, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, exitcond_flatten8_fu_340_p2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_subdone <= (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (in_stream_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)));
    end process;


    ap_block_state10_io_assign_proc : process(out_stream_V_1_ack_in, or_cond_reg_573_pp1_iter5_reg)
    begin
                ap_block_state10_io <= ((or_cond_reg_573_pp1_iter5_reg = ap_const_lv1_1) and (out_stream_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter6_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp1_stage0_iter0_assign_proc : process(in_stream_V_0_vld_out, exitcond_flatten8_fu_340_p2)
    begin
                ap_block_state4_pp1_stage0_iter0 <= ((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (in_stream_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_pp1_stage0_iter0_ignore_call0_assign_proc : process(in_stream_V_0_vld_out, exitcond_flatten8_fu_340_p2)
    begin
                ap_block_state4_pp1_stage0_iter0_ignore_call0 <= ((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (in_stream_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(out_stream_V_1_ack_in, or_cond_reg_573_pp1_iter4_reg)
    begin
                ap_block_state9_io <= ((or_cond_reg_573_pp1_iter4_reg = ap_const_lv1_1) and (out_stream_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter5_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter1_state5_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter1_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(out_stream_V_1_ack_in, out_stream_V_1_state, ap_CS_fsm_state11)
    begin
        if (((out_stream_V_1_ack_in = ap_const_logic_1) and (out_stream_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_V_1_ack_in, out_stream_V_1_state, ap_CS_fsm_state11)
    begin
        if (((out_stream_V_1_ack_in = ap_const_logic_1) and (out_stream_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_352_p2 <= "1" when (x_assign_reg_241 = ap_const_lv3_7) else "0";
    exitcond_flatten8_fu_340_p2 <= "1" when (indvar_flatten6_reg_219 = ap_const_lv6_31) else "0";
    exitcond_flatten_fu_284_p2 <= "1" when (indvar_flatten_reg_186 = ap_const_lv4_E) else "0";
    exitcond_fu_296_p2 <= "1" when (j_reg_208 = ap_const_lv3_7) else "0";

    grp_convolve_fu_252_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001_ignoreCallOp105)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001_ignoreCallOp105) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_convolve_fu_252_ap_ce <= ap_const_logic_1;
        else 
            grp_convolve_fu_252_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_s_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(i_reg_197));
    i_t_mid2_v_fu_316_p3 <= 
        i_s_fu_310_p2 when (exitcond_fu_296_p2(0) = '1') else 
        i_reg_197;
    in_stream_V_0_ack_in <= in_stream_V_0_state(1);

    in_stream_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, exitcond_flatten8_fu_340_p2, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            in_stream_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_V_0_data_out_assign_proc : process(in_stream_V_0_payload_A, in_stream_V_0_payload_B, in_stream_V_0_sel)
    begin
        if ((in_stream_V_0_sel = ap_const_logic_1)) then 
            in_stream_V_0_data_out <= in_stream_V_0_payload_B;
        else 
            in_stream_V_0_data_out <= in_stream_V_0_payload_A;
        end if; 
    end process;

    in_stream_V_0_load_A <= (in_stream_V_0_state_cmp_full and not(in_stream_V_0_sel_wr));
    in_stream_V_0_load_B <= (in_stream_V_0_state_cmp_full and in_stream_V_0_sel_wr);
    in_stream_V_0_sel <= in_stream_V_0_sel_rd;
    in_stream_V_0_state_cmp_full <= '0' when (in_stream_V_0_state = ap_const_lv2_1) else '1';
    in_stream_V_0_vld_in <= in_stream_V_TVALID;
    in_stream_V_0_vld_out <= in_stream_V_0_state(0);

    in_stream_V_TDATA_blk_n_assign_proc : process(in_stream_V_0_state, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, exitcond_flatten8_fu_340_p2)
    begin
        if (((exitcond_flatten8_fu_340_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            in_stream_V_TDATA_blk_n <= in_stream_V_0_state(0);
        else 
            in_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_V_TREADY <= in_stream_V_0_state(1);
    indvar_flatten_next7_fu_346_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_219) + unsigned(ap_const_lv6_1));
    indvar_flatten_next_fu_290_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_186) + unsigned(ap_const_lv4_1));
    j_1_fu_334_p2 <= std_logic_vector(unsigned(j_mid2_fu_302_p3) + unsigned(ap_const_lv3_1));
    j_mid2_fu_302_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_296_p2(0) = '1') else 
        j_reg_208;

    line_buf_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, tmp_3_fu_328_p1, tmp_8_fu_400_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            line_buf_0_address0 <= tmp_8_fu_400_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_buf_0_address0 <= tmp_3_fu_328_p1(3 - 1 downto 0);
        else 
            line_buf_0_address0 <= "XXX";
        end if; 
    end process;


    line_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            line_buf_0_ce0 <= ap_const_logic_1;
        else 
            line_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buf_0_ce1 <= ap_const_logic_1;
        else 
            line_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_0_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_284_p2, tmp_1_fu_324_p1)
    begin
        if (((tmp_1_fu_324_p1 = ap_const_lv1_0) and (exitcond_flatten_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buf_0_we0 <= ap_const_logic_1;
        else 
            line_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, exitcond_flatten8_reg_540, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((exitcond_flatten8_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buf_0_we1 <= ap_const_logic_1;
        else 
            line_buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, tmp_3_fu_328_p1, tmp_8_fu_400_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            line_buf_1_address0 <= tmp_8_fu_400_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line_buf_1_address0 <= tmp_3_fu_328_p1(3 - 1 downto 0);
        else 
            line_buf_1_address0 <= "XXX";
        end if; 
    end process;


    line_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            line_buf_1_ce0 <= ap_const_logic_1;
        else 
            line_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buf_1_ce1 <= ap_const_logic_1;
        else 
            line_buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_284_p2, tmp_1_fu_324_p1)
    begin
        if (((tmp_1_fu_324_p1 = ap_const_lv1_1) and (exitcond_flatten_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buf_1_we0 <= ap_const_logic_1;
        else 
            line_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_1_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, exitcond_flatten8_reg_540, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((exitcond_flatten8_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buf_1_we1 <= ap_const_logic_1;
        else 
            line_buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_412_p2 <= (tmp_7_fu_406_p2 and tmp_1_mid2_fu_384_p3);
    out_stream_V_1_ack_in <= out_stream_V_1_state(1);
    out_stream_V_1_ack_out <= out_stream_V_TREADY;

    out_stream_V_1_data_out_assign_proc : process(out_stream_V_1_payload_A, out_stream_V_1_payload_B, out_stream_V_1_sel)
    begin
        if ((out_stream_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_1_data_out <= out_stream_V_1_payload_B;
        else 
            out_stream_V_1_data_out <= out_stream_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_1_load_A <= (out_stream_V_1_state_cmp_full and not(out_stream_V_1_sel_wr));
    out_stream_V_1_load_B <= (out_stream_V_1_state_cmp_full and out_stream_V_1_sel_wr);
    out_stream_V_1_sel <= out_stream_V_1_sel_rd;
    out_stream_V_1_state_cmp_full <= '0' when (out_stream_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter5, or_cond_reg_573_pp1_iter4_reg, ap_block_pp1_stage0_11001)
    begin
        if (((or_cond_reg_573_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            out_stream_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_1_vld_out <= out_stream_V_1_state(0);
    out_stream_V_TDATA <= out_stream_V_1_data_out;

    out_stream_V_TDATA_blk_n_assign_proc : process(out_stream_V_1_state, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, or_cond_reg_573_pp1_iter4_reg, ap_enable_reg_pp1_iter6, or_cond_reg_573_pp1_iter5_reg)
    begin
        if ((((or_cond_reg_573_pp1_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((or_cond_reg_573_pp1_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            out_stream_V_TDATA_blk_n <= out_stream_V_1_state(1);
        else 
            out_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_TVALID <= out_stream_V_1_state(0);
    tmp_1_fu_324_p1 <= i_t_mid2_v_fu_316_p3(1 - 1 downto 0);
    tmp_1_mid1_fu_372_p2 <= "0" when (y_fu_366_p2 = ap_const_lv3_0) else "1";
    tmp_1_mid2_fu_384_p3 <= 
        tmp_1_mid1_fu_372_p2 when (exitcond1_fu_352_p2(0) = '1') else 
        tmp_s_fu_378_p2;
    tmp_3_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_302_p3),64));
    tmp_7_fu_406_p2 <= "0" when (x_assign_mid2_fu_358_p3 = ap_const_lv3_0) else "1";
    tmp_8_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_mid2_fu_358_p3),64));
    tmp_s_fu_378_p2 <= "0" when (y_assign_reg_230 = ap_const_lv3_0) else "1";
    x_assign_mid2_fu_358_p3 <= 
        ap_const_lv3_0 when (exitcond1_fu_352_p2(0) = '1') else 
        x_assign_reg_241;
    x_fu_418_p2 <= std_logic_vector(unsigned(x_assign_mid2_fu_358_p3) + unsigned(ap_const_lv3_1));
    y_assign_mid2_fu_392_p3 <= 
        y_fu_366_p2 when (exitcond1_fu_352_p2(0) = '1') else 
        y_assign_reg_230;
    y_fu_366_p2 <= std_logic_vector(unsigned(y_assign_reg_230) + unsigned(ap_const_lv3_1));
end behav;
