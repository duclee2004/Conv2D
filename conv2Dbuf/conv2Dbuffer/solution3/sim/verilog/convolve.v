// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolve (
        ap_clk,
        ap_rst,
        window_0_0_read,
        window_0_1_read,
        window_0_2_read,
        window_1_0_read,
        window_1_1_read,
        window_1_2_read,
        window_2_0_read,
        window_2_1_read,
        window_2_2_read,
        kernel_0_0,
        kernel_0_1,
        kernel_0_2,
        kernel_1_0,
        kernel_1_1,
        kernel_1_2,
        kernel_2_0,
        kernel_2_1,
        kernel_2_2,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] window_0_0_read;
input  [31:0] window_0_1_read;
input  [31:0] window_0_2_read;
input  [31:0] window_1_0_read;
input  [31:0] window_1_1_read;
input  [31:0] window_1_2_read;
input  [31:0] window_2_0_read;
input  [31:0] window_2_1_read;
input  [31:0] window_2_2_read;
input  [31:0] kernel_0_0;
input  [31:0] kernel_0_1;
input  [31:0] kernel_0_2;
input  [31:0] kernel_1_0;
input  [31:0] kernel_1_1;
input  [31:0] kernel_1_2;
input  [31:0] kernel_2_0;
input  [31:0] kernel_2_1;
input  [31:0] kernel_2_2;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

wire   [31:0] tmp_s_fu_156_p2;
reg   [31:0] tmp_s_reg_246;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_17_0_1_fu_162_p2;
reg   [31:0] tmp_17_0_1_reg_251;
wire   [31:0] tmp_17_0_2_fu_168_p2;
reg   [31:0] tmp_17_0_2_reg_256;
wire   [31:0] tmp_17_1_fu_174_p2;
reg   [31:0] tmp_17_1_reg_261;
wire   [31:0] tmp_17_1_1_fu_180_p2;
reg   [31:0] tmp_17_1_1_reg_266;
wire   [31:0] tmp_17_1_2_fu_186_p2;
reg   [31:0] tmp_17_1_2_reg_271;
wire   [31:0] tmp_17_2_fu_192_p2;
reg   [31:0] tmp_17_2_reg_276;
wire   [31:0] tmp_17_2_1_fu_198_p2;
reg   [31:0] tmp_17_2_1_reg_281;
wire   [31:0] tmp_17_2_2_fu_204_p2;
reg   [31:0] tmp_17_2_2_reg_286;
wire   [31:0] tmp1_fu_210_p2;
reg   [31:0] tmp1_reg_291;
wire   [31:0] tmp2_fu_214_p2;
reg   [31:0] tmp2_reg_296;
wire   [31:0] tmp3_fu_231_p2;
reg   [31:0] tmp3_reg_301;
wire  signed [31:0] tmp_s_fu_156_p0;
wire  signed [31:0] tmp_s_fu_156_p1;
wire    ap_block_pp0_stage0;
wire  signed [31:0] tmp_17_0_1_fu_162_p0;
wire  signed [31:0] tmp_17_0_1_fu_162_p1;
wire  signed [31:0] tmp_17_0_2_fu_168_p0;
wire  signed [31:0] tmp_17_0_2_fu_168_p1;
wire  signed [31:0] tmp_17_1_fu_174_p0;
wire  signed [31:0] tmp_17_1_fu_174_p1;
wire  signed [31:0] tmp_17_1_1_fu_180_p0;
wire  signed [31:0] tmp_17_1_1_fu_180_p1;
wire  signed [31:0] tmp_17_1_2_fu_186_p0;
wire  signed [31:0] tmp_17_1_2_fu_186_p1;
wire  signed [31:0] tmp_17_2_fu_192_p0;
wire  signed [31:0] tmp_17_2_fu_192_p1;
wire  signed [31:0] tmp_17_2_1_fu_198_p0;
wire  signed [31:0] tmp_17_2_1_fu_198_p1;
wire  signed [31:0] tmp_17_2_2_fu_204_p0;
wire  signed [31:0] tmp_17_2_2_fu_204_p1;
wire   [31:0] tmp6_fu_222_p2;
wire   [31:0] tmp5_fu_226_p2;
wire   [31:0] tmp4_fu_218_p2;
wire   [31:0] tmp_fu_237_p2;
wire   [31:0] result_2_2_2_fu_241_p2;
reg    ap_ce_reg;
reg   [31:0] window_0_0_read_int_reg;
reg   [31:0] window_0_1_read_int_reg;
reg   [31:0] window_0_2_read_int_reg;
reg   [31:0] window_1_0_read_int_reg;
reg   [31:0] window_1_1_read_int_reg;
reg   [31:0] window_1_2_read_int_reg;
reg   [31:0] window_2_0_read_int_reg;
reg   [31:0] window_2_1_read_int_reg;
reg   [31:0] window_2_2_read_int_reg;
reg   [31:0] kernel_0_0_int_reg;
reg   [31:0] kernel_0_1_int_reg;
reg   [31:0] kernel_0_2_int_reg;
reg   [31:0] kernel_1_0_int_reg;
reg   [31:0] kernel_1_1_int_reg;
reg   [31:0] kernel_1_2_int_reg;
reg   [31:0] kernel_2_0_int_reg;
reg   [31:0] kernel_2_1_int_reg;
reg   [31:0] kernel_2_2_int_reg;
reg   [31:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= result_2_2_2_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        kernel_0_0_int_reg <= kernel_0_0;
        kernel_0_1_int_reg <= kernel_0_1;
        kernel_0_2_int_reg <= kernel_0_2;
        kernel_1_0_int_reg <= kernel_1_0;
        kernel_1_1_int_reg <= kernel_1_1;
        kernel_1_2_int_reg <= kernel_1_2;
        kernel_2_0_int_reg <= kernel_2_0;
        kernel_2_1_int_reg <= kernel_2_1;
        kernel_2_2_int_reg <= kernel_2_2;
        window_0_0_read_int_reg <= window_0_0_read;
        window_0_1_read_int_reg <= window_0_1_read;
        window_0_2_read_int_reg <= window_0_2_read;
        window_1_0_read_int_reg <= window_1_0_read;
        window_1_1_read_int_reg <= window_1_1_read;
        window_1_2_read_int_reg <= window_1_2_read;
        window_2_0_read_int_reg <= window_2_0_read;
        window_2_1_read_int_reg <= window_2_1_read;
        window_2_2_read_int_reg <= window_2_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        tmp1_reg_291 <= tmp1_fu_210_p2;
        tmp2_reg_296 <= tmp2_fu_214_p2;
        tmp3_reg_301 <= tmp3_fu_231_p2;
        tmp_17_0_1_reg_251 <= tmp_17_0_1_fu_162_p2;
        tmp_17_0_2_reg_256 <= tmp_17_0_2_fu_168_p2;
        tmp_17_1_1_reg_266 <= tmp_17_1_1_fu_180_p2;
        tmp_17_1_2_reg_271 <= tmp_17_1_2_fu_186_p2;
        tmp_17_1_reg_261 <= tmp_17_1_fu_174_p2;
        tmp_17_2_1_reg_281 <= tmp_17_2_1_fu_198_p2;
        tmp_17_2_2_reg_286 <= tmp_17_2_2_fu_204_p2;
        tmp_17_2_reg_276 <= tmp_17_2_fu_192_p2;
        tmp_s_reg_246 <= tmp_s_fu_156_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = result_2_2_2_fu_241_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign result_2_2_2_fu_241_p2 = (tmp3_reg_301 + tmp_fu_237_p2);

assign tmp1_fu_210_p2 = (tmp_s_reg_246 + tmp_17_0_1_reg_251);

assign tmp2_fu_214_p2 = (tmp_17_0_2_reg_256 + tmp_17_1_reg_261);

assign tmp3_fu_231_p2 = (tmp5_fu_226_p2 + tmp4_fu_218_p2);

assign tmp4_fu_218_p2 = (tmp_17_1_1_reg_266 + tmp_17_1_2_reg_271);

assign tmp5_fu_226_p2 = (tmp6_fu_222_p2 + tmp_17_2_reg_276);

assign tmp6_fu_222_p2 = (tmp_17_2_1_reg_281 + tmp_17_2_2_reg_286);

assign tmp_17_0_1_fu_162_p0 = kernel_0_1_int_reg;

assign tmp_17_0_1_fu_162_p1 = window_0_1_read_int_reg;

assign tmp_17_0_1_fu_162_p2 = ($signed(tmp_17_0_1_fu_162_p0) * $signed(tmp_17_0_1_fu_162_p1));

assign tmp_17_0_2_fu_168_p0 = kernel_0_2_int_reg;

assign tmp_17_0_2_fu_168_p1 = window_0_2_read_int_reg;

assign tmp_17_0_2_fu_168_p2 = ($signed(tmp_17_0_2_fu_168_p0) * $signed(tmp_17_0_2_fu_168_p1));

assign tmp_17_1_1_fu_180_p0 = kernel_1_1_int_reg;

assign tmp_17_1_1_fu_180_p1 = window_1_1_read_int_reg;

assign tmp_17_1_1_fu_180_p2 = ($signed(tmp_17_1_1_fu_180_p0) * $signed(tmp_17_1_1_fu_180_p1));

assign tmp_17_1_2_fu_186_p0 = kernel_1_2_int_reg;

assign tmp_17_1_2_fu_186_p1 = window_1_2_read_int_reg;

assign tmp_17_1_2_fu_186_p2 = ($signed(tmp_17_1_2_fu_186_p0) * $signed(tmp_17_1_2_fu_186_p1));

assign tmp_17_1_fu_174_p0 = kernel_1_0_int_reg;

assign tmp_17_1_fu_174_p1 = window_1_0_read_int_reg;

assign tmp_17_1_fu_174_p2 = ($signed(tmp_17_1_fu_174_p0) * $signed(tmp_17_1_fu_174_p1));

assign tmp_17_2_1_fu_198_p0 = kernel_2_1_int_reg;

assign tmp_17_2_1_fu_198_p1 = window_2_1_read_int_reg;

assign tmp_17_2_1_fu_198_p2 = ($signed(tmp_17_2_1_fu_198_p0) * $signed(tmp_17_2_1_fu_198_p1));

assign tmp_17_2_2_fu_204_p0 = kernel_2_2_int_reg;

assign tmp_17_2_2_fu_204_p1 = window_2_2_read_int_reg;

assign tmp_17_2_2_fu_204_p2 = ($signed(tmp_17_2_2_fu_204_p0) * $signed(tmp_17_2_2_fu_204_p1));

assign tmp_17_2_fu_192_p0 = kernel_2_0_int_reg;

assign tmp_17_2_fu_192_p1 = window_2_0_read_int_reg;

assign tmp_17_2_fu_192_p2 = ($signed(tmp_17_2_fu_192_p0) * $signed(tmp_17_2_fu_192_p1));

assign tmp_fu_237_p2 = (tmp2_reg_296 + tmp1_reg_291);

assign tmp_s_fu_156_p0 = kernel_0_0_int_reg;

assign tmp_s_fu_156_p1 = window_0_0_read_int_reg;

assign tmp_s_fu_156_p2 = ($signed(tmp_s_fu_156_p0) * $signed(tmp_s_fu_156_p1));

endmodule //convolve
