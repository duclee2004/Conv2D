// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_q1,
        kernel_Addr_A,
        kernel_EN_A,
        kernel_WEN_A,
        kernel_Din_A,
        kernel_Dout_A,
        kernel_Addr_B,
        kernel_EN_B,
        kernel_WEN_B,
        kernel_Din_B,
        kernel_Dout_B,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
input  [31:0] buffer_r_q1;
output  [31:0] kernel_Addr_A;
output   kernel_EN_A;
output  [3:0] kernel_WEN_A;
output  [31:0] kernel_Din_A;
input  [31:0] kernel_Dout_A;
output  [31:0] kernel_Addr_B;
output   kernel_EN_B;
output  [3:0] kernel_WEN_B;
output  [31:0] kernel_Din_B;
input  [31:0] kernel_Dout_B;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] buffer_r_address0;
reg buffer_r_ce0;
reg[9:0] buffer_r_address1;
reg buffer_r_ce1;
reg kernel_EN_A;
reg kernel_EN_B;
reg output_r_ce0;
reg output_r_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_249;
reg   [4:0] i_reg_260;
reg   [4:0] j_reg_272;
reg  signed [31:0] reg_283;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond_flatten_reg_631;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] reg_287;
reg  signed [31:0] reg_291;
reg  signed [31:0] reg_295;
wire   [31:0] grp_fu_299_p2;
reg   [31:0] reg_311;
wire   [31:0] grp_fu_305_p2;
reg   [31:0] reg_315;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] reg_325;
reg    ap_block_state1;
wire   [0:0] exitcond_flatten_fu_329_p2;
reg   [0:0] exitcond_flatten_reg_631_pp0_iter1_reg;
wire   [9:0] indvar_flatten_next_fu_335_p2;
reg   [9:0] indvar_flatten_next_reg_635;
wire   [0:0] exitcond_fu_341_p2;
reg   [0:0] exitcond_reg_640;
wire   [4:0] j_mid2_fu_347_p3;
reg   [4:0] j_mid2_reg_646;
reg   [4:0] j_mid2_reg_646_pp0_iter1_reg;
wire   [4:0] i_s_fu_355_p2;
reg   [4:0] i_s_reg_654;
wire   [4:0] tmp_mid2_v_fu_361_p3;
reg   [4:0] tmp_mid2_v_reg_659;
reg   [4:0] tmp_mid2_v_reg_659_pp0_iter1_reg;
wire   [4:0] j_1_fu_382_p2;
reg   [4:0] j_1_reg_672;
wire   [4:0] p_v_fu_407_p3;
reg   [4:0] p_v_reg_684;
wire   [4:0] tmp_1_2_mid2_v_fu_420_p2;
reg   [4:0] tmp_1_2_mid2_v_reg_690;
wire   [4:0] tmp_3_0_2_fu_438_p2;
reg   [4:0] tmp_3_0_2_reg_702;
wire   [31:0] tmp1_fu_516_p2;
reg   [31:0] tmp1_reg_738;
reg   [31:0] tmp_6_2_2_reg_743;
wire   [31:0] sum_2_2_2_fu_539_p2;
reg   [31:0] sum_2_2_2_reg_748;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage3_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_253_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i_phi_fu_264_p4;
reg   [4:0] ap_phi_mux_j_phi_fu_276_p4;
wire   [63:0] tmp_64_fu_377_p1;
wire   [63:0] tmp_69_fu_396_p1;
wire   [63:0] tmp_65_fu_433_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_73_fu_450_p1;
wire   [63:0] tmp_70_fu_461_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_74_fu_472_p1;
wire   [63:0] tmp_67_fu_483_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_72_fu_494_p1;
wire   [63:0] tmp_76_fu_505_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_73_cast_fu_581_p1;
reg   [31:0] kernel_Addr_A_orig;
reg   [31:0] kernel_Addr_B_orig;
wire   [9:0] tmp_2_fu_369_p3;
wire   [9:0] tmp_5_fu_388_p3;
wire   [4:0] i_2_mid1_fu_401_p2;
wire   [4:0] tmp_1_2_mid2_v_v_cas_fu_413_p3;
wire   [9:0] tmp_4_fu_426_p3;
wire   [9:0] tmp_8_fu_443_p3;
wire   [9:0] tmp_7_fu_455_p3;
wire   [9:0] tmp_9_fu_466_p3;
wire   [9:0] tmp_66_fu_477_p3;
wire   [9:0] tmp_71_fu_488_p3;
wire   [9:0] tmp_75_fu_499_p3;
wire   [31:0] tmp3_fu_510_p2;
wire   [31:0] tmp7_fu_522_p2;
wire   [31:0] tmp6_fu_527_p2;
wire   [31:0] tmp4_fu_533_p2;
wire   [9:0] tmp_fu_544_p3;
wire   [5:0] tmp_1_fu_555_p3;
wire   [10:0] p_shl_cast_fu_551_p1;
wire   [10:0] p_shl1_cast_fu_562_p1;
wire   [10:0] tmp_s_fu_566_p2;
wire   [10:0] tmp_4_cast_fu_572_p1;
wire   [10:0] tmp_68_fu_575_p2;
wire    ap_CS_fsm_state11;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_260 <= tmp_mid2_v_reg_659;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_260 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_249 <= indvar_flatten_next_reg_635;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_249 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_272 <= j_1_reg_672;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_272 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_631 <= exitcond_flatten_fu_329_p2;
        exitcond_flatten_reg_631_pp0_iter1_reg <= exitcond_flatten_reg_631;
        j_mid2_reg_646_pp0_iter1_reg <= j_mid2_reg_646;
        tmp_mid2_v_reg_659_pp0_iter1_reg <= tmp_mid2_v_reg_659;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_640 <= exitcond_fu_341_p2;
        i_s_reg_654 <= i_s_fu_355_p2;
        j_mid2_reg_646 <= j_mid2_fu_347_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_635 <= indvar_flatten_next_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_329_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_1_reg_672 <= j_1_fu_382_p2;
        tmp_mid2_v_reg_659 <= tmp_mid2_v_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_v_reg_684 <= p_v_fu_407_p3;
        tmp_1_2_mid2_v_reg_690 <= tmp_1_2_mid2_v_fu_420_p2;
        tmp_3_0_2_reg_702 <= tmp_3_0_2_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten_reg_631 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond_flatten_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_283 <= buffer_r_q0;
        reg_287 <= kernel_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten_reg_631 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond_flatten_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_291 <= buffer_r_q1;
        reg_295 <= kernel_Dout_B;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten_reg_631 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_311 <= grp_fu_299_p2;
        reg_315 <= grp_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((exitcond_flatten_reg_631 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_325 <= grp_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten_reg_631_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_2_2_2_reg_748 <= sum_2_2_2_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp1_reg_738 <= tmp1_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_631_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_6_2_2_reg_743 <= grp_fu_299_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_329_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_264_p4 = tmp_mid2_v_reg_659;
    end else begin
        ap_phi_mux_i_phi_fu_264_p4 = i_reg_260;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = indvar_flatten_next_reg_635;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = indvar_flatten_reg_249;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_631 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_276_p4 = j_1_reg_672;
    end else begin
        ap_phi_mux_j_phi_fu_276_p4 = j_reg_272;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            buffer_r_address0 = tmp_76_fu_505_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            buffer_r_address0 = tmp_67_fu_483_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            buffer_r_address0 = tmp_70_fu_461_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            buffer_r_address0 = tmp_73_fu_450_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            buffer_r_address0 = tmp_64_fu_377_p1;
        end else begin
            buffer_r_address0 = 'bx;
        end
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            buffer_r_address1 = tmp_72_fu_494_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            buffer_r_address1 = tmp_74_fu_472_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            buffer_r_address1 = tmp_65_fu_433_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            buffer_r_address1 = tmp_69_fu_396_p1;
        end else begin
            buffer_r_address1 = 'bx;
        end
    end else begin
        buffer_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_Addr_A_orig = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_Addr_A_orig = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_Addr_A_orig = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_Addr_A_orig = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_Addr_A_orig = 64'd0;
        end else begin
            kernel_Addr_A_orig = 'bx;
        end
    end else begin
        kernel_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_Addr_B_orig = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_Addr_B_orig = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_Addr_B_orig = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_Addr_B_orig = 64'd1;
        end else begin
            kernel_Addr_B_orig = 'bx;
        end
    end else begin
        kernel_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_EN_A = 1'b1;
    end else begin
        kernel_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_EN_B = 1'b1;
    end else begin
        kernel_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_631_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_329_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_329_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_329_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_253_p4 == 10'd900) ? 1'b1 : 1'b0);

assign exitcond_fu_341_p2 = ((ap_phi_mux_j_phi_fu_276_p4 == 5'd30) ? 1'b1 : 1'b0);

assign grp_fu_299_p2 = ($signed(reg_287) * $signed(reg_283));

assign grp_fu_305_p2 = ($signed(reg_295) * $signed(reg_291));

assign grp_fu_319_p2 = (reg_315 + reg_311);

assign i_2_mid1_fu_401_p2 = (i_reg_260 + 5'd2);

assign i_s_fu_355_p2 = (ap_phi_mux_i_phi_fu_264_p4 + 5'd1);

assign indvar_flatten_next_fu_335_p2 = (ap_phi_mux_indvar_flatten_phi_fu_253_p4 + 10'd1);

assign j_1_fu_382_p2 = (j_mid2_fu_347_p3 + 5'd1);

assign j_mid2_fu_347_p3 = ((exitcond_fu_341_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_j_phi_fu_276_p4);

assign kernel_Addr_A = kernel_Addr_A_orig << 32'd2;

assign kernel_Addr_B = kernel_Addr_B_orig << 32'd2;

assign kernel_Din_A = 32'd0;

assign kernel_Din_B = 32'd0;

assign kernel_WEN_A = 4'd0;

assign kernel_WEN_B = 4'd0;

assign output_r_address0 = tmp_73_cast_fu_581_p1;

assign output_r_d0 = sum_2_2_2_reg_748;

assign p_shl1_cast_fu_562_p1 = tmp_1_fu_555_p3;

assign p_shl_cast_fu_551_p1 = tmp_fu_544_p3;

assign p_v_fu_407_p3 = ((exitcond_reg_640[0:0] === 1'b1) ? i_2_mid1_fu_401_p2 : i_s_reg_654);

assign sum_2_2_2_fu_539_p2 = (tmp1_reg_738 + tmp4_fu_533_p2);

assign tmp1_fu_516_p2 = (reg_325 + tmp3_fu_510_p2);

assign tmp3_fu_510_p2 = (reg_315 + reg_311);

assign tmp4_fu_533_p2 = (reg_325 + tmp6_fu_527_p2);

assign tmp6_fu_527_p2 = (reg_311 + tmp7_fu_522_p2);

assign tmp7_fu_522_p2 = (tmp_6_2_2_reg_743 + reg_315);

assign tmp_1_2_mid2_v_fu_420_p2 = (i_reg_260 + tmp_1_2_mid2_v_v_cas_fu_413_p3);

assign tmp_1_2_mid2_v_v_cas_fu_413_p3 = ((exitcond_reg_640[0:0] === 1'b1) ? 5'd3 : 5'd2);

assign tmp_1_fu_555_p3 = {{tmp_mid2_v_reg_659_pp0_iter1_reg}, {1'd0}};

assign tmp_2_fu_369_p3 = {{tmp_mid2_v_fu_361_p3}, {j_mid2_fu_347_p3}};

assign tmp_3_0_2_fu_438_p2 = (j_mid2_reg_646 + 5'd2);

assign tmp_4_cast_fu_572_p1 = j_mid2_reg_646_pp0_iter1_reg;

assign tmp_4_fu_426_p3 = {{p_v_fu_407_p3}, {j_mid2_reg_646}};

assign tmp_5_fu_388_p3 = {{tmp_mid2_v_fu_361_p3}, {j_1_fu_382_p2}};

assign tmp_64_fu_377_p1 = tmp_2_fu_369_p3;

assign tmp_65_fu_433_p1 = tmp_4_fu_426_p3;

assign tmp_66_fu_477_p3 = {{tmp_1_2_mid2_v_reg_690}, {j_mid2_reg_646}};

assign tmp_67_fu_483_p1 = tmp_66_fu_477_p3;

assign tmp_68_fu_575_p2 = (tmp_s_fu_566_p2 + tmp_4_cast_fu_572_p1);

assign tmp_69_fu_396_p1 = tmp_5_fu_388_p3;

assign tmp_70_fu_461_p1 = tmp_7_fu_455_p3;

assign tmp_71_fu_488_p3 = {{tmp_1_2_mid2_v_reg_690}, {j_1_reg_672}};

assign tmp_72_fu_494_p1 = tmp_71_fu_488_p3;

assign tmp_73_cast_fu_581_p1 = tmp_68_fu_575_p2;

assign tmp_73_fu_450_p1 = tmp_8_fu_443_p3;

assign tmp_74_fu_472_p1 = tmp_9_fu_466_p3;

assign tmp_75_fu_499_p3 = {{tmp_1_2_mid2_v_reg_690}, {tmp_3_0_2_reg_702}};

assign tmp_76_fu_505_p1 = tmp_75_fu_499_p3;

assign tmp_7_fu_455_p3 = {{p_v_reg_684}, {j_1_reg_672}};

assign tmp_8_fu_443_p3 = {{tmp_mid2_v_reg_659}, {tmp_3_0_2_fu_438_p2}};

assign tmp_9_fu_466_p3 = {{p_v_reg_684}, {tmp_3_0_2_reg_702}};

assign tmp_fu_544_p3 = {{tmp_mid2_v_reg_659_pp0_iter1_reg}, {5'd0}};

assign tmp_mid2_v_fu_361_p3 = ((exitcond_fu_341_p2[0:0] === 1'b1) ? i_s_fu_355_p2 : ap_phi_mux_i_phi_fu_264_p4);

assign tmp_s_fu_566_p2 = (p_shl_cast_fu_551_p1 - p_shl1_cast_fu_562_p1);

endmodule //convolution_kernel
