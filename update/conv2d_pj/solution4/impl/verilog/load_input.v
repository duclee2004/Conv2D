// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_r_Addr_A,
        input_r_EN_A,
        input_r_WEN_A,
        input_r_Din_A,
        input_r_Dout_A,
        input_r_Addr_B,
        input_r_EN_B,
        input_r_WEN_B,
        input_r_Din_B,
        input_r_Dout_B,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_pp0_stage0 = 18'd2;
parameter    ap_ST_fsm_pp0_stage1 = 18'd4;
parameter    ap_ST_fsm_pp0_stage2 = 18'd8;
parameter    ap_ST_fsm_pp0_stage3 = 18'd16;
parameter    ap_ST_fsm_pp0_stage4 = 18'd32;
parameter    ap_ST_fsm_pp0_stage5 = 18'd64;
parameter    ap_ST_fsm_pp0_stage6 = 18'd128;
parameter    ap_ST_fsm_pp0_stage7 = 18'd256;
parameter    ap_ST_fsm_pp0_stage8 = 18'd512;
parameter    ap_ST_fsm_pp0_stage9 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 18'd65536;
parameter    ap_ST_fsm_state19 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] input_r_Addr_A;
output   input_r_EN_A;
output  [3:0] input_r_WEN_A;
output  [31:0] input_r_Din_A;
input  [31:0] input_r_Dout_A;
output  [31:0] input_r_Addr_B;
output   input_r_EN_B;
output  [3:0] input_r_WEN_B;
output  [31:0] input_r_Din_B;
input  [31:0] input_r_Dout_B;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [31:0] buffer_r_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_EN_A;
reg input_r_EN_B;
reg[9:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[9:0] buffer_r_address1;
reg buffer_r_ce1;
reg buffer_r_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_reg_640;
wire   [0:0] exitcond1_fu_651_p2;
reg   [0:0] exitcond1_reg_1111;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state18_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] i_1_fu_657_p2;
reg   [5:0] i_1_reg_1115;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] tmp_fu_663_p3;
reg   [10:0] tmp_reg_1120;
wire   [63:0] tmp_2_fu_671_p1;
reg   [63:0] tmp_2_reg_1154;
wire   [63:0] tmp_4_fu_682_p3;
reg   [63:0] tmp_4_reg_1164;
wire   [63:0] tmp_6_fu_696_p3;
reg   [63:0] tmp_6_reg_1174;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] tmp_8_fu_710_p3;
reg   [63:0] tmp_8_reg_1184;
wire   [63:0] tmp_s_fu_724_p3;
reg   [63:0] tmp_s_reg_1194;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] tmp_11_fu_738_p3;
reg   [63:0] tmp_11_reg_1204;
wire   [63:0] tmp_13_fu_752_p3;
reg   [63:0] tmp_13_reg_1214;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [63:0] tmp_15_fu_766_p3;
reg   [63:0] tmp_15_reg_1224;
wire   [63:0] tmp_17_fu_780_p3;
reg   [63:0] tmp_17_reg_1234;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [63:0] tmp_19_fu_794_p3;
reg   [63:0] tmp_19_reg_1244;
wire   [63:0] tmp_21_fu_808_p3;
reg   [63:0] tmp_21_reg_1254;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [63:0] tmp_23_fu_822_p3;
reg   [63:0] tmp_23_reg_1264;
wire   [63:0] tmp_25_fu_836_p3;
reg   [63:0] tmp_25_reg_1274;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [63:0] tmp_27_fu_850_p3;
reg   [63:0] tmp_27_reg_1284;
wire   [63:0] tmp_29_fu_864_p3;
reg   [63:0] tmp_29_reg_1294;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [63:0] tmp_31_fu_878_p3;
reg   [63:0] tmp_31_reg_1304;
wire   [63:0] tmp_33_fu_892_p3;
reg   [63:0] tmp_33_reg_1314;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [63:0] tmp_35_fu_906_p3;
reg   [63:0] tmp_35_reg_1324;
wire   [63:0] tmp_37_fu_920_p3;
reg   [63:0] tmp_37_reg_1334;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [63:0] tmp_39_fu_934_p3;
reg   [63:0] tmp_39_reg_1344;
wire   [63:0] tmp_41_fu_948_p3;
reg   [63:0] tmp_41_reg_1354;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [63:0] tmp_43_fu_962_p3;
reg   [63:0] tmp_43_reg_1364;
wire   [63:0] tmp_45_fu_976_p3;
reg   [63:0] tmp_45_reg_1374;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [63:0] tmp_47_fu_990_p3;
reg   [63:0] tmp_47_reg_1384;
wire   [63:0] tmp_49_fu_1004_p3;
reg   [63:0] tmp_49_reg_1394;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire   [63:0] tmp_51_fu_1018_p3;
reg   [63:0] tmp_51_reg_1404;
wire   [63:0] tmp_53_fu_1032_p3;
reg   [63:0] tmp_53_reg_1414;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire   [63:0] tmp_55_fu_1046_p3;
reg   [63:0] tmp_55_reg_1424;
wire   [63:0] tmp_57_fu_1060_p3;
reg   [63:0] tmp_57_reg_1434;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire   [63:0] tmp_59_fu_1074_p3;
reg   [63:0] tmp_59_reg_1444;
wire   [63:0] tmp_61_fu_1088_p3;
reg   [63:0] tmp_61_reg_1454;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire   [63:0] tmp_63_fu_1102_p3;
reg   [63:0] tmp_63_reg_1464;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage15_subdone;
reg   [5:0] ap_phi_mux_i_phi_fu_644_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
reg   [31:0] input_r_Addr_A_orig;
reg   [31:0] input_r_Addr_B_orig;
wire   [10:0] tmp_3_fu_676_p2;
wire   [10:0] tmp_5_fu_691_p2;
wire   [10:0] tmp_7_fu_705_p2;
wire   [10:0] tmp_9_fu_719_p2;
wire   [10:0] tmp_10_fu_733_p2;
wire   [10:0] tmp_12_fu_747_p2;
wire   [10:0] tmp_14_fu_761_p2;
wire   [10:0] tmp_16_fu_775_p2;
wire   [10:0] tmp_18_fu_789_p2;
wire   [10:0] tmp_20_fu_803_p2;
wire   [10:0] tmp_22_fu_817_p2;
wire   [10:0] tmp_24_fu_831_p2;
wire   [10:0] tmp_26_fu_845_p2;
wire   [10:0] tmp_28_fu_859_p2;
wire   [10:0] tmp_30_fu_873_p2;
wire   [10:0] tmp_32_fu_887_p2;
wire   [10:0] tmp_34_fu_901_p2;
wire   [10:0] tmp_36_fu_915_p2;
wire   [10:0] tmp_38_fu_929_p2;
wire   [10:0] tmp_40_fu_943_p2;
wire   [10:0] tmp_42_fu_957_p2;
wire   [10:0] tmp_44_fu_971_p2;
wire   [10:0] tmp_46_fu_985_p2;
wire   [10:0] tmp_48_fu_999_p2;
wire   [10:0] tmp_50_fu_1013_p2;
wire   [10:0] tmp_52_fu_1027_p2;
wire   [10:0] tmp_54_fu_1041_p2;
wire   [10:0] tmp_56_fu_1055_p2;
wire   [10:0] tmp_58_fu_1069_p2;
wire   [10:0] tmp_60_fu_1083_p2;
wire   [10:0] tmp_62_fu_1097_p2;
wire    ap_CS_fsm_state19;
reg   [17:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_640 <= i_1_reg_1115;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_640 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_1111 <= exitcond1_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_1115 <= i_1_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_11_reg_1204[10 : 5] <= tmp_11_fu_738_p3[10 : 5];
        tmp_s_reg_1194[10 : 5] <= tmp_s_fu_724_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_13_reg_1214[10 : 5] <= tmp_13_fu_752_p3[10 : 5];
        tmp_15_reg_1224[10 : 5] <= tmp_15_fu_766_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_17_reg_1234[10 : 5] <= tmp_17_fu_780_p3[10 : 5];
        tmp_19_reg_1244[10 : 5] <= tmp_19_fu_794_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp_21_reg_1254[10 : 5] <= tmp_21_fu_808_p3[10 : 5];
        tmp_23_reg_1264[10 : 5] <= tmp_23_fu_822_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_25_reg_1274[10 : 5] <= tmp_25_fu_836_p3[10 : 5];
        tmp_27_reg_1284[10 : 5] <= tmp_27_fu_850_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_29_reg_1294[10 : 5] <= tmp_29_fu_864_p3[10 : 5];
        tmp_31_reg_1304[10 : 5] <= tmp_31_fu_878_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_651_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_1154[10 : 5] <= tmp_2_fu_671_p1[10 : 5];
        tmp_4_reg_1164[10 : 5] <= tmp_4_fu_682_p3[10 : 5];
        tmp_reg_1120[10 : 5] <= tmp_fu_663_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_33_reg_1314[10 : 5] <= tmp_33_fu_892_p3[10 : 5];
        tmp_35_reg_1324[10 : 5] <= tmp_35_fu_906_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        tmp_37_reg_1334[10 : 5] <= tmp_37_fu_920_p3[10 : 5];
        tmp_39_reg_1344[10 : 5] <= tmp_39_fu_934_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        tmp_41_reg_1354[10 : 5] <= tmp_41_fu_948_p3[10 : 5];
        tmp_43_reg_1364[10 : 5] <= tmp_43_fu_962_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        tmp_45_reg_1374[10 : 5] <= tmp_45_fu_976_p3[10 : 5];
        tmp_47_reg_1384[10 : 5] <= tmp_47_fu_990_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        tmp_49_reg_1394[10 : 5] <= tmp_49_fu_1004_p3[10 : 5];
        tmp_51_reg_1404[10 : 5] <= tmp_51_fu_1018_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        tmp_53_reg_1414[10 : 5] <= tmp_53_fu_1032_p3[10 : 5];
        tmp_55_reg_1424[10 : 5] <= tmp_55_fu_1046_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        tmp_57_reg_1434[10 : 5] <= tmp_57_fu_1060_p3[10 : 5];
        tmp_59_reg_1444[10 : 5] <= tmp_59_fu_1074_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        tmp_61_reg_1454[10 : 5] <= tmp_61_fu_1088_p3[10 : 5];
        tmp_63_reg_1464[10 : 5] <= tmp_63_fu_1102_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_6_reg_1174[10 : 5] <= tmp_6_fu_696_p3[10 : 5];
        tmp_8_reg_1184[10 : 5] <= tmp_8_fu_710_p3[10 : 5];
    end
end

always @ (*) begin
    if ((exitcond1_fu_651_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_644_p4 = i_1_reg_1115;
    end else begin
        ap_phi_mux_i_phi_fu_644_p4 = i_reg_640;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_r_address0 = tmp_61_reg_1454;
    end else if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        buffer_r_address0 = tmp_57_reg_1434;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        buffer_r_address0 = tmp_53_reg_1414;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        buffer_r_address0 = tmp_49_reg_1394;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        buffer_r_address0 = tmp_45_reg_1374;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        buffer_r_address0 = tmp_41_reg_1354;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        buffer_r_address0 = tmp_37_reg_1334;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        buffer_r_address0 = tmp_33_reg_1314;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        buffer_r_address0 = tmp_29_reg_1294;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        buffer_r_address0 = tmp_25_reg_1274;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        buffer_r_address0 = tmp_21_reg_1254;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        buffer_r_address0 = tmp_17_reg_1234;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        buffer_r_address0 = tmp_13_reg_1214;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        buffer_r_address0 = tmp_s_reg_1194;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        buffer_r_address0 = tmp_6_reg_1174;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_r_address0 = tmp_2_reg_1154;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_r_address1 = tmp_63_reg_1464;
    end else if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        buffer_r_address1 = tmp_59_reg_1444;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        buffer_r_address1 = tmp_55_reg_1424;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        buffer_r_address1 = tmp_51_reg_1404;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        buffer_r_address1 = tmp_47_reg_1384;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        buffer_r_address1 = tmp_43_reg_1364;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        buffer_r_address1 = tmp_39_reg_1344;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        buffer_r_address1 = tmp_35_reg_1324;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        buffer_r_address1 = tmp_31_reg_1304;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        buffer_r_address1 = tmp_27_reg_1284;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        buffer_r_address1 = tmp_23_reg_1264;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        buffer_r_address1 = tmp_19_reg_1244;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        buffer_r_address1 = tmp_15_reg_1224;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        buffer_r_address1 = tmp_11_reg_1204;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        buffer_r_address1 = tmp_8_reg_1184;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_r_address1 = tmp_4_reg_1164;
    end else begin
        buffer_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((exitcond1_reg_1111 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond1_reg_1111 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_1111 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            input_r_Addr_A_orig = tmp_61_fu_1088_p3;
        end else if (((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            input_r_Addr_A_orig = tmp_57_fu_1060_p3;
        end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
            input_r_Addr_A_orig = tmp_53_fu_1032_p3;
        end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            input_r_Addr_A_orig = tmp_49_fu_1004_p3;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            input_r_Addr_A_orig = tmp_45_fu_976_p3;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            input_r_Addr_A_orig = tmp_41_fu_948_p3;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            input_r_Addr_A_orig = tmp_37_fu_920_p3;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            input_r_Addr_A_orig = tmp_33_fu_892_p3;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            input_r_Addr_A_orig = tmp_29_fu_864_p3;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            input_r_Addr_A_orig = tmp_25_fu_836_p3;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_r_Addr_A_orig = tmp_21_fu_808_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_Addr_A_orig = tmp_17_fu_780_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_Addr_A_orig = tmp_13_fu_752_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_Addr_A_orig = tmp_s_fu_724_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_Addr_A_orig = tmp_6_fu_696_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_Addr_A_orig = tmp_2_fu_671_p1;
        end else begin
            input_r_Addr_A_orig = 'bx;
        end
    end else begin
        input_r_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            input_r_Addr_B_orig = tmp_63_fu_1102_p3;
        end else if (((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            input_r_Addr_B_orig = tmp_59_fu_1074_p3;
        end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
            input_r_Addr_B_orig = tmp_55_fu_1046_p3;
        end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            input_r_Addr_B_orig = tmp_51_fu_1018_p3;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            input_r_Addr_B_orig = tmp_47_fu_990_p3;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            input_r_Addr_B_orig = tmp_43_fu_962_p3;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            input_r_Addr_B_orig = tmp_39_fu_934_p3;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            input_r_Addr_B_orig = tmp_35_fu_906_p3;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            input_r_Addr_B_orig = tmp_31_fu_878_p3;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            input_r_Addr_B_orig = tmp_27_fu_850_p3;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_r_Addr_B_orig = tmp_23_fu_822_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_Addr_B_orig = tmp_19_fu_794_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_Addr_B_orig = tmp_15_fu_766_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_Addr_B_orig = tmp_11_fu_738_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_Addr_B_orig = tmp_8_fu_710_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_Addr_B_orig = tmp_4_fu_682_p3;
        end else begin
            input_r_Addr_B_orig = 'bx;
        end
    end else begin
        input_r_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_r_EN_A = 1'b1;
    end else begin
        input_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_r_EN_B = 1'b1;
    end else begin
        input_r_EN_B = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_651_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond1_fu_651_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_r_d0 = input_r_Dout_A;

assign buffer_r_d1 = input_r_Dout_B;

assign exitcond1_fu_651_p2 = ((ap_phi_mux_i_phi_fu_644_p4 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_fu_657_p2 = (ap_phi_mux_i_phi_fu_644_p4 + 6'd1);

assign input_r_Addr_A = input_r_Addr_A_orig << 32'd2;

assign input_r_Addr_B = input_r_Addr_B_orig << 32'd2;

assign input_r_Din_A = 32'd0;

assign input_r_Din_B = 32'd0;

assign input_r_WEN_A = 4'd0;

assign input_r_WEN_B = 4'd0;

assign tmp_10_fu_733_p2 = (tmp_reg_1120 | 11'd5);

assign tmp_11_fu_738_p3 = {{53'd0}, {tmp_10_fu_733_p2}};

assign tmp_12_fu_747_p2 = (tmp_reg_1120 | 11'd6);

assign tmp_13_fu_752_p3 = {{53'd0}, {tmp_12_fu_747_p2}};

assign tmp_14_fu_761_p2 = (tmp_reg_1120 | 11'd7);

assign tmp_15_fu_766_p3 = {{53'd0}, {tmp_14_fu_761_p2}};

assign tmp_16_fu_775_p2 = (tmp_reg_1120 | 11'd8);

assign tmp_17_fu_780_p3 = {{53'd0}, {tmp_16_fu_775_p2}};

assign tmp_18_fu_789_p2 = (tmp_reg_1120 | 11'd9);

assign tmp_19_fu_794_p3 = {{53'd0}, {tmp_18_fu_789_p2}};

assign tmp_20_fu_803_p2 = (tmp_reg_1120 | 11'd10);

assign tmp_21_fu_808_p3 = {{53'd0}, {tmp_20_fu_803_p2}};

assign tmp_22_fu_817_p2 = (tmp_reg_1120 | 11'd11);

assign tmp_23_fu_822_p3 = {{53'd0}, {tmp_22_fu_817_p2}};

assign tmp_24_fu_831_p2 = (tmp_reg_1120 | 11'd12);

assign tmp_25_fu_836_p3 = {{53'd0}, {tmp_24_fu_831_p2}};

assign tmp_26_fu_845_p2 = (tmp_reg_1120 | 11'd13);

assign tmp_27_fu_850_p3 = {{53'd0}, {tmp_26_fu_845_p2}};

assign tmp_28_fu_859_p2 = (tmp_reg_1120 | 11'd14);

assign tmp_29_fu_864_p3 = {{53'd0}, {tmp_28_fu_859_p2}};

assign tmp_2_fu_671_p1 = tmp_fu_663_p3;

assign tmp_30_fu_873_p2 = (tmp_reg_1120 | 11'd15);

assign tmp_31_fu_878_p3 = {{53'd0}, {tmp_30_fu_873_p2}};

assign tmp_32_fu_887_p2 = (tmp_reg_1120 | 11'd16);

assign tmp_33_fu_892_p3 = {{53'd0}, {tmp_32_fu_887_p2}};

assign tmp_34_fu_901_p2 = (tmp_reg_1120 | 11'd17);

assign tmp_35_fu_906_p3 = {{53'd0}, {tmp_34_fu_901_p2}};

assign tmp_36_fu_915_p2 = (tmp_reg_1120 | 11'd18);

assign tmp_37_fu_920_p3 = {{53'd0}, {tmp_36_fu_915_p2}};

assign tmp_38_fu_929_p2 = (tmp_reg_1120 | 11'd19);

assign tmp_39_fu_934_p3 = {{53'd0}, {tmp_38_fu_929_p2}};

assign tmp_3_fu_676_p2 = (tmp_fu_663_p3 | 11'd1);

assign tmp_40_fu_943_p2 = (tmp_reg_1120 | 11'd20);

assign tmp_41_fu_948_p3 = {{53'd0}, {tmp_40_fu_943_p2}};

assign tmp_42_fu_957_p2 = (tmp_reg_1120 | 11'd21);

assign tmp_43_fu_962_p3 = {{53'd0}, {tmp_42_fu_957_p2}};

assign tmp_44_fu_971_p2 = (tmp_reg_1120 | 11'd22);

assign tmp_45_fu_976_p3 = {{53'd0}, {tmp_44_fu_971_p2}};

assign tmp_46_fu_985_p2 = (tmp_reg_1120 | 11'd23);

assign tmp_47_fu_990_p3 = {{53'd0}, {tmp_46_fu_985_p2}};

assign tmp_48_fu_999_p2 = (tmp_reg_1120 | 11'd24);

assign tmp_49_fu_1004_p3 = {{53'd0}, {tmp_48_fu_999_p2}};

assign tmp_4_fu_682_p3 = {{53'd0}, {tmp_3_fu_676_p2}};

assign tmp_50_fu_1013_p2 = (tmp_reg_1120 | 11'd25);

assign tmp_51_fu_1018_p3 = {{53'd0}, {tmp_50_fu_1013_p2}};

assign tmp_52_fu_1027_p2 = (tmp_reg_1120 | 11'd26);

assign tmp_53_fu_1032_p3 = {{53'd0}, {tmp_52_fu_1027_p2}};

assign tmp_54_fu_1041_p2 = (tmp_reg_1120 | 11'd27);

assign tmp_55_fu_1046_p3 = {{53'd0}, {tmp_54_fu_1041_p2}};

assign tmp_56_fu_1055_p2 = (tmp_reg_1120 | 11'd28);

assign tmp_57_fu_1060_p3 = {{53'd0}, {tmp_56_fu_1055_p2}};

assign tmp_58_fu_1069_p2 = (tmp_reg_1120 | 11'd29);

assign tmp_59_fu_1074_p3 = {{53'd0}, {tmp_58_fu_1069_p2}};

assign tmp_5_fu_691_p2 = (tmp_reg_1120 | 11'd2);

assign tmp_60_fu_1083_p2 = (tmp_reg_1120 | 11'd30);

assign tmp_61_fu_1088_p3 = {{53'd0}, {tmp_60_fu_1083_p2}};

assign tmp_62_fu_1097_p2 = (tmp_reg_1120 | 11'd31);

assign tmp_63_fu_1102_p3 = {{53'd0}, {tmp_62_fu_1097_p2}};

assign tmp_6_fu_696_p3 = {{53'd0}, {tmp_5_fu_691_p2}};

assign tmp_7_fu_705_p2 = (tmp_reg_1120 | 11'd3);

assign tmp_8_fu_710_p3 = {{53'd0}, {tmp_7_fu_705_p2}};

assign tmp_9_fu_719_p2 = (tmp_reg_1120 | 11'd4);

assign tmp_fu_663_p3 = {{ap_phi_mux_i_phi_fu_644_p4}, {5'd0}};

assign tmp_s_fu_724_p3 = {{53'd0}, {tmp_9_fu_719_p2}};

always @ (posedge ap_clk) begin
    tmp_reg_1120[4:0] <= 5'b00000;
    tmp_2_reg_1154[4:0] <= 5'b00000;
    tmp_2_reg_1154[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_4_reg_1164[4:0] <= 5'b00001;
    tmp_4_reg_1164[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_6_reg_1174[4:0] <= 5'b00010;
    tmp_6_reg_1174[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_8_reg_1184[4:0] <= 5'b00011;
    tmp_8_reg_1184[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_s_reg_1194[4:0] <= 5'b00100;
    tmp_s_reg_1194[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_11_reg_1204[4:0] <= 5'b00101;
    tmp_11_reg_1204[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_13_reg_1214[4:0] <= 5'b00110;
    tmp_13_reg_1214[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_15_reg_1224[4:0] <= 5'b00111;
    tmp_15_reg_1224[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_17_reg_1234[4:0] <= 5'b01000;
    tmp_17_reg_1234[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_19_reg_1244[4:0] <= 5'b01001;
    tmp_19_reg_1244[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_21_reg_1254[4:0] <= 5'b01010;
    tmp_21_reg_1254[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_23_reg_1264[4:0] <= 5'b01011;
    tmp_23_reg_1264[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_25_reg_1274[4:0] <= 5'b01100;
    tmp_25_reg_1274[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_27_reg_1284[4:0] <= 5'b01101;
    tmp_27_reg_1284[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_29_reg_1294[4:0] <= 5'b01110;
    tmp_29_reg_1294[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_31_reg_1304[4:0] <= 5'b01111;
    tmp_31_reg_1304[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_33_reg_1314[4:0] <= 5'b10000;
    tmp_33_reg_1314[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_35_reg_1324[4:0] <= 5'b10001;
    tmp_35_reg_1324[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_37_reg_1334[4:0] <= 5'b10010;
    tmp_37_reg_1334[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_39_reg_1344[4:0] <= 5'b10011;
    tmp_39_reg_1344[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_41_reg_1354[4:0] <= 5'b10100;
    tmp_41_reg_1354[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_43_reg_1364[4:0] <= 5'b10101;
    tmp_43_reg_1364[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_45_reg_1374[4:0] <= 5'b10110;
    tmp_45_reg_1374[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_47_reg_1384[4:0] <= 5'b10111;
    tmp_47_reg_1384[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_49_reg_1394[4:0] <= 5'b11000;
    tmp_49_reg_1394[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_51_reg_1404[4:0] <= 5'b11001;
    tmp_51_reg_1404[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_53_reg_1414[4:0] <= 5'b11010;
    tmp_53_reg_1414[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_55_reg_1424[4:0] <= 5'b11011;
    tmp_55_reg_1424[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_57_reg_1434[4:0] <= 5'b11100;
    tmp_57_reg_1434[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_59_reg_1444[4:0] <= 5'b11101;
    tmp_59_reg_1444[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_61_reg_1454[4:0] <= 5'b11110;
    tmp_61_reg_1454[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_63_reg_1464[4:0] <= 5'b11111;
    tmp_63_reg_1464[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //load_input
