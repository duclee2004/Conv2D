-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_EN_A : OUT STD_LOGIC;
    kernel_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_EN_B : OUT STD_LOGIC;
    kernel_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_249 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_260 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond_flatten_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond_flatten_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_631_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_335_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next_reg_635 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_347_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_646 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_646_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_s_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_s_reg_654 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_fu_361_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_reg_659 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_reg_659_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_672 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_fu_407_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_v_reg_684 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_2_mid2_v_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_2_mid2_v_reg_690 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_0_2_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_0_2_reg_702 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_2_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_253_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_264_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_j_phi_fu_276_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_73_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_74_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_72_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_73_cast_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_369_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_388_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_mid1_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_2_mid2_v_v_cas_fu_413_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_426_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_443_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_455_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_66_fu_477_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_fu_488_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_75_fu_499_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_544_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_555_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_551_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_562_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_566_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_cast_fu_572_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_575_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_260 <= tmp_mid2_v_reg_659;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_260 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_249 <= indvar_flatten_next_reg_635;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_249 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_272 <= j_1_reg_672;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_272 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_631 <= exitcond_flatten_fu_329_p2;
                exitcond_flatten_reg_631_pp0_iter1_reg <= exitcond_flatten_reg_631;
                j_mid2_reg_646_pp0_iter1_reg <= j_mid2_reg_646;
                tmp_mid2_v_reg_659_pp0_iter1_reg <= tmp_mid2_v_reg_659;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_640 <= exitcond_fu_341_p2;
                i_s_reg_654 <= i_s_fu_355_p2;
                j_mid2_reg_646 <= j_mid2_fu_347_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_635 <= indvar_flatten_next_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_329_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_1_reg_672 <= j_1_fu_382_p2;
                tmp_mid2_v_reg_659 <= tmp_mid2_v_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_v_reg_684 <= p_v_fu_407_p3;
                tmp_1_2_mid2_v_reg_690 <= tmp_1_2_mid2_v_fu_420_p2;
                tmp_3_0_2_reg_702 <= tmp_3_0_2_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_283 <= buffer_r_q0;
                reg_287 <= kernel_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_291 <= buffer_r_q1;
                reg_295 <= kernel_Dout_B;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_311 <= grp_fu_299_p2;
                reg_315 <= grp_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_325 <= grp_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_631_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sum_2_2_2_reg_748 <= sum_2_2_2_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp1_reg_738 <= tmp1_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_631_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                tmp_6_2_2_reg_743 <= grp_fu_299_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_329_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_329_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_329_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_329_p2)
    begin
        if ((exitcond_flatten_fu_329_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_264_p4_assign_proc : process(i_reg_260, exitcond_flatten_reg_631, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_mid2_v_reg_659, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_264_p4 <= tmp_mid2_v_reg_659;
        else 
            ap_phi_mux_i_phi_fu_264_p4 <= i_reg_260;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_253_p4_assign_proc : process(indvar_flatten_reg_249, exitcond_flatten_reg_631, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten_next_reg_635, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_253_p4 <= indvar_flatten_next_reg_635;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_253_p4 <= indvar_flatten_reg_249;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_276_p4_assign_proc : process(j_reg_272, exitcond_flatten_reg_631, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, j_1_reg_672, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_631 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_276_p4 <= j_1_reg_672;
        else 
            ap_phi_mux_j_phi_fu_276_p4 <= j_reg_272;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_64_fu_377_p1, ap_block_pp0_stage1, tmp_73_fu_450_p1, tmp_70_fu_461_p1, ap_block_pp0_stage2, tmp_67_fu_483_p1, ap_block_pp0_stage3, tmp_76_fu_505_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                buffer_r_address0 <= tmp_76_fu_505_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buffer_r_address0 <= tmp_67_fu_483_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buffer_r_address0 <= tmp_70_fu_461_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                buffer_r_address0 <= tmp_73_fu_450_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                buffer_r_address0 <= tmp_64_fu_377_p1(10 - 1 downto 0);
            else 
                buffer_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            buffer_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_69_fu_396_p1, tmp_65_fu_433_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, tmp_74_fu_472_p1, ap_block_pp0_stage3, tmp_72_fu_494_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buffer_r_address1 <= tmp_72_fu_494_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buffer_r_address1 <= tmp_74_fu_472_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                buffer_r_address1 <= tmp_65_fu_433_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                buffer_r_address1 <= tmp_69_fu_396_p1(10 - 1 downto 0);
            else 
                buffer_r_address1 <= "XXXXXXXXXX";
            end if;
        else 
            buffer_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            buffer_r_ce1 <= ap_const_logic_1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_329_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_253_p4 = ap_const_lv10_384) else "0";
    exitcond_fu_341_p2 <= "1" when (ap_phi_mux_j_phi_fu_276_p4 = ap_const_lv5_1E) else "0";
    grp_fu_299_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_287) * signed(reg_283))), 32));
    grp_fu_305_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_295) * signed(reg_291))), 32));
    grp_fu_319_p2 <= std_logic_vector(unsigned(reg_315) + unsigned(reg_311));
    i_2_mid1_fu_401_p2 <= std_logic_vector(unsigned(i_reg_260) + unsigned(ap_const_lv5_2));
    i_s_fu_355_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_264_p4) + unsigned(ap_const_lv5_1));
    indvar_flatten_next_fu_335_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_253_p4) + unsigned(ap_const_lv10_1));
    j_1_fu_382_p2 <= std_logic_vector(unsigned(j_mid2_fu_347_p3) + unsigned(ap_const_lv5_1));
    j_mid2_fu_347_p3 <= 
        ap_const_lv5_0 when (exitcond_fu_341_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_276_p4;
    kernel_Addr_A <= std_logic_vector(shift_left(unsigned(kernel_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    kernel_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_Addr_A_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_Addr_A_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_Addr_A_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            else 
                kernel_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            kernel_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    kernel_Addr_B <= std_logic_vector(shift_left(unsigned(kernel_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    kernel_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_Addr_B_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_Addr_B_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_Addr_B_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_Addr_B_orig <= ap_const_lv64_1(32 - 1 downto 0);
            else 
                kernel_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            kernel_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    kernel_Din_A <= ap_const_lv32_0;
    kernel_Din_B <= ap_const_lv32_0;

    kernel_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_EN_A <= ap_const_logic_1;
        else 
            kernel_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    kernel_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_EN_B <= ap_const_logic_1;
        else 
            kernel_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    kernel_WEN_A <= ap_const_lv4_0;
    kernel_WEN_B <= ap_const_lv4_0;
    output_r_address0 <= tmp_73_cast_fu_581_p1(10 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= sum_2_2_2_reg_748;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_631_pp0_iter1_reg)
    begin
        if (((exitcond_flatten_reg_631_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_555_p3),11));
    p_shl_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_544_p3),11));
    p_v_fu_407_p3 <= 
        i_2_mid1_fu_401_p2 when (exitcond_reg_640(0) = '1') else 
        i_s_reg_654;
    sum_2_2_2_fu_539_p2 <= std_logic_vector(unsigned(tmp1_reg_738) + unsigned(tmp4_fu_533_p2));
    tmp1_fu_516_p2 <= std_logic_vector(unsigned(reg_325) + unsigned(tmp3_fu_510_p2));
    tmp3_fu_510_p2 <= std_logic_vector(unsigned(reg_315) + unsigned(reg_311));
    tmp4_fu_533_p2 <= std_logic_vector(unsigned(reg_325) + unsigned(tmp6_fu_527_p2));
    tmp6_fu_527_p2 <= std_logic_vector(unsigned(reg_311) + unsigned(tmp7_fu_522_p2));
    tmp7_fu_522_p2 <= std_logic_vector(unsigned(tmp_6_2_2_reg_743) + unsigned(reg_315));
    tmp_1_2_mid2_v_fu_420_p2 <= std_logic_vector(unsigned(i_reg_260) + unsigned(tmp_1_2_mid2_v_v_cas_fu_413_p3));
    tmp_1_2_mid2_v_v_cas_fu_413_p3 <= 
        ap_const_lv5_3 when (exitcond_reg_640(0) = '1') else 
        ap_const_lv5_2;
    tmp_1_fu_555_p3 <= (tmp_mid2_v_reg_659_pp0_iter1_reg & ap_const_lv1_0);
    tmp_2_fu_369_p3 <= (tmp_mid2_v_fu_361_p3 & j_mid2_fu_347_p3);
    tmp_3_0_2_fu_438_p2 <= std_logic_vector(unsigned(j_mid2_reg_646) + unsigned(ap_const_lv5_2));
    tmp_4_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_646_pp0_iter1_reg),11));
    tmp_4_fu_426_p3 <= (p_v_fu_407_p3 & j_mid2_reg_646);
    tmp_5_fu_388_p3 <= (tmp_mid2_v_fu_361_p3 & j_1_fu_382_p2);
    tmp_64_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_369_p3),64));
    tmp_65_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_426_p3),64));
    tmp_66_fu_477_p3 <= (tmp_1_2_mid2_v_reg_690 & j_mid2_reg_646);
    tmp_67_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_477_p3),64));
    tmp_68_fu_575_p2 <= std_logic_vector(unsigned(tmp_s_fu_566_p2) + unsigned(tmp_4_cast_fu_572_p1));
    tmp_69_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_388_p3),64));
    tmp_70_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_455_p3),64));
    tmp_71_fu_488_p3 <= (tmp_1_2_mid2_v_reg_690 & j_1_reg_672);
    tmp_72_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_488_p3),64));
    tmp_73_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_575_p2),64));
    tmp_73_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_443_p3),64));
    tmp_74_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_466_p3),64));
    tmp_75_fu_499_p3 <= (tmp_1_2_mid2_v_reg_690 & tmp_3_0_2_reg_702);
    tmp_76_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_499_p3),64));
    tmp_7_fu_455_p3 <= (p_v_reg_684 & j_1_reg_672);
    tmp_8_fu_443_p3 <= (tmp_mid2_v_reg_659 & tmp_3_0_2_fu_438_p2);
    tmp_9_fu_466_p3 <= (p_v_reg_684 & tmp_3_0_2_reg_702);
    tmp_fu_544_p3 <= (tmp_mid2_v_reg_659_pp0_iter1_reg & ap_const_lv5_0);
    tmp_mid2_v_fu_361_p3 <= 
        i_s_fu_355_p2 when (exitcond_fu_341_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_264_p4;
    tmp_s_fu_566_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_551_p1) - unsigned(p_shl1_cast_fu_562_p1));
end behav;
