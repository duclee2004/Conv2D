// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convolution_kernel_HH_
#define _convolution_kernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct convolution_kernel : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > buffer_r_address0;
    sc_out< sc_logic > buffer_r_ce0;
    sc_in< sc_lv<32> > buffer_r_q0;
    sc_out< sc_lv<10> > buffer_r_address1;
    sc_out< sc_logic > buffer_r_ce1;
    sc_in< sc_lv<32> > buffer_r_q1;
    sc_out< sc_lv<32> > kernel_Addr_A;
    sc_out< sc_logic > kernel_EN_A;
    sc_out< sc_lv<4> > kernel_WEN_A;
    sc_out< sc_lv<32> > kernel_Din_A;
    sc_in< sc_lv<32> > kernel_Dout_A;
    sc_out< sc_lv<32> > kernel_Addr_B;
    sc_out< sc_logic > kernel_EN_B;
    sc_out< sc_lv<4> > kernel_WEN_B;
    sc_out< sc_lv<32> > kernel_Din_B;
    sc_in< sc_lv<32> > kernel_Dout_B;
    sc_out< sc_lv<10> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;


    // Module declarations
    convolution_kernel(sc_module_name name);
    SC_HAS_PROCESS(convolution_kernel);

    ~convolution_kernel();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten_reg_249;
    sc_signal< sc_lv<5> > i_reg_260;
    sc_signal< sc_lv<5> > j_reg_272;
    sc_signal< sc_lv<32> > reg_283;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_631;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state5_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage3_iter1;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state6_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > reg_287;
    sc_signal< sc_lv<32> > reg_291;
    sc_signal< sc_lv<32> > reg_295;
    sc_signal< sc_lv<32> > grp_fu_299_p2;
    sc_signal< sc_lv<32> > reg_311;
    sc_signal< sc_lv<32> > grp_fu_305_p2;
    sc_signal< sc_lv<32> > reg_315;
    sc_signal< sc_lv<32> > grp_fu_319_p2;
    sc_signal< sc_lv<32> > reg_325;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_329_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_631_pp0_iter1_reg;
    sc_signal< sc_lv<10> > indvar_flatten_next_fu_335_p2;
    sc_signal< sc_lv<10> > indvar_flatten_next_reg_635;
    sc_signal< sc_lv<1> > exitcond_fu_341_p2;
    sc_signal< sc_lv<1> > exitcond_reg_640;
    sc_signal< sc_lv<5> > j_mid2_fu_347_p3;
    sc_signal< sc_lv<5> > j_mid2_reg_646;
    sc_signal< sc_lv<5> > j_mid2_reg_646_pp0_iter1_reg;
    sc_signal< sc_lv<5> > i_s_fu_355_p2;
    sc_signal< sc_lv<5> > i_s_reg_654;
    sc_signal< sc_lv<5> > tmp_mid2_v_fu_361_p3;
    sc_signal< sc_lv<5> > tmp_mid2_v_reg_659;
    sc_signal< sc_lv<5> > tmp_mid2_v_reg_659_pp0_iter1_reg;
    sc_signal< sc_lv<5> > j_1_fu_382_p2;
    sc_signal< sc_lv<5> > j_1_reg_672;
    sc_signal< sc_lv<5> > p_v_fu_407_p3;
    sc_signal< sc_lv<5> > p_v_reg_684;
    sc_signal< sc_lv<5> > tmp_1_2_mid2_v_fu_420_p2;
    sc_signal< sc_lv<5> > tmp_1_2_mid2_v_reg_690;
    sc_signal< sc_lv<5> > tmp_3_0_2_fu_438_p2;
    sc_signal< sc_lv<5> > tmp_3_0_2_reg_702;
    sc_signal< sc_lv<32> > tmp1_fu_516_p2;
    sc_signal< sc_lv<32> > tmp1_reg_738;
    sc_signal< sc_lv<32> > tmp_6_2_2_reg_743;
    sc_signal< sc_lv<32> > sum_2_2_2_fu_539_p2;
    sc_signal< sc_lv<32> > sum_2_2_2_reg_748;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_lv<10> > ap_phi_mux_indvar_flatten_phi_fu_253_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<5> > ap_phi_mux_i_phi_fu_264_p4;
    sc_signal< sc_lv<5> > ap_phi_mux_j_phi_fu_276_p4;
    sc_signal< sc_lv<64> > tmp_64_fu_377_p1;
    sc_signal< sc_lv<64> > tmp_69_fu_396_p1;
    sc_signal< sc_lv<64> > tmp_65_fu_433_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_73_fu_450_p1;
    sc_signal< sc_lv<64> > tmp_70_fu_461_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > tmp_74_fu_472_p1;
    sc_signal< sc_lv<64> > tmp_67_fu_483_p1;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<64> > tmp_72_fu_494_p1;
    sc_signal< sc_lv<64> > tmp_76_fu_505_p1;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_lv<64> > tmp_73_cast_fu_581_p1;
    sc_signal< sc_lv<32> > kernel_Addr_A_orig;
    sc_signal< sc_lv<32> > kernel_Addr_B_orig;
    sc_signal< sc_lv<10> > tmp_2_fu_369_p3;
    sc_signal< sc_lv<10> > tmp_5_fu_388_p3;
    sc_signal< sc_lv<5> > i_2_mid1_fu_401_p2;
    sc_signal< sc_lv<5> > tmp_1_2_mid2_v_v_cas_fu_413_p3;
    sc_signal< sc_lv<10> > tmp_4_fu_426_p3;
    sc_signal< sc_lv<10> > tmp_8_fu_443_p3;
    sc_signal< sc_lv<10> > tmp_7_fu_455_p3;
    sc_signal< sc_lv<10> > tmp_9_fu_466_p3;
    sc_signal< sc_lv<10> > tmp_66_fu_477_p3;
    sc_signal< sc_lv<10> > tmp_71_fu_488_p3;
    sc_signal< sc_lv<10> > tmp_75_fu_499_p3;
    sc_signal< sc_lv<32> > tmp3_fu_510_p2;
    sc_signal< sc_lv<32> > tmp7_fu_522_p2;
    sc_signal< sc_lv<32> > tmp6_fu_527_p2;
    sc_signal< sc_lv<32> > tmp4_fu_533_p2;
    sc_signal< sc_lv<10> > tmp_fu_544_p3;
    sc_signal< sc_lv<6> > tmp_1_fu_555_p3;
    sc_signal< sc_lv<11> > p_shl_cast_fu_551_p1;
    sc_signal< sc_lv<11> > p_shl1_cast_fu_562_p1;
    sc_signal< sc_lv<11> > tmp_s_fu_566_p2;
    sc_signal< sc_lv<11> > tmp_4_cast_fu_572_p1;
    sc_signal< sc_lv<11> > tmp_68_fu_575_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage3;
    static const sc_lv<7> ap_ST_fsm_pp0_stage4;
    static const sc_lv<7> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<10> ap_const_lv10_384;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage3_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage3_iter0();
    void thread_ap_block_state6_pp0_stage4_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_block_state8_pp0_stage1_iter1();
    void thread_ap_block_state9_pp0_stage2_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_264_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_253_p4();
    void thread_ap_phi_mux_j_phi_fu_276_p4();
    void thread_ap_ready();
    void thread_buffer_r_address0();
    void thread_buffer_r_address1();
    void thread_buffer_r_ce0();
    void thread_buffer_r_ce1();
    void thread_exitcond_flatten_fu_329_p2();
    void thread_exitcond_fu_341_p2();
    void thread_grp_fu_299_p2();
    void thread_grp_fu_305_p2();
    void thread_grp_fu_319_p2();
    void thread_i_2_mid1_fu_401_p2();
    void thread_i_s_fu_355_p2();
    void thread_indvar_flatten_next_fu_335_p2();
    void thread_j_1_fu_382_p2();
    void thread_j_mid2_fu_347_p3();
    void thread_kernel_Addr_A();
    void thread_kernel_Addr_A_orig();
    void thread_kernel_Addr_B();
    void thread_kernel_Addr_B_orig();
    void thread_kernel_Din_A();
    void thread_kernel_Din_B();
    void thread_kernel_EN_A();
    void thread_kernel_EN_B();
    void thread_kernel_WEN_A();
    void thread_kernel_WEN_B();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl1_cast_fu_562_p1();
    void thread_p_shl_cast_fu_551_p1();
    void thread_p_v_fu_407_p3();
    void thread_sum_2_2_2_fu_539_p2();
    void thread_tmp1_fu_516_p2();
    void thread_tmp3_fu_510_p2();
    void thread_tmp4_fu_533_p2();
    void thread_tmp6_fu_527_p2();
    void thread_tmp7_fu_522_p2();
    void thread_tmp_1_2_mid2_v_fu_420_p2();
    void thread_tmp_1_2_mid2_v_v_cas_fu_413_p3();
    void thread_tmp_1_fu_555_p3();
    void thread_tmp_2_fu_369_p3();
    void thread_tmp_3_0_2_fu_438_p2();
    void thread_tmp_4_cast_fu_572_p1();
    void thread_tmp_4_fu_426_p3();
    void thread_tmp_5_fu_388_p3();
    void thread_tmp_64_fu_377_p1();
    void thread_tmp_65_fu_433_p1();
    void thread_tmp_66_fu_477_p3();
    void thread_tmp_67_fu_483_p1();
    void thread_tmp_68_fu_575_p2();
    void thread_tmp_69_fu_396_p1();
    void thread_tmp_70_fu_461_p1();
    void thread_tmp_71_fu_488_p3();
    void thread_tmp_72_fu_494_p1();
    void thread_tmp_73_cast_fu_581_p1();
    void thread_tmp_73_fu_450_p1();
    void thread_tmp_74_fu_472_p1();
    void thread_tmp_75_fu_499_p3();
    void thread_tmp_76_fu_505_p1();
    void thread_tmp_7_fu_455_p3();
    void thread_tmp_8_fu_443_p3();
    void thread_tmp_9_fu_466_p3();
    void thread_tmp_fu_544_p3();
    void thread_tmp_mid2_v_fu_361_p3();
    void thread_tmp_s_fu_566_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
