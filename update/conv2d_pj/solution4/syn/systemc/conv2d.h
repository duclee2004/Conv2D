// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _conv2d_HH_
#define _conv2d_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "load_input.h"
#include "convolution_kernel.h"
#include "write_output.h"
#include "conv2d_buffer.h"
#include "conv2d_output.h"

namespace ap_rtl {

struct conv2d : public sc_module {
    // Port declarations 48
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<32> > input_r_Addr_A;
    sc_out< sc_logic > input_r_EN_A;
    sc_out< sc_lv<32> > input_r_Din_A;
    sc_in< sc_lv<32> > input_r_Dout_A;
    sc_out< sc_lv<4> > input_r_WEN_A;
    sc_out< sc_logic > input_r_Clk_A;
    sc_out< sc_logic > input_r_Rst_A;
    sc_out< sc_lv<32> > input_r_Addr_B;
    sc_out< sc_logic > input_r_EN_B;
    sc_out< sc_lv<32> > input_r_Din_B;
    sc_in< sc_lv<32> > input_r_Dout_B;
    sc_out< sc_lv<4> > input_r_WEN_B;
    sc_out< sc_logic > input_r_Clk_B;
    sc_out< sc_logic > input_r_Rst_B;
    sc_out< sc_lv<32> > kernel_Addr_A;
    sc_out< sc_logic > kernel_EN_A;
    sc_out< sc_lv<32> > kernel_Din_A;
    sc_in< sc_lv<32> > kernel_Dout_A;
    sc_out< sc_lv<4> > kernel_WEN_A;
    sc_out< sc_logic > kernel_Clk_A;
    sc_out< sc_logic > kernel_Rst_A;
    sc_out< sc_lv<32> > kernel_Addr_B;
    sc_out< sc_logic > kernel_EN_B;
    sc_out< sc_lv<32> > kernel_Din_B;
    sc_in< sc_lv<32> > kernel_Dout_B;
    sc_out< sc_lv<4> > kernel_WEN_B;
    sc_out< sc_logic > kernel_Clk_B;
    sc_out< sc_logic > kernel_Rst_B;
    sc_out< sc_lv<32> > result_Addr_A;
    sc_out< sc_logic > result_EN_A;
    sc_out< sc_lv<32> > result_Din_A;
    sc_in< sc_lv<32> > result_Dout_A;
    sc_out< sc_lv<4> > result_WEN_A;
    sc_out< sc_logic > result_Clk_A;
    sc_out< sc_logic > result_Rst_A;
    sc_out< sc_lv<32> > result_Addr_B;
    sc_out< sc_logic > result_EN_B;
    sc_out< sc_lv<32> > result_Din_B;
    sc_in< sc_lv<32> > result_Dout_B;
    sc_out< sc_lv<4> > result_WEN_B;
    sc_out< sc_logic > result_Clk_B;
    sc_out< sc_logic > result_Rst_B;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<10> > ap_var_for_const3;


    // Module declarations
    conv2d(sc_module_name name);
    SC_HAS_PROCESS(conv2d);

    ~conv2d();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    conv2d_buffer* buffer_U;
    conv2d_output* output_U;
    load_input* load_input_U0;
    convolution_kernel* convolution_kernel_U0;
    write_output* write_output_U0;
    sc_signal< sc_lv<32> > buffer_i_q0;
    sc_signal< sc_lv<32> > buffer_i_q1;
    sc_signal< sc_lv<32> > buffer_t_q0;
    sc_signal< sc_lv<32> > buffer_t_q1;
    sc_signal< sc_lv<32> > output_i_q0;
    sc_signal< sc_lv<32> > output_i_q1;
    sc_signal< sc_lv<32> > output_t_q0;
    sc_signal< sc_lv<32> > output_t_q1;
    sc_signal< sc_logic > load_input_U0_ap_start;
    sc_signal< sc_logic > load_input_U0_ap_done;
    sc_signal< sc_logic > load_input_U0_ap_continue;
    sc_signal< sc_logic > load_input_U0_ap_idle;
    sc_signal< sc_logic > load_input_U0_ap_ready;
    sc_signal< sc_lv<32> > load_input_U0_input_r_Addr_A;
    sc_signal< sc_logic > load_input_U0_input_r_EN_A;
    sc_signal< sc_lv<4> > load_input_U0_input_r_WEN_A;
    sc_signal< sc_lv<32> > load_input_U0_input_r_Din_A;
    sc_signal< sc_lv<32> > load_input_U0_input_r_Addr_B;
    sc_signal< sc_logic > load_input_U0_input_r_EN_B;
    sc_signal< sc_lv<4> > load_input_U0_input_r_WEN_B;
    sc_signal< sc_lv<32> > load_input_U0_input_r_Din_B;
    sc_signal< sc_lv<10> > load_input_U0_buffer_r_address0;
    sc_signal< sc_logic > load_input_U0_buffer_r_ce0;
    sc_signal< sc_logic > load_input_U0_buffer_r_we0;
    sc_signal< sc_lv<32> > load_input_U0_buffer_r_d0;
    sc_signal< sc_lv<10> > load_input_U0_buffer_r_address1;
    sc_signal< sc_logic > load_input_U0_buffer_r_ce1;
    sc_signal< sc_logic > load_input_U0_buffer_r_we1;
    sc_signal< sc_lv<32> > load_input_U0_buffer_r_d1;
    sc_signal< sc_logic > ap_channel_done_buffer;
    sc_signal< sc_logic > load_input_U0_buffer_r_full_n;
    sc_signal< sc_logic > convolution_kernel_U0_ap_start;
    sc_signal< sc_logic > convolution_kernel_U0_ap_done;
    sc_signal< sc_logic > convolution_kernel_U0_ap_continue;
    sc_signal< sc_logic > convolution_kernel_U0_ap_idle;
    sc_signal< sc_logic > convolution_kernel_U0_ap_ready;
    sc_signal< sc_lv<10> > convolution_kernel_U0_buffer_r_address0;
    sc_signal< sc_logic > convolution_kernel_U0_buffer_r_ce0;
    sc_signal< sc_lv<10> > convolution_kernel_U0_buffer_r_address1;
    sc_signal< sc_logic > convolution_kernel_U0_buffer_r_ce1;
    sc_signal< sc_lv<32> > convolution_kernel_U0_kernel_Addr_A;
    sc_signal< sc_logic > convolution_kernel_U0_kernel_EN_A;
    sc_signal< sc_lv<4> > convolution_kernel_U0_kernel_WEN_A;
    sc_signal< sc_lv<32> > convolution_kernel_U0_kernel_Din_A;
    sc_signal< sc_lv<32> > convolution_kernel_U0_kernel_Addr_B;
    sc_signal< sc_logic > convolution_kernel_U0_kernel_EN_B;
    sc_signal< sc_lv<4> > convolution_kernel_U0_kernel_WEN_B;
    sc_signal< sc_lv<32> > convolution_kernel_U0_kernel_Din_B;
    sc_signal< sc_lv<10> > convolution_kernel_U0_output_r_address0;
    sc_signal< sc_logic > convolution_kernel_U0_output_r_ce0;
    sc_signal< sc_logic > convolution_kernel_U0_output_r_we0;
    sc_signal< sc_lv<32> > convolution_kernel_U0_output_r_d0;
    sc_signal< sc_logic > ap_channel_done_output;
    sc_signal< sc_logic > convolution_kernel_U0_output_r_full_n;
    sc_signal< sc_logic > write_output_U0_ap_start;
    sc_signal< sc_logic > write_output_U0_ap_done;
    sc_signal< sc_logic > write_output_U0_ap_continue;
    sc_signal< sc_logic > write_output_U0_ap_idle;
    sc_signal< sc_logic > write_output_U0_ap_ready;
    sc_signal< sc_lv<10> > write_output_U0_output_r_address0;
    sc_signal< sc_logic > write_output_U0_output_r_ce0;
    sc_signal< sc_lv<10> > write_output_U0_output_r_address1;
    sc_signal< sc_logic > write_output_U0_output_r_ce1;
    sc_signal< sc_lv<32> > write_output_U0_result_Addr_A;
    sc_signal< sc_logic > write_output_U0_result_EN_A;
    sc_signal< sc_lv<4> > write_output_U0_result_WEN_A;
    sc_signal< sc_lv<32> > write_output_U0_result_Din_A;
    sc_signal< sc_lv<32> > write_output_U0_result_Addr_B;
    sc_signal< sc_logic > write_output_U0_result_EN_B;
    sc_signal< sc_lv<4> > write_output_U0_result_WEN_B;
    sc_signal< sc_lv<32> > write_output_U0_result_Din_B;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > buffer_i_full_n;
    sc_signal< sc_logic > buffer_t_empty_n;
    sc_signal< sc_logic > output_i_full_n;
    sc_signal< sc_logic > output_t_empty_n;
    sc_signal< sc_lv<32> > output_t_d1;
    sc_signal< sc_logic > output_t_we1;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_load_input_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_load_input_U0_ap_ready;
    sc_signal< sc_lv<2> > load_input_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_convolution_kernel_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_convolution_kernel_U0_ap_ready;
    sc_signal< sc_lv<2> > convolution_kernel_U0_ap_ready_count;
    sc_signal< sc_logic > load_input_U0_start_full_n;
    sc_signal< sc_logic > load_input_U0_start_write;
    sc_signal< sc_logic > convolution_kernel_U0_start_full_n;
    sc_signal< sc_logic > convolution_kernel_U0_start_write;
    sc_signal< sc_logic > write_output_U0_start_full_n;
    sc_signal< sc_logic > write_output_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_channel_done_buffer();
    void thread_ap_channel_done_output();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_convolution_kernel_U0_ap_ready();
    void thread_ap_sync_done();
    void thread_ap_sync_load_input_U0_ap_ready();
    void thread_ap_sync_ready();
    void thread_convolution_kernel_U0_ap_continue();
    void thread_convolution_kernel_U0_ap_start();
    void thread_convolution_kernel_U0_output_r_full_n();
    void thread_convolution_kernel_U0_start_full_n();
    void thread_convolution_kernel_U0_start_write();
    void thread_input_r_Addr_A();
    void thread_input_r_Addr_B();
    void thread_input_r_Clk_A();
    void thread_input_r_Clk_B();
    void thread_input_r_Din_A();
    void thread_input_r_Din_B();
    void thread_input_r_EN_A();
    void thread_input_r_EN_B();
    void thread_input_r_Rst_A();
    void thread_input_r_Rst_B();
    void thread_input_r_WEN_A();
    void thread_input_r_WEN_B();
    void thread_kernel_Addr_A();
    void thread_kernel_Addr_B();
    void thread_kernel_Clk_A();
    void thread_kernel_Clk_B();
    void thread_kernel_Din_A();
    void thread_kernel_Din_B();
    void thread_kernel_EN_A();
    void thread_kernel_EN_B();
    void thread_kernel_Rst_A();
    void thread_kernel_Rst_B();
    void thread_kernel_WEN_A();
    void thread_kernel_WEN_B();
    void thread_load_input_U0_ap_continue();
    void thread_load_input_U0_ap_start();
    void thread_load_input_U0_buffer_r_full_n();
    void thread_load_input_U0_start_full_n();
    void thread_load_input_U0_start_write();
    void thread_output_t_d1();
    void thread_output_t_we1();
    void thread_result_Addr_A();
    void thread_result_Addr_B();
    void thread_result_Clk_A();
    void thread_result_Clk_B();
    void thread_result_Din_A();
    void thread_result_Din_B();
    void thread_result_EN_A();
    void thread_result_EN_B();
    void thread_result_Rst_A();
    void thread_result_Rst_B();
    void thread_result_WEN_A();
    void thread_result_WEN_B();
    void thread_write_output_U0_ap_continue();
    void thread_write_output_U0_ap_start();
    void thread_write_output_U0_start_full_n();
    void thread_write_output_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
