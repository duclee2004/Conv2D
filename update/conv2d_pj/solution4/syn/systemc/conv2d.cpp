// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv2d.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv2d::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> conv2d::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic conv2d::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> conv2d::ap_const_lv2_0 = "00";
const sc_lv<2> conv2d::ap_const_lv2_1 = "1";
const bool conv2d::ap_const_boolean_1 = true;
const sc_lv<10> conv2d::ap_const_lv10_0 = "0000000000";
const sc_lv<10> conv2d::ap_const_lv10_1 = "1";
const sc_lv<32> conv2d::ap_const_lv32_1 = "1";

conv2d::conv2d(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffer_U = new conv2d_buffer("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst);
    buffer_U->i_address0(load_input_U0_buffer_r_address0);
    buffer_U->i_ce0(load_input_U0_buffer_r_ce0);
    buffer_U->i_we0(load_input_U0_buffer_r_we0);
    buffer_U->i_d0(load_input_U0_buffer_r_d0);
    buffer_U->i_q0(buffer_i_q0);
    buffer_U->i_address1(load_input_U0_buffer_r_address1);
    buffer_U->i_ce1(load_input_U0_buffer_r_ce1);
    buffer_U->i_we1(load_input_U0_buffer_r_we1);
    buffer_U->i_d1(load_input_U0_buffer_r_d1);
    buffer_U->i_q1(buffer_i_q1);
    buffer_U->t_address0(convolution_kernel_U0_buffer_r_address0);
    buffer_U->t_ce0(convolution_kernel_U0_buffer_r_ce0);
    buffer_U->t_we0(ap_var_for_const0);
    buffer_U->t_d0(ap_var_for_const1);
    buffer_U->t_q0(buffer_t_q0);
    buffer_U->t_address1(convolution_kernel_U0_buffer_r_address1);
    buffer_U->t_ce1(convolution_kernel_U0_buffer_r_ce1);
    buffer_U->t_we1(ap_var_for_const0);
    buffer_U->t_d1(ap_var_for_const1);
    buffer_U->t_q1(buffer_t_q1);
    buffer_U->i_ce(ap_var_for_const2);
    buffer_U->t_ce(ap_var_for_const2);
    buffer_U->i_full_n(buffer_i_full_n);
    buffer_U->i_write(load_input_U0_ap_done);
    buffer_U->t_empty_n(buffer_t_empty_n);
    buffer_U->t_read(convolution_kernel_U0_ap_ready);
    output_U = new conv2d_output("output_U");
    output_U->clk(ap_clk);
    output_U->reset(ap_rst);
    output_U->i_address0(convolution_kernel_U0_output_r_address0);
    output_U->i_ce0(convolution_kernel_U0_output_r_ce0);
    output_U->i_we0(convolution_kernel_U0_output_r_we0);
    output_U->i_d0(convolution_kernel_U0_output_r_d0);
    output_U->i_q0(output_i_q0);
    output_U->i_address1(ap_var_for_const3);
    output_U->i_ce1(ap_var_for_const0);
    output_U->i_q1(output_i_q1);
    output_U->t_address0(write_output_U0_output_r_address0);
    output_U->t_ce0(write_output_U0_output_r_ce0);
    output_U->t_we0(ap_var_for_const0);
    output_U->t_d0(ap_var_for_const1);
    output_U->t_q0(output_t_q0);
    output_U->t_address1(write_output_U0_output_r_address1);
    output_U->t_ce1(write_output_U0_output_r_ce1);
    output_U->t_q1(output_t_q1);
    output_U->i_ce(ap_var_for_const2);
    output_U->t_ce(ap_var_for_const2);
    output_U->i_full_n(output_i_full_n);
    output_U->i_write(convolution_kernel_U0_ap_done);
    output_U->t_empty_n(output_t_empty_n);
    output_U->t_read(write_output_U0_ap_ready);
    load_input_U0 = new load_input("load_input_U0");
    load_input_U0->ap_clk(ap_clk);
    load_input_U0->ap_rst(ap_rst);
    load_input_U0->ap_start(load_input_U0_ap_start);
    load_input_U0->ap_done(load_input_U0_ap_done);
    load_input_U0->ap_continue(load_input_U0_ap_continue);
    load_input_U0->ap_idle(load_input_U0_ap_idle);
    load_input_U0->ap_ready(load_input_U0_ap_ready);
    load_input_U0->input_r_Addr_A(load_input_U0_input_r_Addr_A);
    load_input_U0->input_r_EN_A(load_input_U0_input_r_EN_A);
    load_input_U0->input_r_WEN_A(load_input_U0_input_r_WEN_A);
    load_input_U0->input_r_Din_A(load_input_U0_input_r_Din_A);
    load_input_U0->input_r_Dout_A(input_r_Dout_A);
    load_input_U0->input_r_Addr_B(load_input_U0_input_r_Addr_B);
    load_input_U0->input_r_EN_B(load_input_U0_input_r_EN_B);
    load_input_U0->input_r_WEN_B(load_input_U0_input_r_WEN_B);
    load_input_U0->input_r_Din_B(load_input_U0_input_r_Din_B);
    load_input_U0->input_r_Dout_B(input_r_Dout_B);
    load_input_U0->buffer_r_address0(load_input_U0_buffer_r_address0);
    load_input_U0->buffer_r_ce0(load_input_U0_buffer_r_ce0);
    load_input_U0->buffer_r_we0(load_input_U0_buffer_r_we0);
    load_input_U0->buffer_r_d0(load_input_U0_buffer_r_d0);
    load_input_U0->buffer_r_address1(load_input_U0_buffer_r_address1);
    load_input_U0->buffer_r_ce1(load_input_U0_buffer_r_ce1);
    load_input_U0->buffer_r_we1(load_input_U0_buffer_r_we1);
    load_input_U0->buffer_r_d1(load_input_U0_buffer_r_d1);
    convolution_kernel_U0 = new convolution_kernel("convolution_kernel_U0");
    convolution_kernel_U0->ap_clk(ap_clk);
    convolution_kernel_U0->ap_rst(ap_rst);
    convolution_kernel_U0->ap_start(convolution_kernel_U0_ap_start);
    convolution_kernel_U0->ap_done(convolution_kernel_U0_ap_done);
    convolution_kernel_U0->ap_continue(convolution_kernel_U0_ap_continue);
    convolution_kernel_U0->ap_idle(convolution_kernel_U0_ap_idle);
    convolution_kernel_U0->ap_ready(convolution_kernel_U0_ap_ready);
    convolution_kernel_U0->buffer_r_address0(convolution_kernel_U0_buffer_r_address0);
    convolution_kernel_U0->buffer_r_ce0(convolution_kernel_U0_buffer_r_ce0);
    convolution_kernel_U0->buffer_r_q0(buffer_t_q0);
    convolution_kernel_U0->buffer_r_address1(convolution_kernel_U0_buffer_r_address1);
    convolution_kernel_U0->buffer_r_ce1(convolution_kernel_U0_buffer_r_ce1);
    convolution_kernel_U0->buffer_r_q1(buffer_t_q1);
    convolution_kernel_U0->kernel_Addr_A(convolution_kernel_U0_kernel_Addr_A);
    convolution_kernel_U0->kernel_EN_A(convolution_kernel_U0_kernel_EN_A);
    convolution_kernel_U0->kernel_WEN_A(convolution_kernel_U0_kernel_WEN_A);
    convolution_kernel_U0->kernel_Din_A(convolution_kernel_U0_kernel_Din_A);
    convolution_kernel_U0->kernel_Dout_A(kernel_Dout_A);
    convolution_kernel_U0->kernel_Addr_B(convolution_kernel_U0_kernel_Addr_B);
    convolution_kernel_U0->kernel_EN_B(convolution_kernel_U0_kernel_EN_B);
    convolution_kernel_U0->kernel_WEN_B(convolution_kernel_U0_kernel_WEN_B);
    convolution_kernel_U0->kernel_Din_B(convolution_kernel_U0_kernel_Din_B);
    convolution_kernel_U0->kernel_Dout_B(kernel_Dout_B);
    convolution_kernel_U0->output_r_address0(convolution_kernel_U0_output_r_address0);
    convolution_kernel_U0->output_r_ce0(convolution_kernel_U0_output_r_ce0);
    convolution_kernel_U0->output_r_we0(convolution_kernel_U0_output_r_we0);
    convolution_kernel_U0->output_r_d0(convolution_kernel_U0_output_r_d0);
    write_output_U0 = new write_output("write_output_U0");
    write_output_U0->ap_clk(ap_clk);
    write_output_U0->ap_rst(ap_rst);
    write_output_U0->ap_start(write_output_U0_ap_start);
    write_output_U0->ap_done(write_output_U0_ap_done);
    write_output_U0->ap_continue(write_output_U0_ap_continue);
    write_output_U0->ap_idle(write_output_U0_ap_idle);
    write_output_U0->ap_ready(write_output_U0_ap_ready);
    write_output_U0->output_r_address0(write_output_U0_output_r_address0);
    write_output_U0->output_r_ce0(write_output_U0_output_r_ce0);
    write_output_U0->output_r_q0(output_t_q0);
    write_output_U0->output_r_address1(write_output_U0_output_r_address1);
    write_output_U0->output_r_ce1(write_output_U0_output_r_ce1);
    write_output_U0->output_r_q1(output_t_q1);
    write_output_U0->result_Addr_A(write_output_U0_result_Addr_A);
    write_output_U0->result_EN_A(write_output_U0_result_EN_A);
    write_output_U0->result_WEN_A(write_output_U0_result_WEN_A);
    write_output_U0->result_Din_A(write_output_U0_result_Din_A);
    write_output_U0->result_Dout_A(ap_var_for_const1);
    write_output_U0->result_Addr_B(write_output_U0_result_Addr_B);
    write_output_U0->result_EN_B(write_output_U0_result_EN_B);
    write_output_U0->result_WEN_B(write_output_U0_result_WEN_B);
    write_output_U0->result_Din_B(write_output_U0_result_Din_B);
    write_output_U0->result_Dout_B(ap_var_for_const1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_buffer);
    sensitive << ( load_input_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_output);
    sensitive << ( convolution_kernel_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( write_output_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( load_input_U0_ap_idle );
    sensitive << ( convolution_kernel_U0_ap_idle );
    sensitive << ( write_output_U0_ap_idle );
    sensitive << ( buffer_t_empty_n );
    sensitive << ( output_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_convolution_kernel_U0_ap_ready);
    sensitive << ( convolution_kernel_U0_ap_ready );
    sensitive << ( ap_sync_reg_convolution_kernel_U0_ap_ready );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( write_output_U0_ap_done );

    SC_METHOD(thread_ap_sync_load_input_U0_ap_ready);
    sensitive << ( load_input_U0_ap_ready );
    sensitive << ( ap_sync_reg_load_input_U0_ap_ready );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_load_input_U0_ap_ready );
    sensitive << ( ap_sync_convolution_kernel_U0_ap_ready );

    SC_METHOD(thread_convolution_kernel_U0_ap_continue);
    sensitive << ( output_i_full_n );

    SC_METHOD(thread_convolution_kernel_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( buffer_t_empty_n );
    sensitive << ( ap_sync_reg_convolution_kernel_U0_ap_ready );

    SC_METHOD(thread_convolution_kernel_U0_output_r_full_n);
    sensitive << ( output_i_full_n );

    SC_METHOD(thread_convolution_kernel_U0_start_full_n);

    SC_METHOD(thread_convolution_kernel_U0_start_write);

    SC_METHOD(thread_input_r_Addr_A);
    sensitive << ( load_input_U0_input_r_Addr_A );

    SC_METHOD(thread_input_r_Addr_B);
    sensitive << ( load_input_U0_input_r_Addr_B );

    SC_METHOD(thread_input_r_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_input_r_Clk_B);
    sensitive << ( ap_clk );

    SC_METHOD(thread_input_r_Din_A);

    SC_METHOD(thread_input_r_Din_B);

    SC_METHOD(thread_input_r_EN_A);
    sensitive << ( load_input_U0_input_r_EN_A );

    SC_METHOD(thread_input_r_EN_B);
    sensitive << ( load_input_U0_input_r_EN_B );

    SC_METHOD(thread_input_r_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_input_r_Rst_B);
    sensitive << ( ap_rst );

    SC_METHOD(thread_input_r_WEN_A);

    SC_METHOD(thread_input_r_WEN_B);

    SC_METHOD(thread_kernel_Addr_A);
    sensitive << ( convolution_kernel_U0_kernel_Addr_A );

    SC_METHOD(thread_kernel_Addr_B);
    sensitive << ( convolution_kernel_U0_kernel_Addr_B );

    SC_METHOD(thread_kernel_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_kernel_Clk_B);
    sensitive << ( ap_clk );

    SC_METHOD(thread_kernel_Din_A);

    SC_METHOD(thread_kernel_Din_B);

    SC_METHOD(thread_kernel_EN_A);
    sensitive << ( convolution_kernel_U0_kernel_EN_A );

    SC_METHOD(thread_kernel_EN_B);
    sensitive << ( convolution_kernel_U0_kernel_EN_B );

    SC_METHOD(thread_kernel_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_kernel_Rst_B);
    sensitive << ( ap_rst );

    SC_METHOD(thread_kernel_WEN_A);

    SC_METHOD(thread_kernel_WEN_B);

    SC_METHOD(thread_load_input_U0_ap_continue);
    sensitive << ( buffer_i_full_n );

    SC_METHOD(thread_load_input_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_load_input_U0_ap_ready );

    SC_METHOD(thread_load_input_U0_buffer_r_full_n);
    sensitive << ( buffer_i_full_n );

    SC_METHOD(thread_load_input_U0_start_full_n);

    SC_METHOD(thread_load_input_U0_start_write);

    SC_METHOD(thread_output_t_d1);

    SC_METHOD(thread_output_t_we1);

    SC_METHOD(thread_result_Addr_A);
    sensitive << ( write_output_U0_result_Addr_A );

    SC_METHOD(thread_result_Addr_B);
    sensitive << ( write_output_U0_result_Addr_B );

    SC_METHOD(thread_result_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_result_Clk_B);
    sensitive << ( ap_clk );

    SC_METHOD(thread_result_Din_A);
    sensitive << ( write_output_U0_result_Din_A );

    SC_METHOD(thread_result_Din_B);
    sensitive << ( write_output_U0_result_Din_B );

    SC_METHOD(thread_result_EN_A);
    sensitive << ( write_output_U0_result_EN_A );

    SC_METHOD(thread_result_EN_B);
    sensitive << ( write_output_U0_result_EN_B );

    SC_METHOD(thread_result_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_result_Rst_B);
    sensitive << ( ap_rst );

    SC_METHOD(thread_result_WEN_A);
    sensitive << ( write_output_U0_result_WEN_A );

    SC_METHOD(thread_result_WEN_B);
    sensitive << ( write_output_U0_result_WEN_B );

    SC_METHOD(thread_write_output_U0_ap_continue);

    SC_METHOD(thread_write_output_U0_ap_start);
    sensitive << ( output_t_empty_n );

    SC_METHOD(thread_write_output_U0_start_full_n);

    SC_METHOD(thread_write_output_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const3);

    ap_sync_reg_load_input_U0_ap_ready = SC_LOGIC_0;
    load_input_U0_ap_ready_count = "00";
    ap_sync_reg_convolution_kernel_U0_ap_ready = SC_LOGIC_0;
    convolution_kernel_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv2d_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, input_r_Addr_A, "(port)input_r_Addr_A");
    sc_trace(mVcdFile, input_r_EN_A, "(port)input_r_EN_A");
    sc_trace(mVcdFile, input_r_Din_A, "(port)input_r_Din_A");
    sc_trace(mVcdFile, input_r_Dout_A, "(port)input_r_Dout_A");
    sc_trace(mVcdFile, input_r_WEN_A, "(port)input_r_WEN_A");
    sc_trace(mVcdFile, input_r_Clk_A, "(port)input_r_Clk_A");
    sc_trace(mVcdFile, input_r_Rst_A, "(port)input_r_Rst_A");
    sc_trace(mVcdFile, input_r_Addr_B, "(port)input_r_Addr_B");
    sc_trace(mVcdFile, input_r_EN_B, "(port)input_r_EN_B");
    sc_trace(mVcdFile, input_r_Din_B, "(port)input_r_Din_B");
    sc_trace(mVcdFile, input_r_Dout_B, "(port)input_r_Dout_B");
    sc_trace(mVcdFile, input_r_WEN_B, "(port)input_r_WEN_B");
    sc_trace(mVcdFile, input_r_Clk_B, "(port)input_r_Clk_B");
    sc_trace(mVcdFile, input_r_Rst_B, "(port)input_r_Rst_B");
    sc_trace(mVcdFile, kernel_Addr_A, "(port)kernel_Addr_A");
    sc_trace(mVcdFile, kernel_EN_A, "(port)kernel_EN_A");
    sc_trace(mVcdFile, kernel_Din_A, "(port)kernel_Din_A");
    sc_trace(mVcdFile, kernel_Dout_A, "(port)kernel_Dout_A");
    sc_trace(mVcdFile, kernel_WEN_A, "(port)kernel_WEN_A");
    sc_trace(mVcdFile, kernel_Clk_A, "(port)kernel_Clk_A");
    sc_trace(mVcdFile, kernel_Rst_A, "(port)kernel_Rst_A");
    sc_trace(mVcdFile, kernel_Addr_B, "(port)kernel_Addr_B");
    sc_trace(mVcdFile, kernel_EN_B, "(port)kernel_EN_B");
    sc_trace(mVcdFile, kernel_Din_B, "(port)kernel_Din_B");
    sc_trace(mVcdFile, kernel_Dout_B, "(port)kernel_Dout_B");
    sc_trace(mVcdFile, kernel_WEN_B, "(port)kernel_WEN_B");
    sc_trace(mVcdFile, kernel_Clk_B, "(port)kernel_Clk_B");
    sc_trace(mVcdFile, kernel_Rst_B, "(port)kernel_Rst_B");
    sc_trace(mVcdFile, result_Addr_A, "(port)result_Addr_A");
    sc_trace(mVcdFile, result_EN_A, "(port)result_EN_A");
    sc_trace(mVcdFile, result_Din_A, "(port)result_Din_A");
    sc_trace(mVcdFile, result_Dout_A, "(port)result_Dout_A");
    sc_trace(mVcdFile, result_WEN_A, "(port)result_WEN_A");
    sc_trace(mVcdFile, result_Clk_A, "(port)result_Clk_A");
    sc_trace(mVcdFile, result_Rst_A, "(port)result_Rst_A");
    sc_trace(mVcdFile, result_Addr_B, "(port)result_Addr_B");
    sc_trace(mVcdFile, result_EN_B, "(port)result_EN_B");
    sc_trace(mVcdFile, result_Din_B, "(port)result_Din_B");
    sc_trace(mVcdFile, result_Dout_B, "(port)result_Dout_B");
    sc_trace(mVcdFile, result_WEN_B, "(port)result_WEN_B");
    sc_trace(mVcdFile, result_Clk_B, "(port)result_Clk_B");
    sc_trace(mVcdFile, result_Rst_B, "(port)result_Rst_B");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, buffer_i_q0, "buffer_i_q0");
    sc_trace(mVcdFile, buffer_i_q1, "buffer_i_q1");
    sc_trace(mVcdFile, buffer_t_q0, "buffer_t_q0");
    sc_trace(mVcdFile, buffer_t_q1, "buffer_t_q1");
    sc_trace(mVcdFile, output_i_q0, "output_i_q0");
    sc_trace(mVcdFile, output_i_q1, "output_i_q1");
    sc_trace(mVcdFile, output_t_q0, "output_t_q0");
    sc_trace(mVcdFile, output_t_q1, "output_t_q1");
    sc_trace(mVcdFile, load_input_U0_ap_start, "load_input_U0_ap_start");
    sc_trace(mVcdFile, load_input_U0_ap_done, "load_input_U0_ap_done");
    sc_trace(mVcdFile, load_input_U0_ap_continue, "load_input_U0_ap_continue");
    sc_trace(mVcdFile, load_input_U0_ap_idle, "load_input_U0_ap_idle");
    sc_trace(mVcdFile, load_input_U0_ap_ready, "load_input_U0_ap_ready");
    sc_trace(mVcdFile, load_input_U0_input_r_Addr_A, "load_input_U0_input_r_Addr_A");
    sc_trace(mVcdFile, load_input_U0_input_r_EN_A, "load_input_U0_input_r_EN_A");
    sc_trace(mVcdFile, load_input_U0_input_r_WEN_A, "load_input_U0_input_r_WEN_A");
    sc_trace(mVcdFile, load_input_U0_input_r_Din_A, "load_input_U0_input_r_Din_A");
    sc_trace(mVcdFile, load_input_U0_input_r_Addr_B, "load_input_U0_input_r_Addr_B");
    sc_trace(mVcdFile, load_input_U0_input_r_EN_B, "load_input_U0_input_r_EN_B");
    sc_trace(mVcdFile, load_input_U0_input_r_WEN_B, "load_input_U0_input_r_WEN_B");
    sc_trace(mVcdFile, load_input_U0_input_r_Din_B, "load_input_U0_input_r_Din_B");
    sc_trace(mVcdFile, load_input_U0_buffer_r_address0, "load_input_U0_buffer_r_address0");
    sc_trace(mVcdFile, load_input_U0_buffer_r_ce0, "load_input_U0_buffer_r_ce0");
    sc_trace(mVcdFile, load_input_U0_buffer_r_we0, "load_input_U0_buffer_r_we0");
    sc_trace(mVcdFile, load_input_U0_buffer_r_d0, "load_input_U0_buffer_r_d0");
    sc_trace(mVcdFile, load_input_U0_buffer_r_address1, "load_input_U0_buffer_r_address1");
    sc_trace(mVcdFile, load_input_U0_buffer_r_ce1, "load_input_U0_buffer_r_ce1");
    sc_trace(mVcdFile, load_input_U0_buffer_r_we1, "load_input_U0_buffer_r_we1");
    sc_trace(mVcdFile, load_input_U0_buffer_r_d1, "load_input_U0_buffer_r_d1");
    sc_trace(mVcdFile, ap_channel_done_buffer, "ap_channel_done_buffer");
    sc_trace(mVcdFile, load_input_U0_buffer_r_full_n, "load_input_U0_buffer_r_full_n");
    sc_trace(mVcdFile, convolution_kernel_U0_ap_start, "convolution_kernel_U0_ap_start");
    sc_trace(mVcdFile, convolution_kernel_U0_ap_done, "convolution_kernel_U0_ap_done");
    sc_trace(mVcdFile, convolution_kernel_U0_ap_continue, "convolution_kernel_U0_ap_continue");
    sc_trace(mVcdFile, convolution_kernel_U0_ap_idle, "convolution_kernel_U0_ap_idle");
    sc_trace(mVcdFile, convolution_kernel_U0_ap_ready, "convolution_kernel_U0_ap_ready");
    sc_trace(mVcdFile, convolution_kernel_U0_buffer_r_address0, "convolution_kernel_U0_buffer_r_address0");
    sc_trace(mVcdFile, convolution_kernel_U0_buffer_r_ce0, "convolution_kernel_U0_buffer_r_ce0");
    sc_trace(mVcdFile, convolution_kernel_U0_buffer_r_address1, "convolution_kernel_U0_buffer_r_address1");
    sc_trace(mVcdFile, convolution_kernel_U0_buffer_r_ce1, "convolution_kernel_U0_buffer_r_ce1");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_Addr_A, "convolution_kernel_U0_kernel_Addr_A");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_EN_A, "convolution_kernel_U0_kernel_EN_A");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_WEN_A, "convolution_kernel_U0_kernel_WEN_A");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_Din_A, "convolution_kernel_U0_kernel_Din_A");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_Addr_B, "convolution_kernel_U0_kernel_Addr_B");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_EN_B, "convolution_kernel_U0_kernel_EN_B");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_WEN_B, "convolution_kernel_U0_kernel_WEN_B");
    sc_trace(mVcdFile, convolution_kernel_U0_kernel_Din_B, "convolution_kernel_U0_kernel_Din_B");
    sc_trace(mVcdFile, convolution_kernel_U0_output_r_address0, "convolution_kernel_U0_output_r_address0");
    sc_trace(mVcdFile, convolution_kernel_U0_output_r_ce0, "convolution_kernel_U0_output_r_ce0");
    sc_trace(mVcdFile, convolution_kernel_U0_output_r_we0, "convolution_kernel_U0_output_r_we0");
    sc_trace(mVcdFile, convolution_kernel_U0_output_r_d0, "convolution_kernel_U0_output_r_d0");
    sc_trace(mVcdFile, ap_channel_done_output, "ap_channel_done_output");
    sc_trace(mVcdFile, convolution_kernel_U0_output_r_full_n, "convolution_kernel_U0_output_r_full_n");
    sc_trace(mVcdFile, write_output_U0_ap_start, "write_output_U0_ap_start");
    sc_trace(mVcdFile, write_output_U0_ap_done, "write_output_U0_ap_done");
    sc_trace(mVcdFile, write_output_U0_ap_continue, "write_output_U0_ap_continue");
    sc_trace(mVcdFile, write_output_U0_ap_idle, "write_output_U0_ap_idle");
    sc_trace(mVcdFile, write_output_U0_ap_ready, "write_output_U0_ap_ready");
    sc_trace(mVcdFile, write_output_U0_output_r_address0, "write_output_U0_output_r_address0");
    sc_trace(mVcdFile, write_output_U0_output_r_ce0, "write_output_U0_output_r_ce0");
    sc_trace(mVcdFile, write_output_U0_output_r_address1, "write_output_U0_output_r_address1");
    sc_trace(mVcdFile, write_output_U0_output_r_ce1, "write_output_U0_output_r_ce1");
    sc_trace(mVcdFile, write_output_U0_result_Addr_A, "write_output_U0_result_Addr_A");
    sc_trace(mVcdFile, write_output_U0_result_EN_A, "write_output_U0_result_EN_A");
    sc_trace(mVcdFile, write_output_U0_result_WEN_A, "write_output_U0_result_WEN_A");
    sc_trace(mVcdFile, write_output_U0_result_Din_A, "write_output_U0_result_Din_A");
    sc_trace(mVcdFile, write_output_U0_result_Addr_B, "write_output_U0_result_Addr_B");
    sc_trace(mVcdFile, write_output_U0_result_EN_B, "write_output_U0_result_EN_B");
    sc_trace(mVcdFile, write_output_U0_result_WEN_B, "write_output_U0_result_WEN_B");
    sc_trace(mVcdFile, write_output_U0_result_Din_B, "write_output_U0_result_Din_B");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, buffer_i_full_n, "buffer_i_full_n");
    sc_trace(mVcdFile, buffer_t_empty_n, "buffer_t_empty_n");
    sc_trace(mVcdFile, output_i_full_n, "output_i_full_n");
    sc_trace(mVcdFile, output_t_empty_n, "output_t_empty_n");
    sc_trace(mVcdFile, output_t_d1, "output_t_d1");
    sc_trace(mVcdFile, output_t_we1, "output_t_we1");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_load_input_U0_ap_ready, "ap_sync_reg_load_input_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_load_input_U0_ap_ready, "ap_sync_load_input_U0_ap_ready");
    sc_trace(mVcdFile, load_input_U0_ap_ready_count, "load_input_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_convolution_kernel_U0_ap_ready, "ap_sync_reg_convolution_kernel_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_convolution_kernel_U0_ap_ready, "ap_sync_convolution_kernel_U0_ap_ready");
    sc_trace(mVcdFile, convolution_kernel_U0_ap_ready_count, "convolution_kernel_U0_ap_ready_count");
    sc_trace(mVcdFile, load_input_U0_start_full_n, "load_input_U0_start_full_n");
    sc_trace(mVcdFile, load_input_U0_start_write, "load_input_U0_start_write");
    sc_trace(mVcdFile, convolution_kernel_U0_start_full_n, "convolution_kernel_U0_start_full_n");
    sc_trace(mVcdFile, convolution_kernel_U0_start_write, "convolution_kernel_U0_start_write");
    sc_trace(mVcdFile, write_output_U0_start_full_n, "write_output_U0_start_full_n");
    sc_trace(mVcdFile, write_output_U0_start_write, "write_output_U0_start_write");
#endif

    }
    mHdltvinHandle.open("conv2d.hdltvin.dat");
    mHdltvoutHandle.open("conv2d.hdltvout.dat");
}

conv2d::~conv2d() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buffer_U;
    delete output_U;
    delete load_input_U0;
    delete convolution_kernel_U0;
    delete write_output_U0;
}

void conv2d::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void conv2d::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void conv2d::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void conv2d::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv10_0;
}

void conv2d::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_convolution_kernel_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_convolution_kernel_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_convolution_kernel_U0_ap_ready = ap_sync_convolution_kernel_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_load_input_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_load_input_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_load_input_U0_ap_ready = ap_sync_load_input_U0_ap_ready.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, convolution_kernel_U0_ap_ready.read()))) {
        convolution_kernel_U0_ap_ready_count = (!convolution_kernel_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(convolution_kernel_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, convolution_kernel_U0_ap_ready.read()))) {
        convolution_kernel_U0_ap_ready_count = (!convolution_kernel_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(convolution_kernel_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_0, load_input_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        load_input_U0_ap_ready_count = (!load_input_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(load_input_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, load_input_U0_ap_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        load_input_U0_ap_ready_count = (!load_input_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(load_input_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
}

void conv2d::thread_ap_channel_done_buffer() {
    ap_channel_done_buffer = load_input_U0_ap_done.read();
}

void conv2d::thread_ap_channel_done_output() {
    ap_channel_done_output = convolution_kernel_U0_ap_done.read();
}

void conv2d::thread_ap_done() {
    ap_done = write_output_U0_ap_done.read();
}

void conv2d::thread_ap_idle() {
    ap_idle = (load_input_U0_ap_idle.read() & convolution_kernel_U0_ap_idle.read() & write_output_U0_ap_idle.read() & (buffer_t_empty_n.read() ^ 
  ap_const_logic_1) & (output_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void conv2d::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void conv2d::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void conv2d::thread_ap_sync_convolution_kernel_U0_ap_ready() {
    ap_sync_convolution_kernel_U0_ap_ready = (convolution_kernel_U0_ap_ready.read() | ap_sync_reg_convolution_kernel_U0_ap_ready.read());
}

void conv2d::thread_ap_sync_done() {
    ap_sync_done = write_output_U0_ap_done.read();
}

void conv2d::thread_ap_sync_load_input_U0_ap_ready() {
    ap_sync_load_input_U0_ap_ready = (load_input_U0_ap_ready.read() | ap_sync_reg_load_input_U0_ap_ready.read());
}

void conv2d::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_load_input_U0_ap_ready.read() & ap_sync_convolution_kernel_U0_ap_ready.read());
}

void conv2d::thread_convolution_kernel_U0_ap_continue() {
    convolution_kernel_U0_ap_continue = output_i_full_n.read();
}

void conv2d::thread_convolution_kernel_U0_ap_start() {
    convolution_kernel_U0_ap_start = (ap_start.read() & buffer_t_empty_n.read() & (ap_sync_reg_convolution_kernel_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void conv2d::thread_convolution_kernel_U0_output_r_full_n() {
    convolution_kernel_U0_output_r_full_n = output_i_full_n.read();
}

void conv2d::thread_convolution_kernel_U0_start_full_n() {
    convolution_kernel_U0_start_full_n = ap_const_logic_1;
}

void conv2d::thread_convolution_kernel_U0_start_write() {
    convolution_kernel_U0_start_write = ap_const_logic_0;
}

void conv2d::thread_input_r_Addr_A() {
    input_r_Addr_A = load_input_U0_input_r_Addr_A.read();
}

void conv2d::thread_input_r_Addr_B() {
    input_r_Addr_B = load_input_U0_input_r_Addr_B.read();
}

void conv2d::thread_input_r_Clk_A() {
    input_r_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void conv2d::thread_input_r_Clk_B() {
    input_r_Clk_B = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void conv2d::thread_input_r_Din_A() {
    input_r_Din_A = ap_const_lv32_0;
}

void conv2d::thread_input_r_Din_B() {
    input_r_Din_B = ap_const_lv32_0;
}

void conv2d::thread_input_r_EN_A() {
    input_r_EN_A = load_input_U0_input_r_EN_A.read();
}

void conv2d::thread_input_r_EN_B() {
    input_r_EN_B = load_input_U0_input_r_EN_B.read();
}

void conv2d::thread_input_r_Rst_A() {
    input_r_Rst_A = ap_rst.read();
}

void conv2d::thread_input_r_Rst_B() {
    input_r_Rst_B = ap_rst.read();
}

void conv2d::thread_input_r_WEN_A() {
    input_r_WEN_A =  (sc_lv<4>) (ap_const_logic_0);
}

void conv2d::thread_input_r_WEN_B() {
    input_r_WEN_B =  (sc_lv<4>) (ap_const_logic_0);
}

void conv2d::thread_kernel_Addr_A() {
    kernel_Addr_A = convolution_kernel_U0_kernel_Addr_A.read();
}

void conv2d::thread_kernel_Addr_B() {
    kernel_Addr_B = convolution_kernel_U0_kernel_Addr_B.read();
}

void conv2d::thread_kernel_Clk_A() {
    kernel_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void conv2d::thread_kernel_Clk_B() {
    kernel_Clk_B = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void conv2d::thread_kernel_Din_A() {
    kernel_Din_A = ap_const_lv32_0;
}

void conv2d::thread_kernel_Din_B() {
    kernel_Din_B = ap_const_lv32_0;
}

void conv2d::thread_kernel_EN_A() {
    kernel_EN_A = convolution_kernel_U0_kernel_EN_A.read();
}

void conv2d::thread_kernel_EN_B() {
    kernel_EN_B = convolution_kernel_U0_kernel_EN_B.read();
}

void conv2d::thread_kernel_Rst_A() {
    kernel_Rst_A = ap_rst.read();
}

void conv2d::thread_kernel_Rst_B() {
    kernel_Rst_B = ap_rst.read();
}

void conv2d::thread_kernel_WEN_A() {
    kernel_WEN_A =  (sc_lv<4>) (ap_const_logic_0);
}

void conv2d::thread_kernel_WEN_B() {
    kernel_WEN_B =  (sc_lv<4>) (ap_const_logic_0);
}

void conv2d::thread_load_input_U0_ap_continue() {
    load_input_U0_ap_continue = buffer_i_full_n.read();
}

void conv2d::thread_load_input_U0_ap_start() {
    load_input_U0_ap_start = (ap_start.read() & (ap_sync_reg_load_input_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void conv2d::thread_load_input_U0_buffer_r_full_n() {
    load_input_U0_buffer_r_full_n = buffer_i_full_n.read();
}

void conv2d::thread_load_input_U0_start_full_n() {
    load_input_U0_start_full_n = ap_const_logic_1;
}

void conv2d::thread_load_input_U0_start_write() {
    load_input_U0_start_write = ap_const_logic_0;
}

void conv2d::thread_output_t_d1() {
    output_t_d1 = ap_const_lv32_0;
}

void conv2d::thread_output_t_we1() {
    output_t_we1 = ap_const_logic_0;
}

void conv2d::thread_result_Addr_A() {
    result_Addr_A = write_output_U0_result_Addr_A.read();
}

void conv2d::thread_result_Addr_B() {
    result_Addr_B = write_output_U0_result_Addr_B.read();
}

void conv2d::thread_result_Clk_A() {
    result_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void conv2d::thread_result_Clk_B() {
    result_Clk_B = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void conv2d::thread_result_Din_A() {
    result_Din_A = write_output_U0_result_Din_A.read();
}

void conv2d::thread_result_Din_B() {
    result_Din_B = write_output_U0_result_Din_B.read();
}

void conv2d::thread_result_EN_A() {
    result_EN_A = write_output_U0_result_EN_A.read();
}

void conv2d::thread_result_EN_B() {
    result_EN_B = write_output_U0_result_EN_B.read();
}

void conv2d::thread_result_Rst_A() {
    result_Rst_A = ap_rst.read();
}

void conv2d::thread_result_Rst_B() {
    result_Rst_B = ap_rst.read();
}

void conv2d::thread_result_WEN_A() {
    result_WEN_A = write_output_U0_result_WEN_A.read();
}

void conv2d::thread_result_WEN_B() {
    result_WEN_B = write_output_U0_result_WEN_B.read();
}

void conv2d::thread_write_output_U0_ap_continue() {
    write_output_U0_ap_continue = ap_const_logic_1;
}

void conv2d::thread_write_output_U0_ap_start() {
    write_output_U0_ap_start = output_t_empty_n.read();
}

void conv2d::thread_write_output_U0_start_full_n() {
    write_output_U0_start_full_n = ap_const_logic_1;
}

void conv2d::thread_write_output_U0_start_write() {
    write_output_U0_start_write = ap_const_logic_0;
}

void conv2d::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"input_r_Addr_A\" :  \"" << input_r_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_EN_A\" :  \"" << input_r_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Din_A\" :  \"" << input_r_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_Dout_A\" :  \"" << input_r_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_WEN_A\" :  \"" << input_r_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Clk_A\" :  \"" << input_r_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Rst_A\" :  \"" << input_r_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Addr_B\" :  \"" << input_r_Addr_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_EN_B\" :  \"" << input_r_EN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Din_B\" :  \"" << input_r_Din_B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_Dout_B\" :  \"" << input_r_Dout_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_WEN_B\" :  \"" << input_r_WEN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Clk_B\" :  \"" << input_r_Clk_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_Rst_B\" :  \"" << input_r_Rst_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Addr_A\" :  \"" << kernel_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_EN_A\" :  \"" << kernel_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Din_A\" :  \"" << kernel_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_Dout_A\" :  \"" << kernel_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_WEN_A\" :  \"" << kernel_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Clk_A\" :  \"" << kernel_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Rst_A\" :  \"" << kernel_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Addr_B\" :  \"" << kernel_Addr_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_EN_B\" :  \"" << kernel_EN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Din_B\" :  \"" << kernel_Din_B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_Dout_B\" :  \"" << kernel_Dout_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_WEN_B\" :  \"" << kernel_WEN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Clk_B\" :  \"" << kernel_Clk_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Rst_B\" :  \"" << kernel_Rst_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Addr_A\" :  \"" << result_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_EN_A\" :  \"" << result_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Din_A\" :  \"" << result_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"result_Dout_A\" :  \"" << result_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_WEN_A\" :  \"" << result_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Clk_A\" :  \"" << result_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Rst_A\" :  \"" << result_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Addr_B\" :  \"" << result_Addr_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_EN_B\" :  \"" << result_EN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Din_B\" :  \"" << result_Din_B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"result_Dout_B\" :  \"" << result_Dout_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_WEN_B\" :  \"" << result_WEN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Clk_B\" :  \"" << result_Clk_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_Rst_B\" :  \"" << result_Rst_B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

