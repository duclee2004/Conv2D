// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolution_kernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolution_kernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolution_kernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> convolution_kernel::ap_ST_fsm_state1 = "1";
const sc_lv<7> convolution_kernel::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<7> convolution_kernel::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<7> convolution_kernel::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<7> convolution_kernel::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<7> convolution_kernel::ap_ST_fsm_pp0_stage4 = "100000";
const sc_lv<7> convolution_kernel::ap_ST_fsm_state11 = "1000000";
const sc_lv<32> convolution_kernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool convolution_kernel::ap_const_boolean_1 = true;
const sc_lv<32> convolution_kernel::ap_const_lv32_2 = "10";
const bool convolution_kernel::ap_const_boolean_0 = false;
const sc_lv<1> convolution_kernel::ap_const_lv1_0 = "0";
const sc_lv<32> convolution_kernel::ap_const_lv32_3 = "11";
const sc_lv<32> convolution_kernel::ap_const_lv32_4 = "100";
const sc_lv<32> convolution_kernel::ap_const_lv32_5 = "101";
const sc_lv<32> convolution_kernel::ap_const_lv32_1 = "1";
const sc_lv<1> convolution_kernel::ap_const_lv1_1 = "1";
const sc_lv<10> convolution_kernel::ap_const_lv10_0 = "0000000000";
const sc_lv<5> convolution_kernel::ap_const_lv5_0 = "00000";
const sc_lv<64> convolution_kernel::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> convolution_kernel::ap_const_lv64_1 = "1";
const sc_lv<64> convolution_kernel::ap_const_lv64_2 = "10";
const sc_lv<64> convolution_kernel::ap_const_lv64_3 = "11";
const sc_lv<64> convolution_kernel::ap_const_lv64_4 = "100";
const sc_lv<64> convolution_kernel::ap_const_lv64_5 = "101";
const sc_lv<64> convolution_kernel::ap_const_lv64_6 = "110";
const sc_lv<64> convolution_kernel::ap_const_lv64_7 = "111";
const sc_lv<64> convolution_kernel::ap_const_lv64_8 = "1000";
const sc_lv<10> convolution_kernel::ap_const_lv10_384 = "1110000100";
const sc_lv<10> convolution_kernel::ap_const_lv10_1 = "1";
const sc_lv<5> convolution_kernel::ap_const_lv5_1E = "11110";
const sc_lv<5> convolution_kernel::ap_const_lv5_1 = "1";
const sc_lv<5> convolution_kernel::ap_const_lv5_2 = "10";
const sc_lv<5> convolution_kernel::ap_const_lv5_3 = "11";
const sc_lv<32> convolution_kernel::ap_const_lv32_6 = "110";
const sc_lv<4> convolution_kernel::ap_const_lv4_0 = "0000";

convolution_kernel::convolution_kernel(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state10_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state8_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage2_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_329_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_264_p4);
    sensitive << ( i_reg_260 );
    sensitive << ( exitcond_flatten_reg_631 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_mid2_v_reg_659 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_indvar_flatten_phi_fu_253_p4);
    sensitive << ( indvar_flatten_reg_249 );
    sensitive << ( exitcond_flatten_reg_631 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( indvar_flatten_next_reg_635 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_j_phi_fu_276_p4);
    sensitive << ( j_reg_272 );
    sensitive << ( exitcond_flatten_reg_631 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( j_1_reg_672 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_64_fu_377_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( tmp_73_fu_450_p1 );
    sensitive << ( tmp_70_fu_461_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_67_fu_483_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_76_fu_505_p1 );
    sensitive << ( ap_block_pp0_stage4 );

    SC_METHOD(thread_buffer_r_address1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_69_fu_396_p1 );
    sensitive << ( tmp_65_fu_433_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_74_fu_472_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_72_fu_494_p1 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_buffer_r_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_exitcond_flatten_fu_329_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_253_p4 );

    SC_METHOD(thread_exitcond_fu_341_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond_flatten_fu_329_p2 );
    sensitive << ( ap_phi_mux_j_phi_fu_276_p4 );

    SC_METHOD(thread_grp_fu_299_p2);
    sensitive << ( reg_283 );
    sensitive << ( reg_287 );

    SC_METHOD(thread_grp_fu_305_p2);
    sensitive << ( reg_291 );
    sensitive << ( reg_295 );

    SC_METHOD(thread_grp_fu_319_p2);
    sensitive << ( reg_311 );
    sensitive << ( reg_315 );

    SC_METHOD(thread_i_2_mid1_fu_401_p2);
    sensitive << ( i_reg_260 );

    SC_METHOD(thread_i_s_fu_355_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_264_p4 );

    SC_METHOD(thread_indvar_flatten_next_fu_335_p2);
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_253_p4 );

    SC_METHOD(thread_j_1_fu_382_p2);
    sensitive << ( j_mid2_fu_347_p3 );

    SC_METHOD(thread_j_mid2_fu_347_p3);
    sensitive << ( exitcond_fu_341_p2 );
    sensitive << ( ap_phi_mux_j_phi_fu_276_p4 );

    SC_METHOD(thread_kernel_Addr_A);
    sensitive << ( kernel_Addr_A_orig );

    SC_METHOD(thread_kernel_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage4 );

    SC_METHOD(thread_kernel_Addr_B);
    sensitive << ( kernel_Addr_B_orig );

    SC_METHOD(thread_kernel_Addr_B_orig);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_kernel_Din_A);

    SC_METHOD(thread_kernel_Din_B);

    SC_METHOD(thread_kernel_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_kernel_EN_B);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_kernel_WEN_A);

    SC_METHOD(thread_kernel_WEN_B);

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_73_cast_fu_581_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( sum_2_2_2_reg_748 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_631_pp0_iter1_reg );

    SC_METHOD(thread_p_shl1_cast_fu_562_p1);
    sensitive << ( tmp_1_fu_555_p3 );

    SC_METHOD(thread_p_shl_cast_fu_551_p1);
    sensitive << ( tmp_fu_544_p3 );

    SC_METHOD(thread_p_v_fu_407_p3);
    sensitive << ( exitcond_reg_640 );
    sensitive << ( i_s_reg_654 );
    sensitive << ( i_2_mid1_fu_401_p2 );

    SC_METHOD(thread_sum_2_2_2_fu_539_p2);
    sensitive << ( tmp1_reg_738 );
    sensitive << ( tmp4_fu_533_p2 );

    SC_METHOD(thread_tmp1_fu_516_p2);
    sensitive << ( reg_325 );
    sensitive << ( tmp3_fu_510_p2 );

    SC_METHOD(thread_tmp3_fu_510_p2);
    sensitive << ( reg_311 );
    sensitive << ( reg_315 );

    SC_METHOD(thread_tmp4_fu_533_p2);
    sensitive << ( reg_325 );
    sensitive << ( tmp6_fu_527_p2 );

    SC_METHOD(thread_tmp6_fu_527_p2);
    sensitive << ( reg_311 );
    sensitive << ( tmp7_fu_522_p2 );

    SC_METHOD(thread_tmp7_fu_522_p2);
    sensitive << ( reg_315 );
    sensitive << ( tmp_6_2_2_reg_743 );

    SC_METHOD(thread_tmp_1_2_mid2_v_fu_420_p2);
    sensitive << ( i_reg_260 );
    sensitive << ( tmp_1_2_mid2_v_v_cas_fu_413_p3 );

    SC_METHOD(thread_tmp_1_2_mid2_v_v_cas_fu_413_p3);
    sensitive << ( exitcond_reg_640 );

    SC_METHOD(thread_tmp_1_fu_555_p3);
    sensitive << ( tmp_mid2_v_reg_659_pp0_iter1_reg );

    SC_METHOD(thread_tmp_2_fu_369_p3);
    sensitive << ( j_mid2_fu_347_p3 );
    sensitive << ( tmp_mid2_v_fu_361_p3 );

    SC_METHOD(thread_tmp_3_0_2_fu_438_p2);
    sensitive << ( j_mid2_reg_646 );

    SC_METHOD(thread_tmp_4_cast_fu_572_p1);
    sensitive << ( j_mid2_reg_646_pp0_iter1_reg );

    SC_METHOD(thread_tmp_4_fu_426_p3);
    sensitive << ( j_mid2_reg_646 );
    sensitive << ( p_v_fu_407_p3 );

    SC_METHOD(thread_tmp_5_fu_388_p3);
    sensitive << ( tmp_mid2_v_fu_361_p3 );
    sensitive << ( j_1_fu_382_p2 );

    SC_METHOD(thread_tmp_64_fu_377_p1);
    sensitive << ( tmp_2_fu_369_p3 );

    SC_METHOD(thread_tmp_65_fu_433_p1);
    sensitive << ( tmp_4_fu_426_p3 );

    SC_METHOD(thread_tmp_66_fu_477_p3);
    sensitive << ( j_mid2_reg_646 );
    sensitive << ( tmp_1_2_mid2_v_reg_690 );

    SC_METHOD(thread_tmp_67_fu_483_p1);
    sensitive << ( tmp_66_fu_477_p3 );

    SC_METHOD(thread_tmp_68_fu_575_p2);
    sensitive << ( tmp_s_fu_566_p2 );
    sensitive << ( tmp_4_cast_fu_572_p1 );

    SC_METHOD(thread_tmp_69_fu_396_p1);
    sensitive << ( tmp_5_fu_388_p3 );

    SC_METHOD(thread_tmp_70_fu_461_p1);
    sensitive << ( tmp_7_fu_455_p3 );

    SC_METHOD(thread_tmp_71_fu_488_p3);
    sensitive << ( j_1_reg_672 );
    sensitive << ( tmp_1_2_mid2_v_reg_690 );

    SC_METHOD(thread_tmp_72_fu_494_p1);
    sensitive << ( tmp_71_fu_488_p3 );

    SC_METHOD(thread_tmp_73_cast_fu_581_p1);
    sensitive << ( tmp_68_fu_575_p2 );

    SC_METHOD(thread_tmp_73_fu_450_p1);
    sensitive << ( tmp_8_fu_443_p3 );

    SC_METHOD(thread_tmp_74_fu_472_p1);
    sensitive << ( tmp_9_fu_466_p3 );

    SC_METHOD(thread_tmp_75_fu_499_p3);
    sensitive << ( tmp_1_2_mid2_v_reg_690 );
    sensitive << ( tmp_3_0_2_reg_702 );

    SC_METHOD(thread_tmp_76_fu_505_p1);
    sensitive << ( tmp_75_fu_499_p3 );

    SC_METHOD(thread_tmp_7_fu_455_p3);
    sensitive << ( j_1_reg_672 );
    sensitive << ( p_v_reg_684 );

    SC_METHOD(thread_tmp_8_fu_443_p3);
    sensitive << ( tmp_mid2_v_reg_659 );
    sensitive << ( tmp_3_0_2_fu_438_p2 );

    SC_METHOD(thread_tmp_9_fu_466_p3);
    sensitive << ( p_v_reg_684 );
    sensitive << ( tmp_3_0_2_reg_702 );

    SC_METHOD(thread_tmp_fu_544_p3);
    sensitive << ( tmp_mid2_v_reg_659_pp0_iter1_reg );

    SC_METHOD(thread_tmp_mid2_v_fu_361_p3);
    sensitive << ( exitcond_fu_341_p2 );
    sensitive << ( i_s_fu_355_p2 );
    sensitive << ( ap_phi_mux_i_phi_fu_264_p4 );

    SC_METHOD(thread_tmp_s_fu_566_p2);
    sensitive << ( p_shl_cast_fu_551_p1 );
    sensitive << ( p_shl1_cast_fu_562_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_fu_329_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolution_kernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_q0, "(port)buffer_r_q0");
    sc_trace(mVcdFile, buffer_r_address1, "(port)buffer_r_address1");
    sc_trace(mVcdFile, buffer_r_ce1, "(port)buffer_r_ce1");
    sc_trace(mVcdFile, buffer_r_q1, "(port)buffer_r_q1");
    sc_trace(mVcdFile, kernel_Addr_A, "(port)kernel_Addr_A");
    sc_trace(mVcdFile, kernel_EN_A, "(port)kernel_EN_A");
    sc_trace(mVcdFile, kernel_WEN_A, "(port)kernel_WEN_A");
    sc_trace(mVcdFile, kernel_Din_A, "(port)kernel_Din_A");
    sc_trace(mVcdFile, kernel_Dout_A, "(port)kernel_Dout_A");
    sc_trace(mVcdFile, kernel_Addr_B, "(port)kernel_Addr_B");
    sc_trace(mVcdFile, kernel_EN_B, "(port)kernel_EN_B");
    sc_trace(mVcdFile, kernel_WEN_B, "(port)kernel_WEN_B");
    sc_trace(mVcdFile, kernel_Din_B, "(port)kernel_Din_B");
    sc_trace(mVcdFile, kernel_Dout_B, "(port)kernel_Dout_B");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_249, "indvar_flatten_reg_249");
    sc_trace(mVcdFile, i_reg_260, "i_reg_260");
    sc_trace(mVcdFile, j_reg_272, "j_reg_272");
    sc_trace(mVcdFile, reg_283, "reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage1_iter1, "ap_block_state8_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_631, "exitcond_flatten_reg_631");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage2_iter0, "ap_block_state4_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage2_iter1, "ap_block_state9_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage3_iter0, "ap_block_state5_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage3_iter1, "ap_block_state10_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage4_iter0, "ap_block_state6_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter1, "ap_block_state7_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, reg_287, "reg_287");
    sc_trace(mVcdFile, reg_291, "reg_291");
    sc_trace(mVcdFile, reg_295, "reg_295");
    sc_trace(mVcdFile, grp_fu_299_p2, "grp_fu_299_p2");
    sc_trace(mVcdFile, reg_311, "reg_311");
    sc_trace(mVcdFile, grp_fu_305_p2, "grp_fu_305_p2");
    sc_trace(mVcdFile, reg_315, "reg_315");
    sc_trace(mVcdFile, grp_fu_319_p2, "grp_fu_319_p2");
    sc_trace(mVcdFile, reg_325, "reg_325");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, exitcond_flatten_fu_329_p2, "exitcond_flatten_fu_329_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_631_pp0_iter1_reg, "exitcond_flatten_reg_631_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_335_p2, "indvar_flatten_next_fu_335_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_635, "indvar_flatten_next_reg_635");
    sc_trace(mVcdFile, exitcond_fu_341_p2, "exitcond_fu_341_p2");
    sc_trace(mVcdFile, exitcond_reg_640, "exitcond_reg_640");
    sc_trace(mVcdFile, j_mid2_fu_347_p3, "j_mid2_fu_347_p3");
    sc_trace(mVcdFile, j_mid2_reg_646, "j_mid2_reg_646");
    sc_trace(mVcdFile, j_mid2_reg_646_pp0_iter1_reg, "j_mid2_reg_646_pp0_iter1_reg");
    sc_trace(mVcdFile, i_s_fu_355_p2, "i_s_fu_355_p2");
    sc_trace(mVcdFile, i_s_reg_654, "i_s_reg_654");
    sc_trace(mVcdFile, tmp_mid2_v_fu_361_p3, "tmp_mid2_v_fu_361_p3");
    sc_trace(mVcdFile, tmp_mid2_v_reg_659, "tmp_mid2_v_reg_659");
    sc_trace(mVcdFile, tmp_mid2_v_reg_659_pp0_iter1_reg, "tmp_mid2_v_reg_659_pp0_iter1_reg");
    sc_trace(mVcdFile, j_1_fu_382_p2, "j_1_fu_382_p2");
    sc_trace(mVcdFile, j_1_reg_672, "j_1_reg_672");
    sc_trace(mVcdFile, p_v_fu_407_p3, "p_v_fu_407_p3");
    sc_trace(mVcdFile, p_v_reg_684, "p_v_reg_684");
    sc_trace(mVcdFile, tmp_1_2_mid2_v_fu_420_p2, "tmp_1_2_mid2_v_fu_420_p2");
    sc_trace(mVcdFile, tmp_1_2_mid2_v_reg_690, "tmp_1_2_mid2_v_reg_690");
    sc_trace(mVcdFile, tmp_3_0_2_fu_438_p2, "tmp_3_0_2_fu_438_p2");
    sc_trace(mVcdFile, tmp_3_0_2_reg_702, "tmp_3_0_2_reg_702");
    sc_trace(mVcdFile, tmp1_fu_516_p2, "tmp1_fu_516_p2");
    sc_trace(mVcdFile, tmp1_reg_738, "tmp1_reg_738");
    sc_trace(mVcdFile, tmp_6_2_2_reg_743, "tmp_6_2_2_reg_743");
    sc_trace(mVcdFile, sum_2_2_2_fu_539_p2, "sum_2_2_2_fu_539_p2");
    sc_trace(mVcdFile, sum_2_2_2_reg_748, "sum_2_2_2_reg_748");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_phi_mux_indvar_flatten_phi_fu_253_p4, "ap_phi_mux_indvar_flatten_phi_fu_253_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_264_p4, "ap_phi_mux_i_phi_fu_264_p4");
    sc_trace(mVcdFile, ap_phi_mux_j_phi_fu_276_p4, "ap_phi_mux_j_phi_fu_276_p4");
    sc_trace(mVcdFile, tmp_64_fu_377_p1, "tmp_64_fu_377_p1");
    sc_trace(mVcdFile, tmp_69_fu_396_p1, "tmp_69_fu_396_p1");
    sc_trace(mVcdFile, tmp_65_fu_433_p1, "tmp_65_fu_433_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, tmp_73_fu_450_p1, "tmp_73_fu_450_p1");
    sc_trace(mVcdFile, tmp_70_fu_461_p1, "tmp_70_fu_461_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, tmp_74_fu_472_p1, "tmp_74_fu_472_p1");
    sc_trace(mVcdFile, tmp_67_fu_483_p1, "tmp_67_fu_483_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, tmp_72_fu_494_p1, "tmp_72_fu_494_p1");
    sc_trace(mVcdFile, tmp_76_fu_505_p1, "tmp_76_fu_505_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, tmp_73_cast_fu_581_p1, "tmp_73_cast_fu_581_p1");
    sc_trace(mVcdFile, kernel_Addr_A_orig, "kernel_Addr_A_orig");
    sc_trace(mVcdFile, kernel_Addr_B_orig, "kernel_Addr_B_orig");
    sc_trace(mVcdFile, tmp_2_fu_369_p3, "tmp_2_fu_369_p3");
    sc_trace(mVcdFile, tmp_5_fu_388_p3, "tmp_5_fu_388_p3");
    sc_trace(mVcdFile, i_2_mid1_fu_401_p2, "i_2_mid1_fu_401_p2");
    sc_trace(mVcdFile, tmp_1_2_mid2_v_v_cas_fu_413_p3, "tmp_1_2_mid2_v_v_cas_fu_413_p3");
    sc_trace(mVcdFile, tmp_4_fu_426_p3, "tmp_4_fu_426_p3");
    sc_trace(mVcdFile, tmp_8_fu_443_p3, "tmp_8_fu_443_p3");
    sc_trace(mVcdFile, tmp_7_fu_455_p3, "tmp_7_fu_455_p3");
    sc_trace(mVcdFile, tmp_9_fu_466_p3, "tmp_9_fu_466_p3");
    sc_trace(mVcdFile, tmp_66_fu_477_p3, "tmp_66_fu_477_p3");
    sc_trace(mVcdFile, tmp_71_fu_488_p3, "tmp_71_fu_488_p3");
    sc_trace(mVcdFile, tmp_75_fu_499_p3, "tmp_75_fu_499_p3");
    sc_trace(mVcdFile, tmp3_fu_510_p2, "tmp3_fu_510_p2");
    sc_trace(mVcdFile, tmp7_fu_522_p2, "tmp7_fu_522_p2");
    sc_trace(mVcdFile, tmp6_fu_527_p2, "tmp6_fu_527_p2");
    sc_trace(mVcdFile, tmp4_fu_533_p2, "tmp4_fu_533_p2");
    sc_trace(mVcdFile, tmp_fu_544_p3, "tmp_fu_544_p3");
    sc_trace(mVcdFile, tmp_1_fu_555_p3, "tmp_1_fu_555_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_551_p1, "p_shl_cast_fu_551_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_562_p1, "p_shl1_cast_fu_562_p1");
    sc_trace(mVcdFile, tmp_s_fu_566_p2, "tmp_s_fu_566_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_572_p1, "tmp_4_cast_fu_572_p1");
    sc_trace(mVcdFile, tmp_68_fu_575_p2, "tmp_68_fu_575_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

convolution_kernel::~convolution_kernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void convolution_kernel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_260 = tmp_mid2_v_reg_659.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_260 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_249 = indvar_flatten_next_reg_635.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_249 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_reg_272 = j_1_reg_672.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        j_reg_272 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_631 = exitcond_flatten_fu_329_p2.read();
        exitcond_flatten_reg_631_pp0_iter1_reg = exitcond_flatten_reg_631.read();
        j_mid2_reg_646_pp0_iter1_reg = j_mid2_reg_646.read();
        tmp_mid2_v_reg_659_pp0_iter1_reg = tmp_mid2_v_reg_659.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_329_p2.read()))) {
        exitcond_reg_640 = exitcond_fu_341_p2.read();
        i_s_reg_654 = i_s_fu_355_p2.read();
        j_mid2_reg_646 = j_mid2_fu_347_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_next_reg_635 = indvar_flatten_next_fu_335_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_329_p2.read()))) {
        j_1_reg_672 = j_1_fu_382_p2.read();
        tmp_mid2_v_reg_659 = tmp_mid2_v_fu_361_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0))) {
        p_v_reg_684 = p_v_fu_407_p3.read();
        tmp_1_2_mid2_v_reg_690 = tmp_1_2_mid2_v_fu_420_p2.read();
        tmp_3_0_2_reg_702 = tmp_3_0_2_fu_438_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_283 = buffer_r_q0.read();
        reg_287 = kernel_Dout_A.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)))) {
        reg_291 = buffer_r_q1.read();
        reg_295 = kernel_Dout_B.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_311 = grp_fu_299_p2.read();
        reg_315 = grp_fu_305_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_325 = grp_fu_319_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_631_pp0_iter1_reg.read()))) {
        sum_2_2_2_reg_748 = sum_2_2_2_fu_539_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        tmp1_reg_738 = tmp1_fu_516_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_631_pp0_iter1_reg.read()))) {
        tmp_6_2_2_reg_743 = grp_fu_299_p2.read();
    }
}

void convolution_kernel::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void convolution_kernel::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void convolution_kernel::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[3];
}

void convolution_kernel::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[4];
}

void convolution_kernel::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[5];
}

void convolution_kernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolution_kernel::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[6];
}

void convolution_kernel::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void convolution_kernel::thread_ap_block_state10_pp0_stage3_iter1() {
    ap_block_state10_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state4_pp0_stage2_iter0() {
    ap_block_state4_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state5_pp0_stage3_iter0() {
    ap_block_state5_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state6_pp0_stage4_iter0() {
    ap_block_state6_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state7_pp0_stage0_iter1() {
    ap_block_state7_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state8_pp0_stage1_iter1() {
    ap_block_state8_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_block_state9_pp0_stage2_iter1() {
    ap_block_state9_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void convolution_kernel::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_329_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void convolution_kernel::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void convolution_kernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolution_kernel::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_ap_phi_mux_i_phi_fu_264_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_phi_fu_264_p4 = tmp_mid2_v_reg_659.read();
    } else {
        ap_phi_mux_i_phi_fu_264_p4 = i_reg_260.read();
    }
}

void convolution_kernel::thread_ap_phi_mux_indvar_flatten_phi_fu_253_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = indvar_flatten_next_reg_635.read();
    } else {
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = indvar_flatten_reg_249.read();
    }
}

void convolution_kernel::thread_ap_phi_mux_j_phi_fu_276_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_631.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_j_phi_fu_276_p4 = j_1_reg_672.read();
    } else {
        ap_phi_mux_j_phi_fu_276_p4 = j_reg_272.read();
    }
}

void convolution_kernel::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolution_kernel::thread_buffer_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            buffer_r_address0 =  (sc_lv<10>) (tmp_76_fu_505_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            buffer_r_address0 =  (sc_lv<10>) (tmp_67_fu_483_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            buffer_r_address0 =  (sc_lv<10>) (tmp_70_fu_461_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            buffer_r_address0 =  (sc_lv<10>) (tmp_73_fu_450_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            buffer_r_address0 =  (sc_lv<10>) (tmp_64_fu_377_p1.read());
        } else {
            buffer_r_address0 = "XXXXXXXXXX";
        }
    } else {
        buffer_r_address0 = "XXXXXXXXXX";
    }
}

void convolution_kernel::thread_buffer_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            buffer_r_address1 =  (sc_lv<10>) (tmp_72_fu_494_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            buffer_r_address1 =  (sc_lv<10>) (tmp_74_fu_472_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            buffer_r_address1 =  (sc_lv<10>) (tmp_65_fu_433_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            buffer_r_address1 =  (sc_lv<10>) (tmp_69_fu_396_p1.read());
        } else {
            buffer_r_address1 = "XXXXXXXXXX";
        }
    } else {
        buffer_r_address1 = "XXXXXXXXXX";
    }
}

void convolution_kernel::thread_buffer_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_buffer_r_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        buffer_r_ce1 = ap_const_logic_1;
    } else {
        buffer_r_ce1 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_exitcond_flatten_fu_329_p2() {
    exitcond_flatten_fu_329_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_253_p4.read().is_01() || !ap_const_lv10_384.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_flatten_phi_fu_253_p4.read() == ap_const_lv10_384);
}

void convolution_kernel::thread_exitcond_fu_341_p2() {
    exitcond_fu_341_p2 = (!ap_phi_mux_j_phi_fu_276_p4.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_j_phi_fu_276_p4.read() == ap_const_lv5_1E);
}

void convolution_kernel::thread_grp_fu_299_p2() {
    grp_fu_299_p2 = (!reg_287.read().is_01() || !reg_283.read().is_01())? sc_lv<32>(): sc_bigint<32>(reg_287.read()) * sc_bigint<32>(reg_283.read());
}

void convolution_kernel::thread_grp_fu_305_p2() {
    grp_fu_305_p2 = (!reg_295.read().is_01() || !reg_291.read().is_01())? sc_lv<32>(): sc_bigint<32>(reg_295.read()) * sc_bigint<32>(reg_291.read());
}

void convolution_kernel::thread_grp_fu_319_p2() {
    grp_fu_319_p2 = (!reg_315.read().is_01() || !reg_311.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_315.read()) + sc_biguint<32>(reg_311.read()));
}

void convolution_kernel::thread_i_2_mid1_fu_401_p2() {
    i_2_mid1_fu_401_p2 = (!i_reg_260.read().is_01() || !ap_const_lv5_2.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_260.read()) + sc_biguint<5>(ap_const_lv5_2));
}

void convolution_kernel::thread_i_s_fu_355_p2() {
    i_s_fu_355_p2 = (!ap_phi_mux_i_phi_fu_264_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_phi_fu_264_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void convolution_kernel::thread_indvar_flatten_next_fu_335_p2() {
    indvar_flatten_next_fu_335_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_253_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_indvar_flatten_phi_fu_253_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void convolution_kernel::thread_j_1_fu_382_p2() {
    j_1_fu_382_p2 = (!j_mid2_fu_347_p3.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_mid2_fu_347_p3.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void convolution_kernel::thread_j_mid2_fu_347_p3() {
    j_mid2_fu_347_p3 = (!exitcond_fu_341_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond_fu_341_p2.read()[0].to_bool())? ap_const_lv5_0: ap_phi_mux_j_phi_fu_276_p4.read());
}

void convolution_kernel::thread_kernel_Addr_A() {
    kernel_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): kernel_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void convolution_kernel::thread_kernel_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            kernel_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_8);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            kernel_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_6);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            kernel_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_4);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            kernel_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            kernel_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_0);
        } else {
            kernel_Addr_A_orig =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        kernel_Addr_A_orig =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void convolution_kernel::thread_kernel_Addr_B() {
    kernel_Addr_B = (!ap_const_lv32_2.is_01())? sc_lv<32>(): kernel_Addr_B_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void convolution_kernel::thread_kernel_Addr_B_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            kernel_Addr_B_orig =  (sc_lv<32>) (ap_const_lv64_7);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            kernel_Addr_B_orig =  (sc_lv<32>) (ap_const_lv64_5);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            kernel_Addr_B_orig =  (sc_lv<32>) (ap_const_lv64_3);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            kernel_Addr_B_orig =  (sc_lv<32>) (ap_const_lv64_1);
        } else {
            kernel_Addr_B_orig =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        kernel_Addr_B_orig =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void convolution_kernel::thread_kernel_Din_A() {
    kernel_Din_A = ap_const_lv32_0;
}

void convolution_kernel::thread_kernel_Din_B() {
    kernel_Din_B = ap_const_lv32_0;
}

void convolution_kernel::thread_kernel_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        kernel_EN_A = ap_const_logic_1;
    } else {
        kernel_EN_A = ap_const_logic_0;
    }
}

void convolution_kernel::thread_kernel_EN_B() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        kernel_EN_B = ap_const_logic_1;
    } else {
        kernel_EN_B = ap_const_logic_0;
    }
}

void convolution_kernel::thread_kernel_WEN_A() {
    kernel_WEN_A = ap_const_lv4_0;
}

void convolution_kernel::thread_kernel_WEN_B() {
    kernel_WEN_B = ap_const_lv4_0;
}

void convolution_kernel::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<10>) (tmp_73_cast_fu_581_p1.read());
}

void convolution_kernel::thread_output_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_output_r_d0() {
    output_r_d0 = sum_2_2_2_reg_748.read();
}

void convolution_kernel::thread_output_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_631_pp0_iter1_reg.read()))) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_p_shl1_cast_fu_562_p1() {
    p_shl1_cast_fu_562_p1 = esl_zext<11,6>(tmp_1_fu_555_p3.read());
}

void convolution_kernel::thread_p_shl_cast_fu_551_p1() {
    p_shl_cast_fu_551_p1 = esl_zext<11,10>(tmp_fu_544_p3.read());
}

void convolution_kernel::thread_p_v_fu_407_p3() {
    p_v_fu_407_p3 = (!exitcond_reg_640.read()[0].is_01())? sc_lv<5>(): ((exitcond_reg_640.read()[0].to_bool())? i_2_mid1_fu_401_p2.read(): i_s_reg_654.read());
}

void convolution_kernel::thread_sum_2_2_2_fu_539_p2() {
    sum_2_2_2_fu_539_p2 = (!tmp1_reg_738.read().is_01() || !tmp4_fu_533_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp1_reg_738.read()) + sc_biguint<32>(tmp4_fu_533_p2.read()));
}

void convolution_kernel::thread_tmp1_fu_516_p2() {
    tmp1_fu_516_p2 = (!reg_325.read().is_01() || !tmp3_fu_510_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_325.read()) + sc_biguint<32>(tmp3_fu_510_p2.read()));
}

void convolution_kernel::thread_tmp3_fu_510_p2() {
    tmp3_fu_510_p2 = (!reg_315.read().is_01() || !reg_311.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_315.read()) + sc_biguint<32>(reg_311.read()));
}

void convolution_kernel::thread_tmp4_fu_533_p2() {
    tmp4_fu_533_p2 = (!reg_325.read().is_01() || !tmp6_fu_527_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_325.read()) + sc_biguint<32>(tmp6_fu_527_p2.read()));
}

void convolution_kernel::thread_tmp6_fu_527_p2() {
    tmp6_fu_527_p2 = (!reg_311.read().is_01() || !tmp7_fu_522_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_311.read()) + sc_biguint<32>(tmp7_fu_522_p2.read()));
}

void convolution_kernel::thread_tmp7_fu_522_p2() {
    tmp7_fu_522_p2 = (!tmp_6_2_2_reg_743.read().is_01() || !reg_315.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_2_2_reg_743.read()) + sc_biguint<32>(reg_315.read()));
}

void convolution_kernel::thread_tmp_1_2_mid2_v_fu_420_p2() {
    tmp_1_2_mid2_v_fu_420_p2 = (!i_reg_260.read().is_01() || !tmp_1_2_mid2_v_v_cas_fu_413_p3.read().is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_260.read()) + sc_biguint<5>(tmp_1_2_mid2_v_v_cas_fu_413_p3.read()));
}

void convolution_kernel::thread_tmp_1_2_mid2_v_v_cas_fu_413_p3() {
    tmp_1_2_mid2_v_v_cas_fu_413_p3 = (!exitcond_reg_640.read()[0].is_01())? sc_lv<5>(): ((exitcond_reg_640.read()[0].to_bool())? ap_const_lv5_3: ap_const_lv5_2);
}

void convolution_kernel::thread_tmp_1_fu_555_p3() {
    tmp_1_fu_555_p3 = esl_concat<5,1>(tmp_mid2_v_reg_659_pp0_iter1_reg.read(), ap_const_lv1_0);
}

void convolution_kernel::thread_tmp_2_fu_369_p3() {
    tmp_2_fu_369_p3 = esl_concat<5,5>(tmp_mid2_v_fu_361_p3.read(), j_mid2_fu_347_p3.read());
}

void convolution_kernel::thread_tmp_3_0_2_fu_438_p2() {
    tmp_3_0_2_fu_438_p2 = (!j_mid2_reg_646.read().is_01() || !ap_const_lv5_2.is_01())? sc_lv<5>(): (sc_biguint<5>(j_mid2_reg_646.read()) + sc_biguint<5>(ap_const_lv5_2));
}

void convolution_kernel::thread_tmp_4_cast_fu_572_p1() {
    tmp_4_cast_fu_572_p1 = esl_zext<11,5>(j_mid2_reg_646_pp0_iter1_reg.read());
}

void convolution_kernel::thread_tmp_4_fu_426_p3() {
    tmp_4_fu_426_p3 = esl_concat<5,5>(p_v_fu_407_p3.read(), j_mid2_reg_646.read());
}

void convolution_kernel::thread_tmp_5_fu_388_p3() {
    tmp_5_fu_388_p3 = esl_concat<5,5>(tmp_mid2_v_fu_361_p3.read(), j_1_fu_382_p2.read());
}

void convolution_kernel::thread_tmp_64_fu_377_p1() {
    tmp_64_fu_377_p1 = esl_zext<64,10>(tmp_2_fu_369_p3.read());
}

void convolution_kernel::thread_tmp_65_fu_433_p1() {
    tmp_65_fu_433_p1 = esl_zext<64,10>(tmp_4_fu_426_p3.read());
}

void convolution_kernel::thread_tmp_66_fu_477_p3() {
    tmp_66_fu_477_p3 = esl_concat<5,5>(tmp_1_2_mid2_v_reg_690.read(), j_mid2_reg_646.read());
}

void convolution_kernel::thread_tmp_67_fu_483_p1() {
    tmp_67_fu_483_p1 = esl_zext<64,10>(tmp_66_fu_477_p3.read());
}

void convolution_kernel::thread_tmp_68_fu_575_p2() {
    tmp_68_fu_575_p2 = (!tmp_s_fu_566_p2.read().is_01() || !tmp_4_cast_fu_572_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_s_fu_566_p2.read()) + sc_biguint<11>(tmp_4_cast_fu_572_p1.read()));
}

void convolution_kernel::thread_tmp_69_fu_396_p1() {
    tmp_69_fu_396_p1 = esl_zext<64,10>(tmp_5_fu_388_p3.read());
}

void convolution_kernel::thread_tmp_70_fu_461_p1() {
    tmp_70_fu_461_p1 = esl_zext<64,10>(tmp_7_fu_455_p3.read());
}

void convolution_kernel::thread_tmp_71_fu_488_p3() {
    tmp_71_fu_488_p3 = esl_concat<5,5>(tmp_1_2_mid2_v_reg_690.read(), j_1_reg_672.read());
}

void convolution_kernel::thread_tmp_72_fu_494_p1() {
    tmp_72_fu_494_p1 = esl_zext<64,10>(tmp_71_fu_488_p3.read());
}

void convolution_kernel::thread_tmp_73_cast_fu_581_p1() {
    tmp_73_cast_fu_581_p1 = esl_zext<64,11>(tmp_68_fu_575_p2.read());
}

void convolution_kernel::thread_tmp_73_fu_450_p1() {
    tmp_73_fu_450_p1 = esl_zext<64,10>(tmp_8_fu_443_p3.read());
}

void convolution_kernel::thread_tmp_74_fu_472_p1() {
    tmp_74_fu_472_p1 = esl_zext<64,10>(tmp_9_fu_466_p3.read());
}

void convolution_kernel::thread_tmp_75_fu_499_p3() {
    tmp_75_fu_499_p3 = esl_concat<5,5>(tmp_1_2_mid2_v_reg_690.read(), tmp_3_0_2_reg_702.read());
}

void convolution_kernel::thread_tmp_76_fu_505_p1() {
    tmp_76_fu_505_p1 = esl_zext<64,10>(tmp_75_fu_499_p3.read());
}

void convolution_kernel::thread_tmp_7_fu_455_p3() {
    tmp_7_fu_455_p3 = esl_concat<5,5>(p_v_reg_684.read(), j_1_reg_672.read());
}

void convolution_kernel::thread_tmp_8_fu_443_p3() {
    tmp_8_fu_443_p3 = esl_concat<5,5>(tmp_mid2_v_reg_659.read(), tmp_3_0_2_fu_438_p2.read());
}

void convolution_kernel::thread_tmp_9_fu_466_p3() {
    tmp_9_fu_466_p3 = esl_concat<5,5>(p_v_reg_684.read(), tmp_3_0_2_reg_702.read());
}

void convolution_kernel::thread_tmp_fu_544_p3() {
    tmp_fu_544_p3 = esl_concat<5,5>(tmp_mid2_v_reg_659_pp0_iter1_reg.read(), ap_const_lv5_0);
}

void convolution_kernel::thread_tmp_mid2_v_fu_361_p3() {
    tmp_mid2_v_fu_361_p3 = (!exitcond_fu_341_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond_fu_341_p2.read()[0].to_bool())? i_s_fu_355_p2.read(): ap_phi_mux_i_phi_fu_264_p4.read());
}

void convolution_kernel::thread_tmp_s_fu_566_p2() {
    tmp_s_fu_566_p2 = (!p_shl_cast_fu_551_p1.read().is_01() || !p_shl1_cast_fu_562_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_551_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_562_p1.read()));
}

void convolution_kernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_329_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_329_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

