-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=6435,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=557,HLS_SYN_LUT=943,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_140 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_i_reg_151 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_i_reg_162 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten6_reg_173 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i3_reg_184 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i7_reg_195 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_mid2_v_fu_246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_mid2_v_reg_384 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_cast_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_reg_389 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten8_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten8_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_flatten8_reg_404_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next7_fu_293_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal j_i7_mid2_fu_311_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i7_mid2_reg_413 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i5_mid2_v_fu_319_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i5_mid2_v_reg_418 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_cast_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_reg_430 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_convolution_kernel_fu_206_ap_ready : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_kernel_fu_206_ap_start : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_ap_idle : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution_kernel_fu_206_buffer_r_ce0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution_kernel_fu_206_buffer_r_ce1 : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_kernel_fu_206_kernel_ce0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_kernel_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_kernel_fu_206_kernel_ce1 : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution_kernel_fu_206_output_r_ce0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_output_r_we0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_206_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_i_phi_fu_155_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_i3_phi_fu_188_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_convolution_kernel_fu_206_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i3_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_254_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_i_mid2_fu_238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_i_cast_fu_266_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_cast_fu_262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_270_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_299_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_344_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_340_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_351_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_355_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i1_cast_fu_361_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component convolution_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce1 : OUT STD_LOGIC;
        kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component conv2d_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => input_r_q0,
        q0 => buffer_q0,
        address1 => grp_convolution_kernel_fu_206_buffer_r_address1,
        ce1 => buffer_ce1,
        q1 => buffer_q1);

    output_U : component conv2d_output
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => grp_convolution_kernel_fu_206_output_r_d0,
        q0 => output_q0);

    grp_convolution_kernel_fu_206 : component convolution_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_kernel_fu_206_ap_start,
        ap_done => grp_convolution_kernel_fu_206_ap_done,
        ap_idle => grp_convolution_kernel_fu_206_ap_idle,
        ap_ready => grp_convolution_kernel_fu_206_ap_ready,
        buffer_r_address0 => grp_convolution_kernel_fu_206_buffer_r_address0,
        buffer_r_ce0 => grp_convolution_kernel_fu_206_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        buffer_r_address1 => grp_convolution_kernel_fu_206_buffer_r_address1,
        buffer_r_ce1 => grp_convolution_kernel_fu_206_buffer_r_ce1,
        buffer_r_q1 => buffer_q1,
        kernel_address0 => grp_convolution_kernel_fu_206_kernel_address0,
        kernel_ce0 => grp_convolution_kernel_fu_206_kernel_ce0,
        kernel_q0 => kernel_q0,
        kernel_address1 => grp_convolution_kernel_fu_206_kernel_address1,
        kernel_ce1 => grp_convolution_kernel_fu_206_kernel_ce1,
        kernel_q1 => kernel_q1,
        output_r_address0 => grp_convolution_kernel_fu_206_output_r_address0,
        output_r_ce0 => grp_convolution_kernel_fu_206_output_r_ce0,
        output_r_we0 => grp_convolution_kernel_fu_206_output_r_we0,
        output_r_d0 => grp_convolution_kernel_fu_206_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_206_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_206_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_kernel_fu_206_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_kernel_fu_206_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_convolution_kernel_fu_206_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_kernel_fu_206_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_kernel_fu_206_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i3_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_i3_reg_184 <= tmp_i5_mid2_v_reg_418;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_206_ap_done = ap_const_logic_1))) then 
                i_i3_reg_184 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_i_reg_151 <= tmp_i_mid2_v_reg_384;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_151 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten6_reg_173 <= indvar_flatten_next7_fu_293_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_206_ap_done = ap_const_logic_1))) then 
                indvar_flatten6_reg_173 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_140 <= indvar_flatten_next_fu_220_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_140 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_i7_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_i7_reg_195 <= j_2_fu_327_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_206_ap_done = ap_const_logic_1))) then 
                j_i7_reg_195 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_i_reg_162 <= j_fu_281_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_i_reg_162 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_flatten8_reg_404 <= exitcond_flatten8_fu_287_p2;
                exitcond_flatten8_reg_404_pp1_iter1_reg <= exitcond_flatten8_reg_404;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_375 <= exitcond_flatten_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                j_i7_mid2_reg_413 <= j_i7_mid2_fu_311_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp_22_cast_reg_389(11 downto 0) <= tmp_22_cast_fu_276_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_26_cast_reg_430 <= tmp_26_cast_fu_370_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_i5_mid2_v_reg_418 <= tmp_i5_mid2_v_fu_319_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_i_mid2_v_reg_384 <= tmp_i_mid2_v_fu_246_p3;
            end if;
        end if;
    end process;
    tmp_22_cast_reg_389(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_214_p2, ap_enable_reg_pp0_iter0, exitcond_flatten8_fu_287_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, grp_convolution_kernel_fu_206_ap_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_flatten_fu_214_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_flatten_fu_214_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_206_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond_flatten8_fu_287_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((exitcond_flatten8_fu_287_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_214_p2)
    begin
        if ((exitcond_flatten_fu_214_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(exitcond_flatten8_fu_287_p2)
    begin
        if ((exitcond_flatten8_fu_287_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i3_phi_fu_188_p4_assign_proc : process(i_i3_reg_184, exitcond_flatten8_reg_404, ap_CS_fsm_pp1_stage0, tmp_i5_mid2_v_reg_418, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((exitcond_flatten8_reg_404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_i3_phi_fu_188_p4 <= tmp_i5_mid2_v_reg_418;
        else 
            ap_phi_mux_i_i3_phi_fu_188_p4 <= i_i3_reg_184;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_155_p4_assign_proc : process(i_i_reg_151, exitcond_flatten_reg_375, ap_CS_fsm_pp0_stage0, tmp_i_mid2_v_reg_384, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_i_phi_fu_155_p4 <= tmp_i_mid2_v_reg_384;
        else 
            ap_phi_mux_i_i_phi_fu_155_p4 <= i_i_reg_151;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_22_cast_reg_389, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, grp_convolution_kernel_fu_206_buffer_r_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_address0 <= tmp_22_cast_reg_389(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_address0 <= grp_convolution_kernel_fu_206_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, grp_convolution_kernel_fu_206_buffer_r_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_ce0 <= grp_convolution_kernel_fu_206_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_CS_fsm_state5, grp_convolution_kernel_fu_206_buffer_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_ce1 <= grp_convolution_kernel_fu_206_buffer_r_ce1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we0_assign_proc : process(exitcond_flatten_reg_375, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_we0 <= ap_const_logic_1;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten8_fu_287_p2 <= "1" when (indvar_flatten6_reg_173 = ap_const_lv10_384) else "0";
    exitcond_flatten_fu_214_p2 <= "1" when (indvar_flatten_reg_140 = ap_const_lv11_400) else "0";
    exitcond_i3_fu_232_p2 <= "1" when (j_i_reg_162 = ap_const_lv6_20) else "0";
    exitcond_i_fu_305_p2 <= "1" when (j_i7_reg_195 = ap_const_lv5_1E) else "0";
    grp_convolution_kernel_fu_206_ap_start <= grp_convolution_kernel_fu_206_ap_start_reg;
    i_1_fu_299_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i3_phi_fu_188_p4) + unsigned(ap_const_lv5_1));
    i_fu_226_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_phi_fu_155_p4) + unsigned(ap_const_lv6_1));
    indvar_flatten_next7_fu_293_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_173) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_220_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_140) + unsigned(ap_const_lv11_1));
    input_r_address0 <= tmp_22_cast_fu_276_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_327_p2 <= std_logic_vector(unsigned(j_i7_mid2_fu_311_p3) + unsigned(ap_const_lv5_1));
    j_fu_281_p2 <= std_logic_vector(unsigned(j_i_mid2_fu_238_p3) + unsigned(ap_const_lv6_1));
    j_i7_mid2_fu_311_p3 <= 
        ap_const_lv5_0 when (exitcond_i_fu_305_p2(0) = '1') else 
        j_i7_reg_195;
    j_i_mid2_fu_238_p3 <= 
        ap_const_lv6_0 when (exitcond_i3_fu_232_p2(0) = '1') else 
        j_i_reg_162;
    kernel_address0 <= grp_convolution_kernel_fu_206_kernel_address0;
    kernel_address1 <= grp_convolution_kernel_fu_206_kernel_address1;
    kernel_ce0 <= grp_convolution_kernel_fu_206_kernel_ce0;
    kernel_ce1 <= grp_convolution_kernel_fu_206_kernel_ce1;

    output_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, tmp_26_cast_fu_370_p1, ap_CS_fsm_state5, ap_enable_reg_pp1_iter1, grp_convolution_kernel_fu_206_output_r_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            output_address0 <= tmp_26_cast_fu_370_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_address0 <= grp_convolution_kernel_fu_206_output_r_address0;
        else 
            output_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp1_iter1, grp_convolution_kernel_fu_206_output_r_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_ce0 <= grp_convolution_kernel_fu_206_output_r_ce0;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_we0_assign_proc : process(ap_CS_fsm_state5, grp_convolution_kernel_fu_206_output_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_we0 <= grp_convolution_kernel_fu_206_output_r_we0;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_344_p3),11));
    p_shl_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_333_p3),11));
    result_address0 <= tmp_26_cast_reg_430(10 - 1 downto 0);

    result_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= output_q0;

    result_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond_flatten8_reg_404_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((exitcond_flatten8_reg_404_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_254_p3),12));
    tmp_21_fu_333_p3 <= (tmp_i5_mid2_v_reg_418 & ap_const_lv5_0);
    tmp_22_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_270_p2),64));
    tmp_22_fu_344_p3 <= (tmp_i5_mid2_v_reg_418 & ap_const_lv1_0);
    tmp_23_fu_355_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_340_p1) - unsigned(p_shl1_cast_fu_351_p1));
    tmp_24_fu_364_p2 <= std_logic_vector(unsigned(tmp_23_fu_355_p2) + unsigned(tmp_2_i1_cast_fu_361_p1));
        tmp_26_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_364_p2),64));

    tmp_2_i1_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i7_mid2_reg_413),11));
    tmp_5_i_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_mid2_fu_238_p3),12));
    tmp_fu_254_p3 <= (tmp_i_mid2_v_fu_246_p3 & ap_const_lv5_0);
    tmp_i5_mid2_v_fu_319_p3 <= 
        i_1_fu_299_p2 when (exitcond_i_fu_305_p2(0) = '1') else 
        ap_phi_mux_i_i3_phi_fu_188_p4;
    tmp_i_mid2_v_fu_246_p3 <= 
        i_fu_226_p2 when (exitcond_i3_fu_232_p2(0) = '1') else 
        ap_phi_mux_i_i_phi_fu_155_p4;
    tmp_s_fu_270_p2 <= std_logic_vector(unsigned(tmp_5_i_cast_fu_266_p1) + unsigned(tmp_21_cast_fu_262_p1));
end behav;
