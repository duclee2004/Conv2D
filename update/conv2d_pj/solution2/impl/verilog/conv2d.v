// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=6435,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=557,HLS_SYN_LUT=943,HLS_VERSION=2018_3}" *)

module conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1,
        result_address0,
        result_ce0,
        result_we0,
        result_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state4 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] kernel_address1;
output   kernel_ce1;
input  [31:0] kernel_q1;
output  [9:0] result_address0;
output   result_ce0;
output   result_we0;
output  [31:0] result_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg result_ce0;
reg result_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_140;
reg   [5:0] i_i_reg_151;
reg   [5:0] j_i_reg_162;
reg   [9:0] indvar_flatten6_reg_173;
reg   [4:0] i_i3_reg_184;
reg   [4:0] j_i7_reg_195;
wire   [0:0] exitcond_flatten_fu_214_p2;
reg   [0:0] exitcond_flatten_reg_375;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] indvar_flatten_next_fu_220_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] tmp_i_mid2_v_fu_246_p3;
reg   [5:0] tmp_i_mid2_v_reg_384;
wire   [63:0] tmp_22_cast_fu_276_p1;
reg   [63:0] tmp_22_cast_reg_389;
wire   [5:0] j_fu_281_p2;
wire   [0:0] exitcond_flatten8_fu_287_p2;
reg   [0:0] exitcond_flatten8_reg_404;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_flatten8_reg_404_pp1_iter1_reg;
wire   [9:0] indvar_flatten_next7_fu_293_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] j_i7_mid2_fu_311_p3;
reg   [4:0] j_i7_mid2_reg_413;
wire   [4:0] tmp_i5_mid2_v_fu_319_p3;
reg   [4:0] tmp_i5_mid2_v_reg_418;
wire   [4:0] j_2_fu_327_p2;
wire  signed [63:0] tmp_26_cast_fu_370_p1;
reg  signed [63:0] tmp_26_cast_reg_430;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state5;
wire    grp_convolution_kernel_fu_206_ap_ready;
wire    grp_convolution_kernel_fu_206_ap_done;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [9:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
wire   [31:0] buffer_q0;
reg    buffer_ce1;
wire   [31:0] buffer_q1;
reg   [9:0] output_address0;
reg    output_ce0;
reg    output_we0;
wire   [31:0] output_q0;
wire    grp_convolution_kernel_fu_206_ap_start;
wire    grp_convolution_kernel_fu_206_ap_idle;
wire   [9:0] grp_convolution_kernel_fu_206_buffer_r_address0;
wire    grp_convolution_kernel_fu_206_buffer_r_ce0;
wire   [9:0] grp_convolution_kernel_fu_206_buffer_r_address1;
wire    grp_convolution_kernel_fu_206_buffer_r_ce1;
wire   [3:0] grp_convolution_kernel_fu_206_kernel_address0;
wire    grp_convolution_kernel_fu_206_kernel_ce0;
wire   [3:0] grp_convolution_kernel_fu_206_kernel_address1;
wire    grp_convolution_kernel_fu_206_kernel_ce1;
wire   [9:0] grp_convolution_kernel_fu_206_output_r_address0;
wire    grp_convolution_kernel_fu_206_output_r_ce0;
wire    grp_convolution_kernel_fu_206_output_r_we0;
wire   [31:0] grp_convolution_kernel_fu_206_output_r_d0;
reg   [5:0] ap_phi_mux_i_i_phi_fu_155_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i_i3_phi_fu_188_p4;
wire    ap_block_pp1_stage0;
reg    grp_convolution_kernel_fu_206_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_i3_fu_232_p2;
wire   [5:0] i_fu_226_p2;
wire   [10:0] tmp_fu_254_p3;
wire   [5:0] j_i_mid2_fu_238_p3;
wire   [11:0] tmp_5_i_cast_fu_266_p1;
wire   [11:0] tmp_21_cast_fu_262_p1;
wire   [11:0] tmp_s_fu_270_p2;
wire   [0:0] exitcond_i_fu_305_p2;
wire   [4:0] i_1_fu_299_p2;
wire   [9:0] tmp_21_fu_333_p3;
wire   [5:0] tmp_22_fu_344_p3;
wire   [10:0] p_shl_cast_fu_340_p1;
wire   [10:0] p_shl1_cast_fu_351_p1;
wire   [10:0] tmp_23_fu_355_p2;
wire   [10:0] tmp_2_i1_cast_fu_361_p1;
wire   [10:0] tmp_24_fu_364_p2;
wire    ap_CS_fsm_state9;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 grp_convolution_kernel_fu_206_ap_start_reg = 1'b0;
end

conv2d_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(input_r_q0),
    .q0(buffer_q0),
    .address1(grp_convolution_kernel_fu_206_buffer_r_address1),
    .ce1(buffer_ce1),
    .q1(buffer_q1)
);

conv2d_output #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(grp_convolution_kernel_fu_206_output_r_d0),
    .q0(output_q0)
);

convolution_kernel grp_convolution_kernel_fu_206(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convolution_kernel_fu_206_ap_start),
    .ap_done(grp_convolution_kernel_fu_206_ap_done),
    .ap_idle(grp_convolution_kernel_fu_206_ap_idle),
    .ap_ready(grp_convolution_kernel_fu_206_ap_ready),
    .buffer_r_address0(grp_convolution_kernel_fu_206_buffer_r_address0),
    .buffer_r_ce0(grp_convolution_kernel_fu_206_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .buffer_r_address1(grp_convolution_kernel_fu_206_buffer_r_address1),
    .buffer_r_ce1(grp_convolution_kernel_fu_206_buffer_r_ce1),
    .buffer_r_q1(buffer_q1),
    .kernel_address0(grp_convolution_kernel_fu_206_kernel_address0),
    .kernel_ce0(grp_convolution_kernel_fu_206_kernel_ce0),
    .kernel_q0(kernel_q0),
    .kernel_address1(grp_convolution_kernel_fu_206_kernel_address1),
    .kernel_ce1(grp_convolution_kernel_fu_206_kernel_ce1),
    .kernel_q1(kernel_q1),
    .output_r_address0(grp_convolution_kernel_fu_206_output_r_address0),
    .output_r_ce0(grp_convolution_kernel_fu_206_output_r_ce0),
    .output_r_we0(grp_convolution_kernel_fu_206_output_r_we0),
    .output_r_d0(grp_convolution_kernel_fu_206_output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_206_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_206_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convolution_kernel_fu_206_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_convolution_kernel_fu_206_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_kernel_fu_206_ap_ready == 1'b1)) begin
            grp_convolution_kernel_fu_206_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_i3_reg_184 <= tmp_i5_mid2_v_reg_418;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_206_ap_done == 1'b1))) begin
        i_i3_reg_184 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_i_reg_151 <= tmp_i_mid2_v_reg_384;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_151 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten6_reg_173 <= indvar_flatten_next7_fu_293_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_206_ap_done == 1'b1))) begin
        indvar_flatten6_reg_173 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_140 <= indvar_flatten_next_fu_220_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_140 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_i7_reg_195 <= j_2_fu_327_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_206_ap_done == 1'b1))) begin
        j_i7_reg_195 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_reg_162 <= j_fu_281_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_i_reg_162 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_flatten8_reg_404 <= exitcond_flatten8_fu_287_p2;
        exitcond_flatten8_reg_404_pp1_iter1_reg <= exitcond_flatten8_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_375 <= exitcond_flatten_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_i7_mid2_reg_413 <= j_i7_mid2_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_22_cast_reg_389[11 : 0] <= tmp_22_cast_fu_276_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_26_cast_reg_430 <= tmp_26_cast_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_i5_mid2_v_reg_418 <= tmp_i5_mid2_v_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_mid2_v_reg_384 <= tmp_i_mid2_v_fu_246_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_214_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_287_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_404 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_i3_phi_fu_188_p4 = tmp_i5_mid2_v_reg_418;
    end else begin
        ap_phi_mux_i_i3_phi_fu_188_p4 = i_i3_reg_184;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_i_phi_fu_155_p4 = tmp_i_mid2_v_reg_384;
    end else begin
        ap_phi_mux_i_i_phi_fu_155_p4 = i_i_reg_151;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_address0 = tmp_22_cast_reg_389;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = grp_convolution_kernel_fu_206_buffer_r_address0;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_ce0 = grp_convolution_kernel_fu_206_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_ce1 = grp_convolution_kernel_fu_206_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_we0 = 1'b1;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        output_address0 = tmp_26_cast_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_address0 = grp_convolution_kernel_fu_206_output_r_address0;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_ce0 = grp_convolution_kernel_fu_206_output_r_ce0;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_we0 = grp_convolution_kernel_fu_206_output_r_we0;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_404_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_206_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond_flatten8_fu_287_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond_flatten8_fu_287_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond_flatten8_fu_287_p2 = ((indvar_flatten6_reg_173 == 10'd900) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_214_p2 = ((indvar_flatten_reg_140 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond_i3_fu_232_p2 = ((j_i_reg_162 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i_fu_305_p2 = ((j_i7_reg_195 == 5'd30) ? 1'b1 : 1'b0);

assign grp_convolution_kernel_fu_206_ap_start = grp_convolution_kernel_fu_206_ap_start_reg;

assign i_1_fu_299_p2 = (ap_phi_mux_i_i3_phi_fu_188_p4 + 5'd1);

assign i_fu_226_p2 = (ap_phi_mux_i_i_phi_fu_155_p4 + 6'd1);

assign indvar_flatten_next7_fu_293_p2 = (indvar_flatten6_reg_173 + 10'd1);

assign indvar_flatten_next_fu_220_p2 = (indvar_flatten_reg_140 + 11'd1);

assign input_r_address0 = tmp_22_cast_fu_276_p1;

assign j_2_fu_327_p2 = (j_i7_mid2_fu_311_p3 + 5'd1);

assign j_fu_281_p2 = (j_i_mid2_fu_238_p3 + 6'd1);

assign j_i7_mid2_fu_311_p3 = ((exitcond_i_fu_305_p2[0:0] === 1'b1) ? 5'd0 : j_i7_reg_195);

assign j_i_mid2_fu_238_p3 = ((exitcond_i3_fu_232_p2[0:0] === 1'b1) ? 6'd0 : j_i_reg_162);

assign kernel_address0 = grp_convolution_kernel_fu_206_kernel_address0;

assign kernel_address1 = grp_convolution_kernel_fu_206_kernel_address1;

assign kernel_ce0 = grp_convolution_kernel_fu_206_kernel_ce0;

assign kernel_ce1 = grp_convolution_kernel_fu_206_kernel_ce1;

assign p_shl1_cast_fu_351_p1 = tmp_22_fu_344_p3;

assign p_shl_cast_fu_340_p1 = tmp_21_fu_333_p3;

assign result_address0 = tmp_26_cast_reg_430;

assign result_d0 = output_q0;

assign tmp_21_cast_fu_262_p1 = tmp_fu_254_p3;

assign tmp_21_fu_333_p3 = {{tmp_i5_mid2_v_reg_418}, {5'd0}};

assign tmp_22_cast_fu_276_p1 = tmp_s_fu_270_p2;

assign tmp_22_fu_344_p3 = {{tmp_i5_mid2_v_reg_418}, {1'd0}};

assign tmp_23_fu_355_p2 = (p_shl_cast_fu_340_p1 - p_shl1_cast_fu_351_p1);

assign tmp_24_fu_364_p2 = (tmp_23_fu_355_p2 + tmp_2_i1_cast_fu_361_p1);

assign tmp_26_cast_fu_370_p1 = $signed(tmp_24_fu_364_p2);

assign tmp_2_i1_cast_fu_361_p1 = j_i7_mid2_reg_413;

assign tmp_5_i_cast_fu_266_p1 = j_i_mid2_fu_238_p3;

assign tmp_fu_254_p3 = {{tmp_i_mid2_v_fu_246_p3}, {5'd0}};

assign tmp_i5_mid2_v_fu_319_p3 = ((exitcond_i_fu_305_p2[0:0] === 1'b1) ? i_1_fu_299_p2 : ap_phi_mux_i_i3_phi_fu_188_p4);

assign tmp_i_mid2_v_fu_246_p3 = ((exitcond_i3_fu_232_p2[0:0] === 1'b1) ? i_fu_226_p2 : ap_phi_mux_i_i_phi_fu_155_p4);

assign tmp_s_fu_270_p2 = (tmp_5_i_cast_fu_266_p1 + tmp_21_cast_fu_262_p1);

always @ (posedge ap_clk) begin
    tmp_22_cast_reg_389[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //conv2d
