-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we0 : OUT STD_LOGIC;
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we1 : OUT STD_LOGIC;
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_we0 : OUT STD_LOGIC;
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_we1 : OUT STD_LOGIC;
    result_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_we0 : OUT STD_LOGIC;
    result_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    result_ce1 : OUT STD_LOGIC;
    result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_we1 : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=6436,HLS_SYN_TPT=4506,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=565,HLS_SYN_LUT=970,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal buffer_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_ap_start : STD_LOGIC;
    signal load_input_U0_ap_done : STD_LOGIC;
    signal load_input_U0_ap_continue : STD_LOGIC;
    signal load_input_U0_ap_idle : STD_LOGIC;
    signal load_input_U0_ap_ready : STD_LOGIC;
    signal load_input_U0_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal load_input_U0_input_r_ce0 : STD_LOGIC;
    signal load_input_U0_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal load_input_U0_buffer_r_ce0 : STD_LOGIC;
    signal load_input_U0_buffer_r_we0 : STD_LOGIC;
    signal load_input_U0_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_buffer : STD_LOGIC;
    signal load_input_U0_buffer_r_full_n : STD_LOGIC;
    signal convolution_kernel_U0_ap_start : STD_LOGIC;
    signal convolution_kernel_U0_ap_done : STD_LOGIC;
    signal convolution_kernel_U0_ap_continue : STD_LOGIC;
    signal convolution_kernel_U0_ap_idle : STD_LOGIC;
    signal convolution_kernel_U0_ap_ready : STD_LOGIC;
    signal convolution_kernel_U0_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution_kernel_U0_buffer_r_ce0 : STD_LOGIC;
    signal convolution_kernel_U0_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution_kernel_U0_buffer_r_ce1 : STD_LOGIC;
    signal convolution_kernel_U0_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal convolution_kernel_U0_kernel_ce0 : STD_LOGIC;
    signal convolution_kernel_U0_kernel_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal convolution_kernel_U0_kernel_ce1 : STD_LOGIC;
    signal convolution_kernel_U0_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal convolution_kernel_U0_output_r_ce0 : STD_LOGIC;
    signal convolution_kernel_U0_output_r_we0 : STD_LOGIC;
    signal convolution_kernel_U0_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_output : STD_LOGIC;
    signal convolution_kernel_U0_output_r_full_n : STD_LOGIC;
    signal write_output_U0_ap_start : STD_LOGIC;
    signal write_output_U0_ap_done : STD_LOGIC;
    signal write_output_U0_ap_continue : STD_LOGIC;
    signal write_output_U0_ap_idle : STD_LOGIC;
    signal write_output_U0_ap_ready : STD_LOGIC;
    signal write_output_U0_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal write_output_U0_output_r_ce0 : STD_LOGIC;
    signal write_output_U0_result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal write_output_U0_result_ce0 : STD_LOGIC;
    signal write_output_U0_result_we0 : STD_LOGIC;
    signal write_output_U0_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal buffer_i_full_n : STD_LOGIC;
    signal buffer_t_empty_n : STD_LOGIC;
    signal buffer_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_t_we1 : STD_LOGIC;
    signal output_i_full_n : STD_LOGIC;
    signal output_t_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_load_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_input_U0_ap_ready : STD_LOGIC;
    signal load_input_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_convolution_kernel_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_convolution_kernel_U0_ap_ready : STD_LOGIC;
    signal convolution_kernel_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal load_input_U0_start_full_n : STD_LOGIC;
    signal load_input_U0_start_write : STD_LOGIC;
    signal convolution_kernel_U0_start_full_n : STD_LOGIC;
    signal convolution_kernel_U0_start_write : STD_LOGIC;
    signal write_output_U0_start_full_n : STD_LOGIC;
    signal write_output_U0_start_write : STD_LOGIC;

    component load_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce1 : OUT STD_LOGIC;
        kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component write_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_we0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component conv2d_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    buffer_U : component conv2d_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => load_input_U0_buffer_r_address0,
        i_ce0 => load_input_U0_buffer_r_ce0,
        i_we0 => load_input_U0_buffer_r_we0,
        i_d0 => load_input_U0_buffer_r_d0,
        i_q0 => buffer_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => buffer_i_q1,
        t_address0 => convolution_kernel_U0_buffer_r_address0,
        t_ce0 => convolution_kernel_U0_buffer_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => buffer_t_q0,
        t_address1 => convolution_kernel_U0_buffer_r_address1,
        t_ce1 => convolution_kernel_U0_buffer_r_ce1,
        t_q1 => buffer_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => buffer_i_full_n,
        i_write => load_input_U0_ap_done,
        t_empty_n => buffer_t_empty_n,
        t_read => convolution_kernel_U0_ap_ready);

    output_U : component conv2d_output
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => convolution_kernel_U0_output_r_address0,
        i_ce0 => convolution_kernel_U0_output_r_ce0,
        i_we0 => convolution_kernel_U0_output_r_we0,
        i_d0 => convolution_kernel_U0_output_r_d0,
        i_q0 => output_i_q0,
        t_address0 => write_output_U0_output_r_address0,
        t_ce0 => write_output_U0_output_r_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_i_full_n,
        i_write => convolution_kernel_U0_ap_done,
        t_empty_n => output_t_empty_n,
        t_read => write_output_U0_ap_ready);

    load_input_U0 : component load_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_input_U0_ap_start,
        ap_done => load_input_U0_ap_done,
        ap_continue => load_input_U0_ap_continue,
        ap_idle => load_input_U0_ap_idle,
        ap_ready => load_input_U0_ap_ready,
        input_r_address0 => load_input_U0_input_r_address0,
        input_r_ce0 => load_input_U0_input_r_ce0,
        input_r_q0 => input_r_q0,
        buffer_r_address0 => load_input_U0_buffer_r_address0,
        buffer_r_ce0 => load_input_U0_buffer_r_ce0,
        buffer_r_we0 => load_input_U0_buffer_r_we0,
        buffer_r_d0 => load_input_U0_buffer_r_d0);

    convolution_kernel_U0 : component convolution_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => convolution_kernel_U0_ap_start,
        ap_done => convolution_kernel_U0_ap_done,
        ap_continue => convolution_kernel_U0_ap_continue,
        ap_idle => convolution_kernel_U0_ap_idle,
        ap_ready => convolution_kernel_U0_ap_ready,
        buffer_r_address0 => convolution_kernel_U0_buffer_r_address0,
        buffer_r_ce0 => convolution_kernel_U0_buffer_r_ce0,
        buffer_r_q0 => buffer_t_q0,
        buffer_r_address1 => convolution_kernel_U0_buffer_r_address1,
        buffer_r_ce1 => convolution_kernel_U0_buffer_r_ce1,
        buffer_r_q1 => buffer_t_q1,
        kernel_address0 => convolution_kernel_U0_kernel_address0,
        kernel_ce0 => convolution_kernel_U0_kernel_ce0,
        kernel_q0 => kernel_q0,
        kernel_address1 => convolution_kernel_U0_kernel_address1,
        kernel_ce1 => convolution_kernel_U0_kernel_ce1,
        kernel_q1 => kernel_q1,
        output_r_address0 => convolution_kernel_U0_output_r_address0,
        output_r_ce0 => convolution_kernel_U0_output_r_ce0,
        output_r_we0 => convolution_kernel_U0_output_r_we0,
        output_r_d0 => convolution_kernel_U0_output_r_d0);

    write_output_U0 : component write_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_output_U0_ap_start,
        ap_done => write_output_U0_ap_done,
        ap_continue => write_output_U0_ap_continue,
        ap_idle => write_output_U0_ap_idle,
        ap_ready => write_output_U0_ap_ready,
        output_r_address0 => write_output_U0_output_r_address0,
        output_r_ce0 => write_output_U0_output_r_ce0,
        output_r_q0 => output_t_q0,
        result_address0 => write_output_U0_result_address0,
        result_ce0 => write_output_U0_result_ce0,
        result_we0 => write_output_U0_result_we0,
        result_d0 => write_output_U0_result_d0);





    ap_sync_reg_convolution_kernel_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_convolution_kernel_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_convolution_kernel_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_convolution_kernel_U0_ap_ready <= ap_sync_convolution_kernel_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_sync_load_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    convolution_kernel_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((convolution_kernel_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                convolution_kernel_U0_ap_ready_count <= std_logic_vector(unsigned(convolution_kernel_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (convolution_kernel_U0_ap_ready = ap_const_logic_1))) then 
                convolution_kernel_U0_ap_ready_count <= std_logic_vector(unsigned(convolution_kernel_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    load_input_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((load_input_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                load_input_U0_ap_ready_count <= std_logic_vector(unsigned(load_input_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (load_input_U0_ap_ready = ap_const_logic_1))) then 
                load_input_U0_ap_ready_count <= std_logic_vector(unsigned(load_input_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_channel_done_buffer <= load_input_U0_ap_done;
    ap_channel_done_output <= convolution_kernel_U0_ap_done;
    ap_done <= write_output_U0_ap_done;
    ap_idle <= (write_output_U0_ap_idle and load_input_U0_ap_idle and (output_t_empty_n xor ap_const_logic_1) and (buffer_t_empty_n xor ap_const_logic_1) and convolution_kernel_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_convolution_kernel_U0_ap_ready <= (convolution_kernel_U0_ap_ready or ap_sync_reg_convolution_kernel_U0_ap_ready);
    ap_sync_done <= write_output_U0_ap_done;
    ap_sync_load_input_U0_ap_ready <= (load_input_U0_ap_ready or ap_sync_reg_load_input_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_input_U0_ap_ready and ap_sync_convolution_kernel_U0_ap_ready);
    buffer_t_d1 <= ap_const_lv32_0;
    buffer_t_we1 <= ap_const_logic_0;
    convolution_kernel_U0_ap_continue <= output_i_full_n;
    convolution_kernel_U0_ap_start <= ((ap_sync_reg_convolution_kernel_U0_ap_ready xor ap_const_logic_1) and buffer_t_empty_n and ap_start);
    convolution_kernel_U0_output_r_full_n <= output_i_full_n;
    convolution_kernel_U0_start_full_n <= ap_const_logic_1;
    convolution_kernel_U0_start_write <= ap_const_logic_0;
    input_r_address0 <= load_input_U0_input_r_address0;
    input_r_address1 <= ap_const_lv10_0;
    input_r_ce0 <= load_input_U0_input_r_ce0;
    input_r_ce1 <= ap_const_logic_0;
    input_r_d0 <= ap_const_lv32_0;
    input_r_d1 <= ap_const_lv32_0;
    input_r_we0 <= ap_const_logic_0;
    input_r_we1 <= ap_const_logic_0;
    kernel_address0 <= convolution_kernel_U0_kernel_address0;
    kernel_address1 <= convolution_kernel_U0_kernel_address1;
    kernel_ce0 <= convolution_kernel_U0_kernel_ce0;
    kernel_ce1 <= convolution_kernel_U0_kernel_ce1;
    kernel_d0 <= ap_const_lv32_0;
    kernel_d1 <= ap_const_lv32_0;
    kernel_we0 <= ap_const_logic_0;
    kernel_we1 <= ap_const_logic_0;
    load_input_U0_ap_continue <= buffer_i_full_n;
    load_input_U0_ap_start <= ((ap_sync_reg_load_input_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_input_U0_buffer_r_full_n <= buffer_i_full_n;
    load_input_U0_start_full_n <= ap_const_logic_1;
    load_input_U0_start_write <= ap_const_logic_0;
    result_address0 <= write_output_U0_result_address0;
    result_address1 <= ap_const_lv10_0;
    result_ce0 <= write_output_U0_result_ce0;
    result_ce1 <= ap_const_logic_0;
    result_d0 <= write_output_U0_result_d0;
    result_d1 <= ap_const_lv32_0;
    result_we0 <= write_output_U0_result_we0;
    result_we1 <= ap_const_logic_0;
    write_output_U0_ap_continue <= ap_const_logic_1;
    write_output_U0_ap_start <= output_t_empty_n;
    write_output_U0_start_full_n <= ap_const_logic_1;
    write_output_U0_start_write <= ap_const_logic_0;
end behav;
