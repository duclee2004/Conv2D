// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_output_HH_
#define _write_output_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct write_output : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_in< sc_lv<32> > output_r_q0;
    sc_out< sc_lv<10> > result_address0;
    sc_out< sc_logic > result_ce0;
    sc_out< sc_logic > result_we0;
    sc_out< sc_lv<32> > result_d0;


    // Module declarations
    write_output(sc_module_name name);
    SC_HAS_PROCESS(write_output);

    ~write_output();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten_reg_75;
    sc_signal< sc_lv<5> > i_reg_86;
    sc_signal< sc_lv<5> > j_reg_97;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_108_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_196;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_196_pp0_iter1_reg;
    sc_signal< sc_lv<10> > indvar_flatten_next_fu_114_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > j_mid2_fu_132_p3;
    sc_signal< sc_lv<5> > j_mid2_reg_205;
    sc_signal< sc_lv<5> > tmp_mid2_v_fu_140_p3;
    sc_signal< sc_lv<5> > tmp_mid2_v_reg_210;
    sc_signal< sc_lv<5> > j_1_fu_148_p2;
    sc_signal< sc_lv<64> > tmp_5_cast_fu_191_p1;
    sc_signal< sc_lv<64> > tmp_5_cast_reg_222;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<5> > ap_phi_mux_i_phi_fu_90_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond3_fu_126_p2;
    sc_signal< sc_lv<5> > i_1_fu_120_p2;
    sc_signal< sc_lv<10> > tmp_fu_154_p3;
    sc_signal< sc_lv<6> > tmp_1_fu_165_p3;
    sc_signal< sc_lv<11> > p_shl_cast_fu_161_p1;
    sc_signal< sc_lv<11> > p_shl1_cast_fu_172_p1;
    sc_signal< sc_lv<11> > tmp_4_fu_176_p2;
    sc_signal< sc_lv<11> > tmp_2_cast_fu_182_p1;
    sc_signal< sc_lv<11> > tmp_5_fu_185_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<10> ap_const_lv10_384;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_90_p4();
    void thread_ap_ready();
    void thread_exitcond3_fu_126_p2();
    void thread_exitcond_flatten_fu_108_p2();
    void thread_i_1_fu_120_p2();
    void thread_indvar_flatten_next_fu_114_p2();
    void thread_j_1_fu_148_p2();
    void thread_j_mid2_fu_132_p3();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_p_shl1_cast_fu_172_p1();
    void thread_p_shl_cast_fu_161_p1();
    void thread_result_address0();
    void thread_result_ce0();
    void thread_result_d0();
    void thread_result_we0();
    void thread_tmp_1_fu_165_p3();
    void thread_tmp_2_cast_fu_182_p1();
    void thread_tmp_4_fu_176_p2();
    void thread_tmp_5_cast_fu_191_p1();
    void thread_tmp_5_fu_185_p2();
    void thread_tmp_fu_154_p3();
    void thread_tmp_mid2_v_fu_140_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
