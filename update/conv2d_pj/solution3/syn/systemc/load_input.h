// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load_input_HH_
#define _load_input_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load_input : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<32> > input_r_q0;
    sc_out< sc_lv<10> > buffer_r_address0;
    sc_out< sc_logic > buffer_r_ce0;
    sc_out< sc_logic > buffer_r_we0;
    sc_out< sc_lv<32> > buffer_r_d0;


    // Module declarations
    load_input(sc_module_name name);
    SC_HAS_PROCESS(load_input);

    ~load_input();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > indvar_flatten_reg_73;
    sc_signal< sc_lv<6> > i_reg_84;
    sc_signal< sc_lv<6> > j_reg_95;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_106_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_179;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > indvar_flatten_next_fu_112_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > tmp_mid2_v_fu_138_p3;
    sc_signal< sc_lv<6> > tmp_mid2_v_reg_188;
    sc_signal< sc_lv<64> > tmp_8_cast_fu_168_p1;
    sc_signal< sc_lv<64> > tmp_8_cast_reg_193;
    sc_signal< sc_lv<6> > j_2_fu_173_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<6> > ap_phi_mux_i_phi_fu_88_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond2_fu_124_p2;
    sc_signal< sc_lv<6> > i_2_fu_118_p2;
    sc_signal< sc_lv<11> > tmp_fu_146_p3;
    sc_signal< sc_lv<6> > j_mid2_fu_130_p3;
    sc_signal< sc_lv<12> > tmp_5_cast_fu_158_p1;
    sc_signal< sc_lv<12> > tmp_7_cast_fu_154_p1;
    sc_signal< sc_lv<12> > tmp_8_fu_162_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_88_p4();
    void thread_ap_ready();
    void thread_buffer_r_address0();
    void thread_buffer_r_ce0();
    void thread_buffer_r_d0();
    void thread_buffer_r_we0();
    void thread_exitcond2_fu_124_p2();
    void thread_exitcond_flatten_fu_106_p2();
    void thread_i_2_fu_118_p2();
    void thread_indvar_flatten_next_fu_112_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_j_2_fu_173_p2();
    void thread_j_mid2_fu_130_p3();
    void thread_tmp_5_cast_fu_158_p1();
    void thread_tmp_7_cast_fu_154_p1();
    void thread_tmp_8_cast_fu_168_p1();
    void thread_tmp_8_fu_162_p2();
    void thread_tmp_fu_146_p3();
    void thread_tmp_mid2_v_fu_138_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
