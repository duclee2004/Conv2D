// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load_input.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load_input::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load_input::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> load_input::ap_ST_fsm_state1 = "1";
const sc_lv<3> load_input::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> load_input::ap_ST_fsm_state4 = "100";
const sc_lv<32> load_input::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool load_input::ap_const_boolean_1 = true;
const sc_lv<32> load_input::ap_const_lv32_1 = "1";
const bool load_input::ap_const_boolean_0 = false;
const sc_lv<1> load_input::ap_const_lv1_0 = "0";
const sc_lv<1> load_input::ap_const_lv1_1 = "1";
const sc_lv<11> load_input::ap_const_lv11_0 = "00000000000";
const sc_lv<6> load_input::ap_const_lv6_0 = "000000";
const sc_lv<11> load_input::ap_const_lv11_400 = "10000000000";
const sc_lv<11> load_input::ap_const_lv11_1 = "1";
const sc_lv<6> load_input::ap_const_lv6_1 = "1";
const sc_lv<6> load_input::ap_const_lv6_20 = "100000";
const sc_lv<5> load_input::ap_const_lv5_0 = "00000";
const sc_lv<32> load_input::ap_const_lv32_2 = "10";

load_input::load_input(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_106_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_88_p4);
    sensitive << ( i_reg_84 );
    sensitive << ( exitcond_flatten_reg_179 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_mid2_v_reg_188 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_8_cast_reg_193 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_buffer_r_d0);
    sensitive << ( input_r_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_buffer_r_we0);
    sensitive << ( exitcond_flatten_reg_179 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_exitcond2_fu_124_p2);
    sensitive << ( j_reg_95 );
    sensitive << ( exitcond_flatten_fu_106_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_106_p2);
    sensitive << ( indvar_flatten_reg_73 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_2_fu_118_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_88_p4 );

    SC_METHOD(thread_indvar_flatten_next_fu_112_p2);
    sensitive << ( indvar_flatten_reg_73 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_8_cast_fu_168_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_j_2_fu_173_p2);
    sensitive << ( j_mid2_fu_130_p3 );

    SC_METHOD(thread_j_mid2_fu_130_p3);
    sensitive << ( j_reg_95 );
    sensitive << ( exitcond2_fu_124_p2 );

    SC_METHOD(thread_tmp_5_cast_fu_158_p1);
    sensitive << ( j_mid2_fu_130_p3 );

    SC_METHOD(thread_tmp_7_cast_fu_154_p1);
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_tmp_8_cast_fu_168_p1);
    sensitive << ( tmp_8_fu_162_p2 );

    SC_METHOD(thread_tmp_8_fu_162_p2);
    sensitive << ( tmp_5_cast_fu_158_p1 );
    sensitive << ( tmp_7_cast_fu_154_p1 );

    SC_METHOD(thread_tmp_fu_146_p3);
    sensitive << ( tmp_mid2_v_fu_138_p3 );

    SC_METHOD(thread_tmp_mid2_v_fu_138_p3);
    sensitive << ( ap_phi_mux_i_phi_fu_88_p4 );
    sensitive << ( exitcond2_fu_124_p2 );
    sensitive << ( i_2_fu_118_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_flatten_fu_106_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load_input_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "(port)buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_d0, "(port)buffer_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_73, "indvar_flatten_reg_73");
    sc_trace(mVcdFile, i_reg_84, "i_reg_84");
    sc_trace(mVcdFile, j_reg_95, "j_reg_95");
    sc_trace(mVcdFile, exitcond_flatten_fu_106_p2, "exitcond_flatten_fu_106_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_179, "exitcond_flatten_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_112_p2, "indvar_flatten_next_fu_112_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_mid2_v_fu_138_p3, "tmp_mid2_v_fu_138_p3");
    sc_trace(mVcdFile, tmp_mid2_v_reg_188, "tmp_mid2_v_reg_188");
    sc_trace(mVcdFile, tmp_8_cast_fu_168_p1, "tmp_8_cast_fu_168_p1");
    sc_trace(mVcdFile, tmp_8_cast_reg_193, "tmp_8_cast_reg_193");
    sc_trace(mVcdFile, j_2_fu_173_p2, "j_2_fu_173_p2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_88_p4, "ap_phi_mux_i_phi_fu_88_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond2_fu_124_p2, "exitcond2_fu_124_p2");
    sc_trace(mVcdFile, i_2_fu_118_p2, "i_2_fu_118_p2");
    sc_trace(mVcdFile, tmp_fu_146_p3, "tmp_fu_146_p3");
    sc_trace(mVcdFile, j_mid2_fu_130_p3, "j_mid2_fu_130_p3");
    sc_trace(mVcdFile, tmp_5_cast_fu_158_p1, "tmp_5_cast_fu_158_p1");
    sc_trace(mVcdFile, tmp_7_cast_fu_154_p1, "tmp_7_cast_fu_154_p1");
    sc_trace(mVcdFile, tmp_8_fu_162_p2, "tmp_8_fu_162_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

load_input::~load_input() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load_input::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_179.read(), ap_const_lv1_0))) {
        i_reg_84 = tmp_mid2_v_reg_188.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_84 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_73 = indvar_flatten_next_fu_112_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_73 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_0))) {
        j_reg_95 = j_2_fu_173_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        j_reg_95 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_179 = exitcond_flatten_fu_106_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_0))) {
        tmp_8_cast_reg_193 = tmp_8_cast_fu_168_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_0))) {
        tmp_mid2_v_reg_188 = tmp_mid2_v_fu_138_p3.read();
    }
}

void load_input::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void load_input::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load_input::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void load_input::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_input::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_input::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_input::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void load_input::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_input::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_input::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void load_input::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void load_input::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void load_input::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load_input::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void load_input::thread_ap_phi_mux_i_phi_fu_88_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_179.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_phi_fu_88_p4 = tmp_mid2_v_reg_188.read();
    } else {
        ap_phi_mux_i_phi_fu_88_p4 = i_reg_84.read();
    }
}

void load_input::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load_input::thread_buffer_r_address0() {
    buffer_r_address0 =  (sc_lv<10>) (tmp_8_cast_reg_193.read());
}

void load_input::thread_buffer_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void load_input::thread_buffer_r_d0() {
    buffer_r_d0 = input_r_q0.read();
}

void load_input::thread_buffer_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_179.read(), ap_const_lv1_0))) {
        buffer_r_we0 = ap_const_logic_1;
    } else {
        buffer_r_we0 = ap_const_logic_0;
    }
}

void load_input::thread_exitcond2_fu_124_p2() {
    exitcond2_fu_124_p2 = (!j_reg_95.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_95.read() == ap_const_lv6_20);
}

void load_input::thread_exitcond_flatten_fu_106_p2() {
    exitcond_flatten_fu_106_p2 = (!indvar_flatten_reg_73.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_73.read() == ap_const_lv11_400);
}

void load_input::thread_i_2_fu_118_p2() {
    i_2_fu_118_p2 = (!ap_phi_mux_i_phi_fu_88_p4.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ap_phi_mux_i_phi_fu_88_p4.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void load_input::thread_indvar_flatten_next_fu_112_p2() {
    indvar_flatten_next_fu_112_p2 = (!indvar_flatten_reg_73.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(indvar_flatten_reg_73.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void load_input::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<10>) (tmp_8_cast_fu_168_p1.read());
}

void load_input::thread_input_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void load_input::thread_j_2_fu_173_p2() {
    j_2_fu_173_p2 = (!j_mid2_fu_130_p3.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_mid2_fu_130_p3.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void load_input::thread_j_mid2_fu_130_p3() {
    j_mid2_fu_130_p3 = (!exitcond2_fu_124_p2.read()[0].is_01())? sc_lv<6>(): ((exitcond2_fu_124_p2.read()[0].to_bool())? ap_const_lv6_0: j_reg_95.read());
}

void load_input::thread_tmp_5_cast_fu_158_p1() {
    tmp_5_cast_fu_158_p1 = esl_zext<12,6>(j_mid2_fu_130_p3.read());
}

void load_input::thread_tmp_7_cast_fu_154_p1() {
    tmp_7_cast_fu_154_p1 = esl_zext<12,11>(tmp_fu_146_p3.read());
}

void load_input::thread_tmp_8_cast_fu_168_p1() {
    tmp_8_cast_fu_168_p1 = esl_zext<64,12>(tmp_8_fu_162_p2.read());
}

void load_input::thread_tmp_8_fu_162_p2() {
    tmp_8_fu_162_p2 = (!tmp_5_cast_fu_158_p1.read().is_01() || !tmp_7_cast_fu_154_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_5_cast_fu_158_p1.read()) + sc_biguint<12>(tmp_7_cast_fu_154_p1.read()));
}

void load_input::thread_tmp_fu_146_p3() {
    tmp_fu_146_p3 = esl_concat<6,5>(tmp_mid2_v_fu_138_p3.read(), ap_const_lv5_0);
}

void load_input::thread_tmp_mid2_v_fu_138_p3() {
    tmp_mid2_v_fu_138_p3 = (!exitcond2_fu_124_p2.read()[0].is_01())? sc_lv<6>(): ((exitcond2_fu_124_p2.read()[0].to_bool())? i_2_fu_118_p2.read(): ap_phi_mux_i_phi_fu_88_p4.read());
}

void load_input::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_106_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

