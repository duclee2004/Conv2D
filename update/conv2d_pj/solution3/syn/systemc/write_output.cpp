// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_output.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_output::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_output::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> write_output::ap_ST_fsm_state1 = "1";
const sc_lv<3> write_output::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> write_output::ap_ST_fsm_state5 = "100";
const sc_lv<32> write_output::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool write_output::ap_const_boolean_1 = true;
const sc_lv<32> write_output::ap_const_lv32_1 = "1";
const bool write_output::ap_const_boolean_0 = false;
const sc_lv<1> write_output::ap_const_lv1_0 = "0";
const sc_lv<1> write_output::ap_const_lv1_1 = "1";
const sc_lv<10> write_output::ap_const_lv10_0 = "0000000000";
const sc_lv<5> write_output::ap_const_lv5_0 = "00000";
const sc_lv<10> write_output::ap_const_lv10_384 = "1110000100";
const sc_lv<10> write_output::ap_const_lv10_1 = "1";
const sc_lv<5> write_output::ap_const_lv5_1 = "1";
const sc_lv<5> write_output::ap_const_lv5_1E = "11110";
const sc_lv<32> write_output::ap_const_lv32_2 = "10";

write_output::write_output(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_108_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_90_p4);
    sensitive << ( i_reg_86 );
    sensitive << ( exitcond_flatten_reg_196 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_mid2_v_reg_210 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond3_fu_126_p2);
    sensitive << ( j_reg_97 );
    sensitive << ( exitcond_flatten_fu_108_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_108_p2);
    sensitive << ( indvar_flatten_reg_75 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_1_fu_120_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_90_p4 );

    SC_METHOD(thread_indvar_flatten_next_fu_114_p2);
    sensitive << ( indvar_flatten_reg_75 );

    SC_METHOD(thread_j_1_fu_148_p2);
    sensitive << ( j_mid2_fu_132_p3 );

    SC_METHOD(thread_j_mid2_fu_132_p3);
    sensitive << ( j_reg_97 );
    sensitive << ( exitcond3_fu_126_p2 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_5_cast_fu_191_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_p_shl1_cast_fu_172_p1);
    sensitive << ( tmp_1_fu_165_p3 );

    SC_METHOD(thread_p_shl_cast_fu_161_p1);
    sensitive << ( tmp_fu_154_p3 );

    SC_METHOD(thread_result_address0);
    sensitive << ( tmp_5_cast_reg_222 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_result_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_result_d0);
    sensitive << ( output_r_q0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_result_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond_flatten_reg_196_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_tmp_1_fu_165_p3);
    sensitive << ( tmp_mid2_v_reg_210 );

    SC_METHOD(thread_tmp_2_cast_fu_182_p1);
    sensitive << ( j_mid2_reg_205 );

    SC_METHOD(thread_tmp_4_fu_176_p2);
    sensitive << ( p_shl_cast_fu_161_p1 );
    sensitive << ( p_shl1_cast_fu_172_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_191_p1);
    sensitive << ( tmp_5_fu_185_p2 );

    SC_METHOD(thread_tmp_5_fu_185_p2);
    sensitive << ( tmp_4_fu_176_p2 );
    sensitive << ( tmp_2_cast_fu_182_p1 );

    SC_METHOD(thread_tmp_fu_154_p3);
    sensitive << ( tmp_mid2_v_reg_210 );

    SC_METHOD(thread_tmp_mid2_v_fu_140_p3);
    sensitive << ( ap_phi_mux_i_phi_fu_90_p4 );
    sensitive << ( exitcond3_fu_126_p2 );
    sensitive << ( i_1_fu_120_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_flatten_fu_108_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_output_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_q0, "(port)output_r_q0");
    sc_trace(mVcdFile, result_address0, "(port)result_address0");
    sc_trace(mVcdFile, result_ce0, "(port)result_ce0");
    sc_trace(mVcdFile, result_we0, "(port)result_we0");
    sc_trace(mVcdFile, result_d0, "(port)result_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_75, "indvar_flatten_reg_75");
    sc_trace(mVcdFile, i_reg_86, "i_reg_86");
    sc_trace(mVcdFile, j_reg_97, "j_reg_97");
    sc_trace(mVcdFile, exitcond_flatten_fu_108_p2, "exitcond_flatten_fu_108_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_196, "exitcond_flatten_reg_196");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_196_pp0_iter1_reg, "exitcond_flatten_reg_196_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_114_p2, "indvar_flatten_next_fu_114_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, j_mid2_fu_132_p3, "j_mid2_fu_132_p3");
    sc_trace(mVcdFile, j_mid2_reg_205, "j_mid2_reg_205");
    sc_trace(mVcdFile, tmp_mid2_v_fu_140_p3, "tmp_mid2_v_fu_140_p3");
    sc_trace(mVcdFile, tmp_mid2_v_reg_210, "tmp_mid2_v_reg_210");
    sc_trace(mVcdFile, j_1_fu_148_p2, "j_1_fu_148_p2");
    sc_trace(mVcdFile, tmp_5_cast_fu_191_p1, "tmp_5_cast_fu_191_p1");
    sc_trace(mVcdFile, tmp_5_cast_reg_222, "tmp_5_cast_reg_222");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_90_p4, "ap_phi_mux_i_phi_fu_90_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond3_fu_126_p2, "exitcond3_fu_126_p2");
    sc_trace(mVcdFile, i_1_fu_120_p2, "i_1_fu_120_p2");
    sc_trace(mVcdFile, tmp_fu_154_p3, "tmp_fu_154_p3");
    sc_trace(mVcdFile, tmp_1_fu_165_p3, "tmp_1_fu_165_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_161_p1, "p_shl_cast_fu_161_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_172_p1, "p_shl1_cast_fu_172_p1");
    sc_trace(mVcdFile, tmp_4_fu_176_p2, "tmp_4_fu_176_p2");
    sc_trace(mVcdFile, tmp_2_cast_fu_182_p1, "tmp_2_cast_fu_182_p1");
    sc_trace(mVcdFile, tmp_5_fu_185_p2, "tmp_5_fu_185_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

write_output::~write_output() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void write_output::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_196.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_reg_86 = tmp_mid2_v_reg_210.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_86 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_75 = indvar_flatten_next_fu_114_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_75 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_0))) {
        j_reg_97 = j_1_fu_148_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        j_reg_97 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_196 = exitcond_flatten_fu_108_p2.read();
        exitcond_flatten_reg_196_pp0_iter1_reg = exitcond_flatten_reg_196.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_0))) {
        j_mid2_reg_205 = j_mid2_fu_132_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_196.read(), ap_const_lv1_0))) {
        tmp_5_cast_reg_222 = tmp_5_cast_fu_191_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_0))) {
        tmp_mid2_v_reg_210 = tmp_mid2_v_fu_140_p3.read();
    }
}

void write_output::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void write_output::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_output::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void write_output::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void write_output::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void write_output::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void write_output::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void write_output::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_output::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void write_output::thread_ap_phi_mux_i_phi_fu_90_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_196.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_phi_fu_90_p4 = tmp_mid2_v_reg_210.read();
    } else {
        ap_phi_mux_i_phi_fu_90_p4 = i_reg_86.read();
    }
}

void write_output::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_output::thread_exitcond3_fu_126_p2() {
    exitcond3_fu_126_p2 = (!j_reg_97.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_97.read() == ap_const_lv5_1E);
}

void write_output::thread_exitcond_flatten_fu_108_p2() {
    exitcond_flatten_fu_108_p2 = (!indvar_flatten_reg_75.read().is_01() || !ap_const_lv10_384.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_75.read() == ap_const_lv10_384);
}

void write_output::thread_i_1_fu_120_p2() {
    i_1_fu_120_p2 = (!ap_phi_mux_i_phi_fu_90_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_phi_fu_90_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void write_output::thread_indvar_flatten_next_fu_114_p2() {
    indvar_flatten_next_fu_114_p2 = (!indvar_flatten_reg_75.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(indvar_flatten_reg_75.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void write_output::thread_j_1_fu_148_p2() {
    j_1_fu_148_p2 = (!j_mid2_fu_132_p3.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_mid2_fu_132_p3.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void write_output::thread_j_mid2_fu_132_p3() {
    j_mid2_fu_132_p3 = (!exitcond3_fu_126_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond3_fu_126_p2.read()[0].to_bool())? ap_const_lv5_0: j_reg_97.read());
}

void write_output::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<10>) (tmp_5_cast_fu_191_p1.read());
}

void write_output::thread_output_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void write_output::thread_p_shl1_cast_fu_172_p1() {
    p_shl1_cast_fu_172_p1 = esl_zext<11,6>(tmp_1_fu_165_p3.read());
}

void write_output::thread_p_shl_cast_fu_161_p1() {
    p_shl_cast_fu_161_p1 = esl_zext<11,10>(tmp_fu_154_p3.read());
}

void write_output::thread_result_address0() {
    result_address0 =  (sc_lv<10>) (tmp_5_cast_reg_222.read());
}

void write_output::thread_result_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        result_ce0 = ap_const_logic_1;
    } else {
        result_ce0 = ap_const_logic_0;
    }
}

void write_output::thread_result_d0() {
    result_d0 = output_r_q0.read();
}

void write_output::thread_result_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_196_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        result_we0 = ap_const_logic_1;
    } else {
        result_we0 = ap_const_logic_0;
    }
}

void write_output::thread_tmp_1_fu_165_p3() {
    tmp_1_fu_165_p3 = esl_concat<5,1>(tmp_mid2_v_reg_210.read(), ap_const_lv1_0);
}

void write_output::thread_tmp_2_cast_fu_182_p1() {
    tmp_2_cast_fu_182_p1 = esl_zext<11,5>(j_mid2_reg_205.read());
}

void write_output::thread_tmp_4_fu_176_p2() {
    tmp_4_fu_176_p2 = (!p_shl_cast_fu_161_p1.read().is_01() || !p_shl1_cast_fu_172_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_161_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_172_p1.read()));
}

void write_output::thread_tmp_5_cast_fu_191_p1() {
    tmp_5_cast_fu_191_p1 = esl_sext<64,11>(tmp_5_fu_185_p2.read());
}

void write_output::thread_tmp_5_fu_185_p2() {
    tmp_5_fu_185_p2 = (!tmp_4_fu_176_p2.read().is_01() || !tmp_2_cast_fu_182_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_4_fu_176_p2.read()) + sc_biguint<11>(tmp_2_cast_fu_182_p1.read()));
}

void write_output::thread_tmp_fu_154_p3() {
    tmp_fu_154_p3 = esl_concat<5,5>(tmp_mid2_v_reg_210.read(), ap_const_lv5_0);
}

void write_output::thread_tmp_mid2_v_fu_140_p3() {
    tmp_mid2_v_fu_140_p3 = (!exitcond3_fu_126_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond3_fu_126_p2.read()[0].to_bool())? i_1_fu_120_p2.read(): ap_phi_mux_i_phi_fu_90_p4.read());
}

void write_output::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_flatten_fu_108_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

