// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolution_kernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolution_kernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolution_kernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> convolution_kernel::ap_ST_fsm_state1 = "1";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state2 = "10";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state3 = "100";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state4 = "1000";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state5 = "10000";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state6 = "100000";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> convolution_kernel::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> convolution_kernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> convolution_kernel::ap_const_lv32_1 = "1";
const sc_lv<1> convolution_kernel::ap_const_lv1_0 = "0";
const sc_lv<32> convolution_kernel::ap_const_lv32_2 = "10";
const sc_lv<32> convolution_kernel::ap_const_lv32_3 = "11";
const sc_lv<32> convolution_kernel::ap_const_lv32_4 = "100";
const sc_lv<32> convolution_kernel::ap_const_lv32_5 = "101";
const sc_lv<32> convolution_kernel::ap_const_lv32_6 = "110";
const sc_lv<32> convolution_kernel::ap_const_lv32_7 = "111";
const sc_lv<5> convolution_kernel::ap_const_lv5_0 = "00000";
const sc_lv<1> convolution_kernel::ap_const_lv1_1 = "1";
const sc_lv<2> convolution_kernel::ap_const_lv2_0 = "00";
const sc_lv<5> convolution_kernel::ap_const_lv5_1E = "11110";
const sc_lv<5> convolution_kernel::ap_const_lv5_1 = "1";
const sc_lv<2> convolution_kernel::ap_const_lv2_3 = "11";
const sc_lv<2> convolution_kernel::ap_const_lv2_1 = "1";
const bool convolution_kernel::ap_const_boolean_1 = true;

convolution_kernel::convolution_kernel(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_146_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_146_p2 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_8_fu_283_p1 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond1_fu_204_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ki_reg_112 );

    SC_METHOD(thread_exitcond2_fu_188_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_87 );

    SC_METHOD(thread_exitcond3_fu_146_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_75 );

    SC_METHOD(thread_exitcond_fu_258_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( kj_reg_135 );

    SC_METHOD(thread_i_1_fu_152_p2);
    sensitive << ( i_reg_75 );

    SC_METHOD(thread_j_1_fu_194_p2);
    sensitive << ( j_reg_87 );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_13_cast_fu_293_p1 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ki_1_fu_210_p2);
    sensitive << ( ki_reg_112 );

    SC_METHOD(thread_ki_cast4_fu_200_p1);
    sensitive << ( ki_reg_112 );

    SC_METHOD(thread_kj_1_fu_264_p2);
    sensitive << ( kj_reg_135 );

    SC_METHOD(thread_kj_cast2_fu_254_p1);
    sensitive << ( kj_reg_135 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_cast_fu_249_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_reg_99 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_204_p2 );

    SC_METHOD(thread_p_shl1_cast_fu_178_p1);
    sensitive << ( tmp_1_fu_170_p3 );

    SC_METHOD(thread_p_shl2_cast_fu_230_p1);
    sensitive << ( tmp_9_fu_222_p3 );

    SC_METHOD(thread_p_shl_cast_fu_166_p1);
    sensitive << ( tmp_fu_158_p3 );

    SC_METHOD(thread_sum_2_fu_302_p2);
    sensitive << ( tmp_6_reg_374 );
    sensitive << ( sum_1_reg_123 );

    SC_METHOD(thread_tmp_10_fu_288_p2);
    sensitive << ( tmp_2_reg_341 );
    sensitive << ( kj_cast2_fu_254_p1 );

    SC_METHOD(thread_tmp_13_cast_fu_293_p1);
    sensitive << ( tmp_10_fu_288_p2 );

    SC_METHOD(thread_tmp_1_fu_170_p3);
    sensitive << ( i_reg_75 );

    SC_METHOD(thread_tmp_2_fu_234_p2);
    sensitive << ( ki_cast4_fu_200_p1 );
    sensitive << ( p_shl2_cast_fu_230_p1 );

    SC_METHOD(thread_tmp_3_fu_270_p2);
    sensitive << ( j_reg_87 );
    sensitive << ( kj_cast2_fu_254_p1 );

    SC_METHOD(thread_tmp_4_fu_182_p2);
    sensitive << ( p_shl_cast_fu_166_p1 );
    sensitive << ( p_shl1_cast_fu_178_p1 );

    SC_METHOD(thread_tmp_5_fu_276_p3);
    sensitive << ( tmp_s_reg_336 );
    sensitive << ( tmp_3_fu_270_p2 );

    SC_METHOD(thread_tmp_6_fu_298_p2);
    sensitive << ( buffer_load_reg_364 );
    sensitive << ( kernel_load_reg_369 );

    SC_METHOD(thread_tmp_7_cast_fu_249_p1);
    sensitive << ( tmp_7_fu_244_p2 );

    SC_METHOD(thread_tmp_7_fu_244_p2);
    sensitive << ( tmp_4_reg_315 );
    sensitive << ( tmp_8_cast_fu_240_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_240_p1);
    sensitive << ( j_reg_87 );

    SC_METHOD(thread_tmp_8_fu_283_p1);
    sensitive << ( tmp_5_fu_276_p3 );

    SC_METHOD(thread_tmp_9_fu_222_p3);
    sensitive << ( ki_reg_112 );

    SC_METHOD(thread_tmp_fu_158_p3);
    sensitive << ( i_reg_75 );

    SC_METHOD(thread_tmp_s_fu_216_p2);
    sensitive << ( i_reg_75 );
    sensitive << ( ki_cast4_fu_200_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_146_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_204_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_258_p2 );
    sensitive << ( exitcond2_fu_188_p2 );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolution_kernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_q0, "(port)buffer_r_q0");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_152_p2, "i_1_fu_152_p2");
    sc_trace(mVcdFile, i_1_reg_310, "i_1_reg_310");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_4_fu_182_p2, "tmp_4_fu_182_p2");
    sc_trace(mVcdFile, tmp_4_reg_315, "tmp_4_reg_315");
    sc_trace(mVcdFile, exitcond3_fu_146_p2, "exitcond3_fu_146_p2");
    sc_trace(mVcdFile, j_1_fu_194_p2, "j_1_fu_194_p2");
    sc_trace(mVcdFile, j_1_reg_323, "j_1_reg_323");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ki_1_fu_210_p2, "ki_1_fu_210_p2");
    sc_trace(mVcdFile, ki_1_reg_331, "ki_1_reg_331");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_s_fu_216_p2, "tmp_s_fu_216_p2");
    sc_trace(mVcdFile, tmp_s_reg_336, "tmp_s_reg_336");
    sc_trace(mVcdFile, exitcond1_fu_204_p2, "exitcond1_fu_204_p2");
    sc_trace(mVcdFile, tmp_2_fu_234_p2, "tmp_2_fu_234_p2");
    sc_trace(mVcdFile, tmp_2_reg_341, "tmp_2_reg_341");
    sc_trace(mVcdFile, kj_1_fu_264_p2, "kj_1_fu_264_p2");
    sc_trace(mVcdFile, kj_1_reg_349, "kj_1_reg_349");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_258_p2, "exitcond_fu_258_p2");
    sc_trace(mVcdFile, buffer_load_reg_364, "buffer_load_reg_364");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, kernel_load_reg_369, "kernel_load_reg_369");
    sc_trace(mVcdFile, tmp_6_fu_298_p2, "tmp_6_fu_298_p2");
    sc_trace(mVcdFile, tmp_6_reg_374, "tmp_6_reg_374");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sum_2_fu_302_p2, "sum_2_fu_302_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_reg_75, "i_reg_75");
    sc_trace(mVcdFile, exitcond2_fu_188_p2, "exitcond2_fu_188_p2");
    sc_trace(mVcdFile, j_reg_87, "j_reg_87");
    sc_trace(mVcdFile, sum_reg_99, "sum_reg_99");
    sc_trace(mVcdFile, ki_reg_112, "ki_reg_112");
    sc_trace(mVcdFile, sum_1_reg_123, "sum_1_reg_123");
    sc_trace(mVcdFile, kj_reg_135, "kj_reg_135");
    sc_trace(mVcdFile, tmp_7_cast_fu_249_p1, "tmp_7_cast_fu_249_p1");
    sc_trace(mVcdFile, tmp_8_fu_283_p1, "tmp_8_fu_283_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_293_p1, "tmp_13_cast_fu_293_p1");
    sc_trace(mVcdFile, tmp_fu_158_p3, "tmp_fu_158_p3");
    sc_trace(mVcdFile, tmp_1_fu_170_p3, "tmp_1_fu_170_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_166_p1, "p_shl_cast_fu_166_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_178_p1, "p_shl1_cast_fu_178_p1");
    sc_trace(mVcdFile, ki_cast4_fu_200_p1, "ki_cast4_fu_200_p1");
    sc_trace(mVcdFile, tmp_9_fu_222_p3, "tmp_9_fu_222_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_230_p1, "p_shl2_cast_fu_230_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_240_p1, "tmp_8_cast_fu_240_p1");
    sc_trace(mVcdFile, tmp_7_fu_244_p2, "tmp_7_fu_244_p2");
    sc_trace(mVcdFile, kj_cast2_fu_254_p1, "kj_cast2_fu_254_p1");
    sc_trace(mVcdFile, tmp_3_fu_270_p2, "tmp_3_fu_270_p2");
    sc_trace(mVcdFile, tmp_5_fu_276_p3, "tmp_5_fu_276_p3");
    sc_trace(mVcdFile, tmp_10_fu_288_p2, "tmp_10_fu_288_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

convolution_kernel::~convolution_kernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void convolution_kernel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_188_p2.read(), ap_const_lv1_1))) {
        i_reg_75 = i_1_reg_310.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_75 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_146_p2.read(), ap_const_lv1_0))) {
        j_reg_87 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_204_p2.read(), ap_const_lv1_1))) {
        j_reg_87 = j_1_reg_323.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_188_p2.read()))) {
        ki_reg_112 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_1))) {
        ki_reg_112 = ki_1_reg_331.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_204_p2.read()))) {
        kj_reg_135 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        kj_reg_135 = kj_1_reg_349.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_204_p2.read()))) {
        sum_1_reg_123 = sum_reg_99.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_1_reg_123 = sum_2_fu_302_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_188_p2.read()))) {
        sum_reg_99 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_1))) {
        sum_reg_99 = sum_1_reg_123.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buffer_load_reg_364 = buffer_r_q0.read();
        kernel_load_reg_369 = kernel_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_310 = i_1_fu_152_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_323 = j_1_fu_194_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ki_1_reg_331 = ki_1_fu_210_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        kj_1_reg_349 = kj_1_fu_264_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_204_p2.read()))) {
        tmp_2_reg_341 = tmp_2_fu_234_p2.read();
        tmp_s_reg_336 = tmp_s_fu_216_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_146_p2.read(), ap_const_lv1_0))) {
        tmp_4_reg_315 = tmp_4_fu_182_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_6_reg_374 = tmp_6_fu_298_p2.read();
    }
}

void convolution_kernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolution_kernel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolution_kernel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolution_kernel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolution_kernel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolution_kernel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void convolution_kernel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void convolution_kernel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void convolution_kernel::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond3_fu_146_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolution_kernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolution_kernel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_146_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolution_kernel::thread_buffer_r_address0() {
    buffer_r_address0 =  (sc_lv<10>) (tmp_8_fu_283_p1.read());
}

void convolution_kernel::thread_buffer_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_exitcond1_fu_204_p2() {
    exitcond1_fu_204_p2 = (!ki_reg_112.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ki_reg_112.read() == ap_const_lv2_3);
}

void convolution_kernel::thread_exitcond2_fu_188_p2() {
    exitcond2_fu_188_p2 = (!j_reg_87.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_87.read() == ap_const_lv5_1E);
}

void convolution_kernel::thread_exitcond3_fu_146_p2() {
    exitcond3_fu_146_p2 = (!i_reg_75.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_75.read() == ap_const_lv5_1E);
}

void convolution_kernel::thread_exitcond_fu_258_p2() {
    exitcond_fu_258_p2 = (!kj_reg_135.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(kj_reg_135.read() == ap_const_lv2_3);
}

void convolution_kernel::thread_i_1_fu_152_p2() {
    i_1_fu_152_p2 = (!i_reg_75.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_75.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void convolution_kernel::thread_j_1_fu_194_p2() {
    j_1_fu_194_p2 = (!j_reg_87.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_87.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void convolution_kernel::thread_kernel_address0() {
    kernel_address0 =  (sc_lv<4>) (tmp_13_cast_fu_293_p1.read());
}

void convolution_kernel::thread_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_ki_1_fu_210_p2() {
    ki_1_fu_210_p2 = (!ki_reg_112.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ki_reg_112.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolution_kernel::thread_ki_cast4_fu_200_p1() {
    ki_cast4_fu_200_p1 = esl_zext<5,2>(ki_reg_112.read());
}

void convolution_kernel::thread_kj_1_fu_264_p2() {
    kj_1_fu_264_p2 = (!kj_reg_135.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(kj_reg_135.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolution_kernel::thread_kj_cast2_fu_254_p1() {
    kj_cast2_fu_254_p1 = esl_zext<5,2>(kj_reg_135.read());
}

void convolution_kernel::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<10>) (tmp_7_cast_fu_249_p1.read());
}

void convolution_kernel::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_output_r_d0() {
    output_r_d0 = sum_reg_99.read();
}

void convolution_kernel::thread_output_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_204_p2.read(), ap_const_lv1_1))) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void convolution_kernel::thread_p_shl1_cast_fu_178_p1() {
    p_shl1_cast_fu_178_p1 = esl_zext<11,6>(tmp_1_fu_170_p3.read());
}

void convolution_kernel::thread_p_shl2_cast_fu_230_p1() {
    p_shl2_cast_fu_230_p1 = esl_zext<5,4>(tmp_9_fu_222_p3.read());
}

void convolution_kernel::thread_p_shl_cast_fu_166_p1() {
    p_shl_cast_fu_166_p1 = esl_zext<11,10>(tmp_fu_158_p3.read());
}

void convolution_kernel::thread_sum_2_fu_302_p2() {
    sum_2_fu_302_p2 = (!sum_1_reg_123.read().is_01() || !tmp_6_reg_374.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_1_reg_123.read()) + sc_biguint<32>(tmp_6_reg_374.read()));
}

void convolution_kernel::thread_tmp_10_fu_288_p2() {
    tmp_10_fu_288_p2 = (!tmp_2_reg_341.read().is_01() || !kj_cast2_fu_254_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_2_reg_341.read()) + sc_biguint<5>(kj_cast2_fu_254_p1.read()));
}

void convolution_kernel::thread_tmp_13_cast_fu_293_p1() {
    tmp_13_cast_fu_293_p1 = esl_sext<64,5>(tmp_10_fu_288_p2.read());
}

void convolution_kernel::thread_tmp_1_fu_170_p3() {
    tmp_1_fu_170_p3 = esl_concat<5,1>(i_reg_75.read(), ap_const_lv1_0);
}

void convolution_kernel::thread_tmp_2_fu_234_p2() {
    tmp_2_fu_234_p2 = (!p_shl2_cast_fu_230_p1.read().is_01() || !ki_cast4_fu_200_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl2_cast_fu_230_p1.read()) - sc_biguint<5>(ki_cast4_fu_200_p1.read()));
}

void convolution_kernel::thread_tmp_3_fu_270_p2() {
    tmp_3_fu_270_p2 = (!kj_cast2_fu_254_p1.read().is_01() || !j_reg_87.read().is_01())? sc_lv<5>(): (sc_biguint<5>(kj_cast2_fu_254_p1.read()) + sc_biguint<5>(j_reg_87.read()));
}

void convolution_kernel::thread_tmp_4_fu_182_p2() {
    tmp_4_fu_182_p2 = (!p_shl_cast_fu_166_p1.read().is_01() || !p_shl1_cast_fu_178_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_166_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_178_p1.read()));
}

void convolution_kernel::thread_tmp_5_fu_276_p3() {
    tmp_5_fu_276_p3 = esl_concat<5,5>(tmp_s_reg_336.read(), tmp_3_fu_270_p2.read());
}

void convolution_kernel::thread_tmp_6_fu_298_p2() {
    tmp_6_fu_298_p2 = (!kernel_load_reg_369.read().is_01() || !buffer_load_reg_364.read().is_01())? sc_lv<32>(): sc_bigint<32>(kernel_load_reg_369.read()) * sc_bigint<32>(buffer_load_reg_364.read());
}

void convolution_kernel::thread_tmp_7_cast_fu_249_p1() {
    tmp_7_cast_fu_249_p1 = esl_sext<64,11>(tmp_7_fu_244_p2.read());
}

void convolution_kernel::thread_tmp_7_fu_244_p2() {
    tmp_7_fu_244_p2 = (!tmp_4_reg_315.read().is_01() || !tmp_8_cast_fu_240_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_4_reg_315.read()) + sc_biguint<11>(tmp_8_cast_fu_240_p1.read()));
}

void convolution_kernel::thread_tmp_8_cast_fu_240_p1() {
    tmp_8_cast_fu_240_p1 = esl_zext<11,5>(j_reg_87.read());
}

void convolution_kernel::thread_tmp_8_fu_283_p1() {
    tmp_8_fu_283_p1 = esl_zext<64,10>(tmp_5_fu_276_p3.read());
}

void convolution_kernel::thread_tmp_9_fu_222_p3() {
    tmp_9_fu_222_p3 = esl_concat<2,2>(ki_reg_112.read(), ap_const_lv2_0);
}

void convolution_kernel::thread_tmp_fu_158_p3() {
    tmp_fu_158_p3 = esl_concat<5,5>(i_reg_75.read(), ap_const_lv5_0);
}

void convolution_kernel::thread_tmp_s_fu_216_p2() {
    tmp_s_fu_216_p2 = (!ki_cast4_fu_200_p1.read().is_01() || !i_reg_75.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ki_cast4_fu_200_p1.read()) + sc_biguint<5>(i_reg_75.read()));
}

void convolution_kernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_146_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond1_fu_204_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

