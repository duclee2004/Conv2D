// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv2d.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv2d::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv2d::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> conv2d::ap_ST_fsm_state1 = "1";
const sc_lv<8> conv2d::ap_ST_fsm_state2 = "10";
const sc_lv<8> conv2d::ap_ST_fsm_state3 = "100";
const sc_lv<8> conv2d::ap_ST_fsm_state4 = "1000";
const sc_lv<8> conv2d::ap_ST_fsm_state5 = "10000";
const sc_lv<8> conv2d::ap_ST_fsm_state6 = "100000";
const sc_lv<8> conv2d::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> conv2d::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> conv2d::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv2d::ap_const_lv32_1 = "1";
const sc_lv<1> conv2d::ap_const_lv1_0 = "0";
const sc_lv<32> conv2d::ap_const_lv32_2 = "10";
const sc_lv<32> conv2d::ap_const_lv32_5 = "101";
const sc_lv<32> conv2d::ap_const_lv32_6 = "110";
const sc_lv<6> conv2d::ap_const_lv6_0 = "000000";
const sc_lv<1> conv2d::ap_const_lv1_1 = "1";
const sc_lv<32> conv2d::ap_const_lv32_3 = "11";
const sc_lv<5> conv2d::ap_const_lv5_0 = "00000";
const sc_lv<32> conv2d::ap_const_lv32_4 = "100";
const sc_lv<32> conv2d::ap_const_lv32_7 = "111";
const sc_lv<6> conv2d::ap_const_lv6_20 = "100000";
const sc_lv<6> conv2d::ap_const_lv6_1 = "1";
const sc_lv<5> conv2d::ap_const_lv5_1E = "11110";
const sc_lv<5> conv2d::ap_const_lv5_1 = "1";
const bool conv2d::ap_const_boolean_1 = true;

conv2d::conv2d(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffer_U = new conv2d_buffer("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->we0(buffer_we0);
    buffer_U->d0(input_r_q0);
    buffer_U->q0(buffer_q0);
    output_U = new conv2d_output("output_U");
    output_U->clk(ap_clk);
    output_U->reset(ap_rst);
    output_U->address0(output_address0);
    output_U->ce0(output_ce0);
    output_U->we0(output_we0);
    output_U->d0(grp_convolution_kernel_fu_148_output_r_d0);
    output_U->q0(output_q0);
    grp_convolution_kernel_fu_148 = new convolution_kernel("grp_convolution_kernel_fu_148");
    grp_convolution_kernel_fu_148->ap_clk(ap_clk);
    grp_convolution_kernel_fu_148->ap_rst(ap_rst);
    grp_convolution_kernel_fu_148->ap_start(grp_convolution_kernel_fu_148_ap_start);
    grp_convolution_kernel_fu_148->ap_done(grp_convolution_kernel_fu_148_ap_done);
    grp_convolution_kernel_fu_148->ap_idle(grp_convolution_kernel_fu_148_ap_idle);
    grp_convolution_kernel_fu_148->ap_ready(grp_convolution_kernel_fu_148_ap_ready);
    grp_convolution_kernel_fu_148->buffer_r_address0(grp_convolution_kernel_fu_148_buffer_r_address0);
    grp_convolution_kernel_fu_148->buffer_r_ce0(grp_convolution_kernel_fu_148_buffer_r_ce0);
    grp_convolution_kernel_fu_148->buffer_r_q0(buffer_q0);
    grp_convolution_kernel_fu_148->kernel_address0(grp_convolution_kernel_fu_148_kernel_address0);
    grp_convolution_kernel_fu_148->kernel_ce0(grp_convolution_kernel_fu_148_kernel_ce0);
    grp_convolution_kernel_fu_148->kernel_q0(kernel_q0);
    grp_convolution_kernel_fu_148->output_r_address0(grp_convolution_kernel_fu_148_output_r_address0);
    grp_convolution_kernel_fu_148->output_r_ce0(grp_convolution_kernel_fu_148_output_r_ce0);
    grp_convolution_kernel_fu_148->output_r_we0(grp_convolution_kernel_fu_148_output_r_we0);
    grp_convolution_kernel_fu_148->output_r_d0(grp_convolution_kernel_fu_148_output_r_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond1_i4_fu_206_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond1_i4_fu_206_p2 );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( tmp_18_cast_reg_295 );
    sensitive << ( grp_convolution_kernel_fu_148_buffer_r_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( grp_convolution_kernel_fu_148_buffer_r_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_buffer_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond1_i4_fu_206_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i_i3_reg_126 );

    SC_METHOD(thread_exitcond1_i_fu_156_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_i_reg_104 );

    SC_METHOD(thread_exitcond_i8_fu_248_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( j_i7_reg_137 );

    SC_METHOD(thread_exitcond_i_fu_180_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_i_reg_115 );

    SC_METHOD(thread_grp_convolution_kernel_fu_148_ap_start);
    sensitive << ( grp_convolution_kernel_fu_148_ap_start_reg );

    SC_METHOD(thread_i_2_fu_212_p2);
    sensitive << ( i_i3_reg_126 );

    SC_METHOD(thread_i_fu_162_p2);
    sensitive << ( i_i_reg_104 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_18_cast_fu_201_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_2_fu_254_p2);
    sensitive << ( j_i7_reg_137 );

    SC_METHOD(thread_j_fu_186_p2);
    sensitive << ( j_i_reg_115 );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( grp_convolution_kernel_fu_148_kernel_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( grp_convolution_kernel_fu_148_kernel_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_19_cast_fu_269_p1 );
    sensitive << ( grp_convolution_kernel_fu_148_output_r_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_convolution_kernel_fu_148_output_r_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_we0);
    sensitive << ( grp_convolution_kernel_fu_148_output_r_we0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_shl1_cast_fu_238_p1);
    sensitive << ( tmp_11_fu_230_p3 );

    SC_METHOD(thread_p_shl_cast_fu_226_p1);
    sensitive << ( tmp_s_fu_218_p3 );

    SC_METHOD(thread_result_address0);
    sensitive << ( tmp_19_cast_reg_326 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_result_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_result_d0);
    sensitive << ( output_q0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_result_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp_11_fu_230_p3);
    sensitive << ( i_i3_reg_126 );

    SC_METHOD(thread_tmp_12_fu_242_p2);
    sensitive << ( p_shl_cast_fu_226_p1 );
    sensitive << ( p_shl1_cast_fu_238_p1 );

    SC_METHOD(thread_tmp_13_fu_196_p2);
    sensitive << ( tmp_14_cast_reg_282 );
    sensitive << ( tmp_5_i_cast_fu_192_p1 );

    SC_METHOD(thread_tmp_14_cast_fu_176_p1);
    sensitive << ( tmp_fu_168_p3 );

    SC_METHOD(thread_tmp_14_fu_264_p2);
    sensitive << ( tmp_12_reg_313 );
    sensitive << ( tmp_2_i_cast_fu_260_p1 );

    SC_METHOD(thread_tmp_18_cast_fu_201_p1);
    sensitive << ( tmp_13_fu_196_p2 );

    SC_METHOD(thread_tmp_19_cast_fu_269_p1);
    sensitive << ( tmp_14_fu_264_p2 );

    SC_METHOD(thread_tmp_2_i_cast_fu_260_p1);
    sensitive << ( j_i7_reg_137 );

    SC_METHOD(thread_tmp_5_i_cast_fu_192_p1);
    sensitive << ( j_i_reg_115 );

    SC_METHOD(thread_tmp_fu_168_p3);
    sensitive << ( i_i_reg_104 );

    SC_METHOD(thread_tmp_s_fu_218_p3);
    sensitive << ( i_i3_reg_126 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_i_fu_156_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_i_fu_180_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond1_i4_fu_206_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_i8_fu_248_p2 );
    sensitive << ( grp_convolution_kernel_fu_148_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    grp_convolution_kernel_fu_148_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv2d_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, result_address0, "(port)result_address0");
    sc_trace(mVcdFile, result_ce0, "(port)result_ce0");
    sc_trace(mVcdFile, result_we0, "(port)result_we0");
    sc_trace(mVcdFile, result_d0, "(port)result_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_162_p2, "i_fu_162_p2");
    sc_trace(mVcdFile, i_reg_277, "i_reg_277");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_14_cast_fu_176_p1, "tmp_14_cast_fu_176_p1");
    sc_trace(mVcdFile, tmp_14_cast_reg_282, "tmp_14_cast_reg_282");
    sc_trace(mVcdFile, exitcond1_i_fu_156_p2, "exitcond1_i_fu_156_p2");
    sc_trace(mVcdFile, j_fu_186_p2, "j_fu_186_p2");
    sc_trace(mVcdFile, j_reg_290, "j_reg_290");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_18_cast_fu_201_p1, "tmp_18_cast_fu_201_p1");
    sc_trace(mVcdFile, tmp_18_cast_reg_295, "tmp_18_cast_reg_295");
    sc_trace(mVcdFile, exitcond_i_fu_180_p2, "exitcond_i_fu_180_p2");
    sc_trace(mVcdFile, i_2_fu_212_p2, "i_2_fu_212_p2");
    sc_trace(mVcdFile, i_2_reg_308, "i_2_reg_308");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_12_fu_242_p2, "tmp_12_fu_242_p2");
    sc_trace(mVcdFile, tmp_12_reg_313, "tmp_12_reg_313");
    sc_trace(mVcdFile, exitcond1_i4_fu_206_p2, "exitcond1_i4_fu_206_p2");
    sc_trace(mVcdFile, j_2_fu_254_p2, "j_2_fu_254_p2");
    sc_trace(mVcdFile, j_2_reg_321, "j_2_reg_321");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_19_cast_fu_269_p1, "tmp_19_cast_fu_269_p1");
    sc_trace(mVcdFile, tmp_19_cast_reg_326, "tmp_19_cast_reg_326");
    sc_trace(mVcdFile, exitcond_i8_fu_248_p2, "exitcond_i8_fu_248_p2");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, buffer_we0, "buffer_we0");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, output_address0, "output_address0");
    sc_trace(mVcdFile, output_ce0, "output_ce0");
    sc_trace(mVcdFile, output_we0, "output_we0");
    sc_trace(mVcdFile, output_q0, "output_q0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_ap_start, "grp_convolution_kernel_fu_148_ap_start");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_ap_done, "grp_convolution_kernel_fu_148_ap_done");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_ap_idle, "grp_convolution_kernel_fu_148_ap_idle");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_ap_ready, "grp_convolution_kernel_fu_148_ap_ready");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_buffer_r_address0, "grp_convolution_kernel_fu_148_buffer_r_address0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_buffer_r_ce0, "grp_convolution_kernel_fu_148_buffer_r_ce0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_kernel_address0, "grp_convolution_kernel_fu_148_kernel_address0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_kernel_ce0, "grp_convolution_kernel_fu_148_kernel_ce0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_output_r_address0, "grp_convolution_kernel_fu_148_output_r_address0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_output_r_ce0, "grp_convolution_kernel_fu_148_output_r_ce0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_output_r_we0, "grp_convolution_kernel_fu_148_output_r_we0");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_output_r_d0, "grp_convolution_kernel_fu_148_output_r_d0");
    sc_trace(mVcdFile, i_i_reg_104, "i_i_reg_104");
    sc_trace(mVcdFile, j_i_reg_115, "j_i_reg_115");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_i3_reg_126, "i_i3_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, j_i7_reg_137, "j_i7_reg_137");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_convolution_kernel_fu_148_ap_start_reg, "grp_convolution_kernel_fu_148_ap_start_reg");
    sc_trace(mVcdFile, tmp_fu_168_p3, "tmp_fu_168_p3");
    sc_trace(mVcdFile, tmp_5_i_cast_fu_192_p1, "tmp_5_i_cast_fu_192_p1");
    sc_trace(mVcdFile, tmp_13_fu_196_p2, "tmp_13_fu_196_p2");
    sc_trace(mVcdFile, tmp_s_fu_218_p3, "tmp_s_fu_218_p3");
    sc_trace(mVcdFile, tmp_11_fu_230_p3, "tmp_11_fu_230_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_226_p1, "p_shl_cast_fu_226_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_238_p1, "p_shl1_cast_fu_238_p1");
    sc_trace(mVcdFile, tmp_2_i_cast_fu_260_p1, "tmp_2_i_cast_fu_260_p1");
    sc_trace(mVcdFile, tmp_14_fu_264_p2, "tmp_14_fu_264_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("conv2d.hdltvin.dat");
    mHdltvoutHandle.open("conv2d.hdltvout.dat");
}

conv2d::~conv2d() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buffer_U;
    delete output_U;
    delete grp_convolution_kernel_fu_148;
}

void conv2d::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_convolution_kernel_fu_148_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond1_i_fu_156_p2.read(), ap_const_lv1_1))) {
            grp_convolution_kernel_fu_148_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_convolution_kernel_fu_148_ap_ready.read())) {
            grp_convolution_kernel_fu_148_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(exitcond_i8_fu_248_p2.read(), ap_const_lv1_1))) {
        i_i3_reg_126 = i_2_reg_308.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(grp_convolution_kernel_fu_148_ap_done.read(), ap_const_logic_1))) {
        i_i3_reg_126 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_180_p2.read(), ap_const_lv1_1))) {
        i_i_reg_104 = i_reg_277.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_i_reg_104 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i4_fu_206_p2.read()))) {
        j_i7_reg_137 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_i7_reg_137 = j_2_reg_321.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_i_fu_156_p2.read(), ap_const_lv1_0))) {
        j_i_reg_115 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_i_reg_115 = j_reg_290.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_2_reg_308 = i_2_fu_212_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_277 = i_fu_162_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_2_reg_321 = j_2_fu_254_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_290 = j_fu_186_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i4_fu_206_p2.read()))) {
        tmp_12_reg_313 = tmp_12_fu_242_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_156_p2.read(), ap_const_lv1_0))) {
        tmp_14_cast_reg_282 = tmp_14_cast_fu_176_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_180_p2.read()))) {
        tmp_18_cast_reg_295 = tmp_18_cast_fu_201_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i8_fu_248_p2.read()))) {
        tmp_19_cast_reg_326 = tmp_19_cast_fu_269_p1.read();
    }
}

void conv2d::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv2d::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv2d::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv2d::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv2d::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void conv2d::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void conv2d::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void conv2d::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void conv2d::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond1_i4_fu_206_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void conv2d::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv2d::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond1_i4_fu_206_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void conv2d::thread_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_address0 =  (sc_lv<10>) (tmp_18_cast_reg_295.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_address0 = grp_convolution_kernel_fu_148_buffer_r_address0.read();
    } else {
        buffer_address0 = "XXXXXXXXXX";
    }
}

void conv2d::thread_buffer_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_ce0 = grp_convolution_kernel_fu_148_buffer_r_ce0.read();
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_buffer_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_we0 = ap_const_logic_1;
    } else {
        buffer_we0 = ap_const_logic_0;
    }
}

void conv2d::thread_exitcond1_i4_fu_206_p2() {
    exitcond1_i4_fu_206_p2 = (!i_i3_reg_126.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(i_i3_reg_126.read() == ap_const_lv5_1E);
}

void conv2d::thread_exitcond1_i_fu_156_p2() {
    exitcond1_i_fu_156_p2 = (!i_i_reg_104.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_104.read() == ap_const_lv6_20);
}

void conv2d::thread_exitcond_i8_fu_248_p2() {
    exitcond_i8_fu_248_p2 = (!j_i7_reg_137.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(j_i7_reg_137.read() == ap_const_lv5_1E);
}

void conv2d::thread_exitcond_i_fu_180_p2() {
    exitcond_i_fu_180_p2 = (!j_i_reg_115.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_i_reg_115.read() == ap_const_lv6_20);
}

void conv2d::thread_grp_convolution_kernel_fu_148_ap_start() {
    grp_convolution_kernel_fu_148_ap_start = grp_convolution_kernel_fu_148_ap_start_reg.read();
}

void conv2d::thread_i_2_fu_212_p2() {
    i_2_fu_212_p2 = (!i_i3_reg_126.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i3_reg_126.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv2d::thread_i_fu_162_p2() {
    i_fu_162_p2 = (!i_i_reg_104.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_i_reg_104.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void conv2d::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<10>) (tmp_18_cast_fu_201_p1.read());
}

void conv2d::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_j_2_fu_254_p2() {
    j_2_fu_254_p2 = (!j_i7_reg_137.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_i7_reg_137.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv2d::thread_j_fu_186_p2() {
    j_fu_186_p2 = (!j_i_reg_115.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_i_reg_115.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void conv2d::thread_kernel_address0() {
    kernel_address0 = grp_convolution_kernel_fu_148_kernel_address0.read();
}

void conv2d::thread_kernel_ce0() {
    kernel_ce0 = grp_convolution_kernel_fu_148_kernel_ce0.read();
}

void conv2d::thread_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        output_address0 =  (sc_lv<10>) (tmp_19_cast_fu_269_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_address0 = grp_convolution_kernel_fu_148_output_r_address0.read();
    } else {
        output_address0 = "XXXXXXXXXX";
    }
}

void conv2d::thread_output_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        output_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_ce0 = grp_convolution_kernel_fu_148_output_r_ce0.read();
    } else {
        output_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_output_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_we0 = grp_convolution_kernel_fu_148_output_r_we0.read();
    } else {
        output_we0 = ap_const_logic_0;
    }
}

void conv2d::thread_p_shl1_cast_fu_238_p1() {
    p_shl1_cast_fu_238_p1 = esl_zext<11,6>(tmp_11_fu_230_p3.read());
}

void conv2d::thread_p_shl_cast_fu_226_p1() {
    p_shl_cast_fu_226_p1 = esl_zext<11,10>(tmp_s_fu_218_p3.read());
}

void conv2d::thread_result_address0() {
    result_address0 =  (sc_lv<10>) (tmp_19_cast_reg_326.read());
}

void conv2d::thread_result_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        result_ce0 = ap_const_logic_1;
    } else {
        result_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_result_d0() {
    result_d0 = output_q0.read();
}

void conv2d::thread_result_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        result_we0 = ap_const_logic_1;
    } else {
        result_we0 = ap_const_logic_0;
    }
}

void conv2d::thread_tmp_11_fu_230_p3() {
    tmp_11_fu_230_p3 = esl_concat<5,1>(i_i3_reg_126.read(), ap_const_lv1_0);
}

void conv2d::thread_tmp_12_fu_242_p2() {
    tmp_12_fu_242_p2 = (!p_shl_cast_fu_226_p1.read().is_01() || !p_shl1_cast_fu_238_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_226_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_238_p1.read()));
}

void conv2d::thread_tmp_13_fu_196_p2() {
    tmp_13_fu_196_p2 = (!tmp_14_cast_reg_282.read().is_01() || !tmp_5_i_cast_fu_192_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_14_cast_reg_282.read()) + sc_biguint<12>(tmp_5_i_cast_fu_192_p1.read()));
}

void conv2d::thread_tmp_14_cast_fu_176_p1() {
    tmp_14_cast_fu_176_p1 = esl_zext<12,11>(tmp_fu_168_p3.read());
}

void conv2d::thread_tmp_14_fu_264_p2() {
    tmp_14_fu_264_p2 = (!tmp_12_reg_313.read().is_01() || !tmp_2_i_cast_fu_260_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_12_reg_313.read()) + sc_biguint<11>(tmp_2_i_cast_fu_260_p1.read()));
}

void conv2d::thread_tmp_18_cast_fu_201_p1() {
    tmp_18_cast_fu_201_p1 = esl_zext<64,12>(tmp_13_fu_196_p2.read());
}

void conv2d::thread_tmp_19_cast_fu_269_p1() {
    tmp_19_cast_fu_269_p1 = esl_sext<64,11>(tmp_14_fu_264_p2.read());
}

void conv2d::thread_tmp_2_i_cast_fu_260_p1() {
    tmp_2_i_cast_fu_260_p1 = esl_zext<11,5>(j_i7_reg_137.read());
}

void conv2d::thread_tmp_5_i_cast_fu_192_p1() {
    tmp_5_i_cast_fu_192_p1 = esl_zext<12,6>(j_i_reg_115.read());
}

void conv2d::thread_tmp_fu_168_p3() {
    tmp_fu_168_p3 = esl_concat<6,5>(i_i_reg_104.read(), ap_const_lv5_0);
}

void conv2d::thread_tmp_s_fu_218_p3() {
    tmp_s_fu_218_p3 = esl_concat<5,5>(i_i3_reg_126.read(), ap_const_lv5_0);
}

void conv2d::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_156_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_i_fu_180_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_convolution_kernel_fu_148_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond1_i4_fu_206_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(exitcond_i8_fu_248_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void conv2d::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_address0\" :  \"" << input_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_ce0\" :  \"" << input_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_q0\" :  \"" << input_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_address0\" :  \"" << kernel_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_ce0\" :  \"" << kernel_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_q0\" :  \"" << kernel_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_address0\" :  \"" << result_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_ce0\" :  \"" << result_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_we0\" :  \"" << result_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_d0\" :  \"" << result_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

