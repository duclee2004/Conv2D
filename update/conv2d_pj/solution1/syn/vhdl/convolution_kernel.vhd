-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_182_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_reg_315 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_194_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_323 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ki_1_fu_210_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ki_1_reg_331 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_216_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_341 : STD_LOGIC_VECTOR (4 downto 0);
    signal kj_1_fu_264_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kj_1_reg_349 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_load_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_load_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_2_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_75 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_87 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal ki_reg_112 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal kj_reg_135 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_cast_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_170_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_166_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_178_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ki_cast4_fu_200_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_222_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_230_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_244_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal kj_cast2_fu_254_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_276_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_288_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_188_p2 = ap_const_lv1_1))) then 
                i_reg_75 <= i_1_reg_310;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_75 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_87 <= ap_const_lv5_0;
            elsif (((exitcond1_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_87 <= j_1_reg_323;
            end if; 
        end if;
    end process;

    ki_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ki_reg_112 <= ap_const_lv2_0;
            elsif (((exitcond_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ki_reg_112 <= ki_1_reg_331;
            end if; 
        end if;
    end process;

    kj_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                kj_reg_135 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                kj_reg_135 <= kj_1_reg_349;
            end if; 
        end if;
    end process;

    sum_1_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_1_reg_123 <= sum_reg_99;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_1_reg_123 <= sum_2_fu_302_p2;
            end if; 
        end if;
    end process;

    sum_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_reg_99 <= ap_const_lv32_0;
            elsif (((exitcond_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_reg_99 <= sum_1_reg_123;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                buffer_load_reg_364 <= buffer_r_q0;
                kernel_load_reg_369 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_310 <= i_1_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_323 <= j_1_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ki_1_reg_331 <= ki_1_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kj_1_reg_349 <= kj_1_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_2_reg_341 <= tmp_2_fu_234_p2;
                tmp_s_reg_336 <= tmp_s_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_4_reg_315(10 downto 1) <= tmp_4_fu_182_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_6_reg_374 <= tmp_6_fu_298_p2;
            end if;
        end if;
    end process;
    tmp_4_reg_315(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_146_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_204_p2, ap_CS_fsm_state5, exitcond_fu_258_p2, exitcond2_fu_188_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_146_p2)
    begin
        if ((((exitcond3_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_146_p2)
    begin
        if (((exitcond3_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= tmp_8_fu_283_p1(10 - 1 downto 0);

    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_204_p2 <= "1" when (ki_reg_112 = ap_const_lv2_3) else "0";
    exitcond2_fu_188_p2 <= "1" when (j_reg_87 = ap_const_lv5_1E) else "0";
    exitcond3_fu_146_p2 <= "1" when (i_reg_75 = ap_const_lv5_1E) else "0";
    exitcond_fu_258_p2 <= "1" when (kj_reg_135 = ap_const_lv2_3) else "0";
    i_1_fu_152_p2 <= std_logic_vector(unsigned(i_reg_75) + unsigned(ap_const_lv5_1));
    j_1_fu_194_p2 <= std_logic_vector(unsigned(j_reg_87) + unsigned(ap_const_lv5_1));
    kernel_address0 <= tmp_13_cast_fu_293_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ki_1_fu_210_p2 <= std_logic_vector(unsigned(ki_reg_112) + unsigned(ap_const_lv2_1));
    ki_cast4_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ki_reg_112),5));
    kj_1_fu_264_p2 <= std_logic_vector(unsigned(kj_reg_135) + unsigned(ap_const_lv2_1));
    kj_cast2_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kj_reg_135),5));
    output_r_address0 <= tmp_7_cast_fu_249_p1(10 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= sum_reg_99;

    output_r_we0_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_204_p2)
    begin
        if (((exitcond1_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_170_p3),11));
    p_shl2_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_222_p3),5));
    p_shl_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_158_p3),11));
    sum_2_fu_302_p2 <= std_logic_vector(unsigned(sum_1_reg_123) + unsigned(tmp_6_reg_374));
    tmp_10_fu_288_p2 <= std_logic_vector(unsigned(tmp_2_reg_341) + unsigned(kj_cast2_fu_254_p1));
        tmp_13_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_288_p2),64));

    tmp_1_fu_170_p3 <= (i_reg_75 & ap_const_lv1_0);
    tmp_2_fu_234_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_230_p1) - unsigned(ki_cast4_fu_200_p1));
    tmp_3_fu_270_p2 <= std_logic_vector(unsigned(kj_cast2_fu_254_p1) + unsigned(j_reg_87));
    tmp_4_fu_182_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_166_p1) - unsigned(p_shl1_cast_fu_178_p1));
    tmp_5_fu_276_p3 <= (tmp_s_reg_336 & tmp_3_fu_270_p2);
    tmp_6_fu_298_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_369) * signed(buffer_load_reg_364))), 32));
        tmp_7_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_244_p2),64));

    tmp_7_fu_244_p2 <= std_logic_vector(unsigned(tmp_4_reg_315) + unsigned(tmp_8_cast_fu_240_p1));
    tmp_8_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_87),11));
    tmp_8_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_276_p3),64));
    tmp_9_fu_222_p3 <= (ki_reg_112 & ap_const_lv2_0);
    tmp_fu_158_p3 <= (i_reg_75 & ap_const_lv5_0);
    tmp_s_fu_216_p2 <= std_logic_vector(unsigned(ki_cast4_fu_200_p1) + unsigned(i_reg_75));
end behav;
