-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=43636,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=361,HLS_SYN_LUT=622,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_162_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_277 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_14_cast_fu_176_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_cast_reg_282 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_i_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_186_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_290 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_18_cast_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_212_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_308 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_12_fu_242_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_reg_313 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_i4_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_321 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_19_cast_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_reg_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i8_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_kernel_fu_148_ap_start : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_ap_done : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_ap_idle : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_ap_ready : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution_kernel_fu_148_buffer_r_ce0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_kernel_fu_148_kernel_ce0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution_kernel_fu_148_output_r_ce0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_output_r_we0 : STD_LOGIC;
    signal grp_convolution_kernel_fu_148_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_104 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_i_reg_115 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i3_reg_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_i7_reg_137 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_convolution_kernel_fu_148_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_168_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_i_cast_fu_192_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_196_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_218_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_230_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_226_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_238_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_cast_fu_260_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_264_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component convolution_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component conv2d_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => input_r_q0,
        q0 => buffer_q0);

    output_U : component conv2d_output
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => grp_convolution_kernel_fu_148_output_r_d0,
        q0 => output_q0);

    grp_convolution_kernel_fu_148 : component convolution_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_kernel_fu_148_ap_start,
        ap_done => grp_convolution_kernel_fu_148_ap_done,
        ap_idle => grp_convolution_kernel_fu_148_ap_idle,
        ap_ready => grp_convolution_kernel_fu_148_ap_ready,
        buffer_r_address0 => grp_convolution_kernel_fu_148_buffer_r_address0,
        buffer_r_ce0 => grp_convolution_kernel_fu_148_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        kernel_address0 => grp_convolution_kernel_fu_148_kernel_address0,
        kernel_ce0 => grp_convolution_kernel_fu_148_kernel_ce0,
        kernel_q0 => kernel_q0,
        output_r_address0 => grp_convolution_kernel_fu_148_output_r_address0,
        output_r_ce0 => grp_convolution_kernel_fu_148_output_r_ce0,
        output_r_we0 => grp_convolution_kernel_fu_148_output_r_we0,
        output_r_d0 => grp_convolution_kernel_fu_148_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution_kernel_fu_148_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_kernel_fu_148_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond1_i_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_convolution_kernel_fu_148_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_kernel_fu_148_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_kernel_fu_148_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i3_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i8_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_i3_reg_126 <= i_2_reg_308;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_148_ap_done = ap_const_logic_1))) then 
                i_i3_reg_126 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i_reg_104 <= i_reg_277;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_104 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_i7_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i4_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_i7_reg_137 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_i7_reg_137 <= j_2_reg_321;
            end if; 
        end if;
    end process;

    j_i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_115 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_i_reg_115 <= j_reg_290;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_308 <= i_2_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_277 <= i_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_321 <= j_2_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_290 <= j_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i4_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_12_reg_313(10 downto 1) <= tmp_12_fu_242_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_14_cast_reg_282(10 downto 5) <= tmp_14_cast_fu_176_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_18_cast_reg_295(11 downto 0) <= tmp_18_cast_fu_201_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i8_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_19_cast_reg_326 <= tmp_19_cast_fu_269_p1;
            end if;
        end if;
    end process;
    tmp_14_cast_reg_282(4 downto 0) <= "00000";
    tmp_14_cast_reg_282(11) <= '0';
    tmp_18_cast_reg_295(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_12_reg_313(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_i_fu_156_p2, ap_CS_fsm_state3, exitcond_i_fu_180_p2, ap_CS_fsm_state6, exitcond1_i4_fu_206_p2, ap_CS_fsm_state7, exitcond_i8_fu_248_p2, grp_convolution_kernel_fu_148_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_i_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_convolution_kernel_fu_148_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond1_i4_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_i8_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state6, exitcond1_i4_fu_206_p2)
    begin
        if (((exitcond1_i4_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond1_i4_fu_206_p2)
    begin
        if (((exitcond1_i4_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(tmp_18_cast_reg_295, grp_convolution_kernel_fu_148_buffer_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_address0 <= tmp_18_cast_reg_295(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_address0 <= grp_convolution_kernel_fu_148_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(grp_convolution_kernel_fu_148_buffer_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_ce0 <= grp_convolution_kernel_fu_148_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_we0 <= ap_const_logic_1;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i4_fu_206_p2 <= "1" when (i_i3_reg_126 = ap_const_lv5_1E) else "0";
    exitcond1_i_fu_156_p2 <= "1" when (i_i_reg_104 = ap_const_lv6_20) else "0";
    exitcond_i8_fu_248_p2 <= "1" when (j_i7_reg_137 = ap_const_lv5_1E) else "0";
    exitcond_i_fu_180_p2 <= "1" when (j_i_reg_115 = ap_const_lv6_20) else "0";
    grp_convolution_kernel_fu_148_ap_start <= grp_convolution_kernel_fu_148_ap_start_reg;
    i_2_fu_212_p2 <= std_logic_vector(unsigned(i_i3_reg_126) + unsigned(ap_const_lv5_1));
    i_fu_162_p2 <= std_logic_vector(unsigned(i_i_reg_104) + unsigned(ap_const_lv6_1));
    input_r_address0 <= tmp_18_cast_fu_201_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_254_p2 <= std_logic_vector(unsigned(j_i7_reg_137) + unsigned(ap_const_lv5_1));
    j_fu_186_p2 <= std_logic_vector(unsigned(j_i_reg_115) + unsigned(ap_const_lv6_1));
    kernel_address0 <= grp_convolution_kernel_fu_148_kernel_address0;
    kernel_ce0 <= grp_convolution_kernel_fu_148_kernel_ce0;

    output_address0_assign_proc : process(ap_CS_fsm_state7, tmp_19_cast_fu_269_p1, grp_convolution_kernel_fu_148_output_r_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_address0 <= tmp_19_cast_fu_269_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_address0 <= grp_convolution_kernel_fu_148_output_r_address0;
        else 
            output_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(ap_CS_fsm_state7, grp_convolution_kernel_fu_148_output_r_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_ce0 <= grp_convolution_kernel_fu_148_output_r_ce0;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_we0_assign_proc : process(grp_convolution_kernel_fu_148_output_r_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_we0 <= grp_convolution_kernel_fu_148_output_r_we0;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_230_p3),11));
    p_shl_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_218_p3),11));
    result_address0 <= tmp_19_cast_reg_326(10 - 1 downto 0);

    result_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= output_q0;

    result_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_230_p3 <= (i_i3_reg_126 & ap_const_lv1_0);
    tmp_12_fu_242_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_226_p1) - unsigned(p_shl1_cast_fu_238_p1));
    tmp_13_fu_196_p2 <= std_logic_vector(unsigned(tmp_14_cast_reg_282) + unsigned(tmp_5_i_cast_fu_192_p1));
    tmp_14_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_168_p3),12));
    tmp_14_fu_264_p2 <= std_logic_vector(unsigned(tmp_12_reg_313) + unsigned(tmp_2_i_cast_fu_260_p1));
    tmp_18_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_196_p2),64));
        tmp_19_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_264_p2),64));

    tmp_2_i_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i7_reg_137),11));
    tmp_5_i_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_115),12));
    tmp_fu_168_p3 <= (i_i_reg_104 & ap_const_lv5_0);
    tmp_s_fu_218_p3 <= (i_i3_reg_126 & ap_const_lv5_0);
end behav;
