// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_r_ce0;
reg kernel_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_1_fu_152_p2;
reg   [4:0] i_1_reg_310;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_4_fu_182_p2;
reg   [10:0] tmp_4_reg_315;
wire   [0:0] exitcond3_fu_146_p2;
wire   [4:0] j_1_fu_194_p2;
reg   [4:0] j_1_reg_323;
wire    ap_CS_fsm_state3;
wire   [1:0] ki_1_fu_210_p2;
reg   [1:0] ki_1_reg_331;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_s_fu_216_p2;
reg   [4:0] tmp_s_reg_336;
wire   [0:0] exitcond1_fu_204_p2;
wire   [4:0] tmp_2_fu_234_p2;
reg   [4:0] tmp_2_reg_341;
wire   [1:0] kj_1_fu_264_p2;
reg   [1:0] kj_1_reg_349;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_258_p2;
reg  signed [31:0] buffer_load_reg_364;
wire    ap_CS_fsm_state6;
reg  signed [31:0] kernel_load_reg_369;
wire   [31:0] tmp_6_fu_298_p2;
reg   [31:0] tmp_6_reg_374;
wire    ap_CS_fsm_state7;
wire   [31:0] sum_2_fu_302_p2;
wire    ap_CS_fsm_state8;
reg   [4:0] i_reg_75;
wire   [0:0] exitcond2_fu_188_p2;
reg   [4:0] j_reg_87;
reg   [31:0] sum_reg_99;
reg   [1:0] ki_reg_112;
reg   [31:0] sum_1_reg_123;
reg   [1:0] kj_reg_135;
wire  signed [63:0] tmp_7_cast_fu_249_p1;
wire   [63:0] tmp_8_fu_283_p1;
wire  signed [63:0] tmp_13_cast_fu_293_p1;
wire   [9:0] tmp_fu_158_p3;
wire   [5:0] tmp_1_fu_170_p3;
wire   [10:0] p_shl_cast_fu_166_p1;
wire   [10:0] p_shl1_cast_fu_178_p1;
wire   [4:0] ki_cast4_fu_200_p1;
wire   [3:0] tmp_9_fu_222_p3;
wire   [4:0] p_shl2_cast_fu_230_p1;
wire   [10:0] tmp_8_cast_fu_240_p1;
wire   [10:0] tmp_7_fu_244_p2;
wire   [4:0] kj_cast2_fu_254_p1;
wire   [4:0] tmp_3_fu_270_p2;
wire   [9:0] tmp_5_fu_276_p3;
wire   [4:0] tmp_10_fu_288_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_188_p2 == 1'd1))) begin
        i_reg_75 <= i_1_reg_310;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_75 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_87 <= 5'd0;
    end else if (((exitcond1_fu_204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_87 <= j_1_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ki_reg_112 <= 2'd0;
    end else if (((exitcond_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ki_reg_112 <= ki_1_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kj_reg_135 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kj_reg_135 <= kj_1_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_1_reg_123 <= sum_reg_99;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_1_reg_123 <= sum_2_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_reg_99 <= 32'd0;
    end else if (((exitcond_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_reg_99 <= sum_1_reg_123;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_load_reg_364 <= buffer_r_q0;
        kernel_load_reg_369 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_310 <= i_1_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_323 <= j_1_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ki_1_reg_331 <= ki_1_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kj_1_reg_349 <= kj_1_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_2_reg_341 <= tmp_2_fu_234_p2;
        tmp_s_reg_336 <= tmp_s_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_315[10 : 1] <= tmp_4_fu_182_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_6_reg_374 <= tmp_6_fu_298_p2;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign buffer_r_address0 = tmp_8_fu_283_p1;

assign exitcond1_fu_204_p2 = ((ki_reg_112 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_188_p2 = ((j_reg_87 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond3_fu_146_p2 = ((i_reg_75 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond_fu_258_p2 = ((kj_reg_135 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_152_p2 = (i_reg_75 + 5'd1);

assign j_1_fu_194_p2 = (j_reg_87 + 5'd1);

assign kernel_address0 = tmp_13_cast_fu_293_p1;

assign ki_1_fu_210_p2 = (ki_reg_112 + 2'd1);

assign ki_cast4_fu_200_p1 = ki_reg_112;

assign kj_1_fu_264_p2 = (kj_reg_135 + 2'd1);

assign kj_cast2_fu_254_p1 = kj_reg_135;

assign output_r_address0 = tmp_7_cast_fu_249_p1;

assign output_r_d0 = sum_reg_99;

assign p_shl1_cast_fu_178_p1 = tmp_1_fu_170_p3;

assign p_shl2_cast_fu_230_p1 = tmp_9_fu_222_p3;

assign p_shl_cast_fu_166_p1 = tmp_fu_158_p3;

assign sum_2_fu_302_p2 = (sum_1_reg_123 + tmp_6_reg_374);

assign tmp_10_fu_288_p2 = (tmp_2_reg_341 + kj_cast2_fu_254_p1);

assign tmp_13_cast_fu_293_p1 = $signed(tmp_10_fu_288_p2);

assign tmp_1_fu_170_p3 = {{i_reg_75}, {1'd0}};

assign tmp_2_fu_234_p2 = (p_shl2_cast_fu_230_p1 - ki_cast4_fu_200_p1);

assign tmp_3_fu_270_p2 = (kj_cast2_fu_254_p1 + j_reg_87);

assign tmp_4_fu_182_p2 = (p_shl_cast_fu_166_p1 - p_shl1_cast_fu_178_p1);

assign tmp_5_fu_276_p3 = {{tmp_s_reg_336}, {tmp_3_fu_270_p2}};

assign tmp_6_fu_298_p2 = ($signed(kernel_load_reg_369) * $signed(buffer_load_reg_364));

assign tmp_7_cast_fu_249_p1 = $signed(tmp_7_fu_244_p2);

assign tmp_7_fu_244_p2 = (tmp_4_reg_315 + tmp_8_cast_fu_240_p1);

assign tmp_8_cast_fu_240_p1 = j_reg_87;

assign tmp_8_fu_283_p1 = tmp_5_fu_276_p3;

assign tmp_9_fu_222_p3 = {{ki_reg_112}, {2'd0}};

assign tmp_fu_158_p3 = {{i_reg_75}, {5'd0}};

assign tmp_s_fu_216_p2 = (ki_cast4_fu_200_p1 + i_reg_75);

always @ (posedge ap_clk) begin
    tmp_4_reg_315[0] <= 1'b0;
end

endmodule //convolution_kernel
