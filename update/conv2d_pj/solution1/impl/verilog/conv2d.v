// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=43636,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=361,HLS_SYN_LUT=622,HLS_VERSION=2018_3}" *)

module conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        result_address0,
        result_ce0,
        result_we0,
        result_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [9:0] result_address0;
output   result_ce0;
output   result_we0;
output  [31:0] result_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg result_ce0;
reg result_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_fu_162_p2;
reg   [5:0] i_reg_277;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_14_cast_fu_176_p1;
reg   [11:0] tmp_14_cast_reg_282;
wire   [0:0] exitcond1_i_fu_156_p2;
wire   [5:0] j_fu_186_p2;
reg   [5:0] j_reg_290;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_18_cast_fu_201_p1;
reg   [63:0] tmp_18_cast_reg_295;
wire   [0:0] exitcond_i_fu_180_p2;
wire   [4:0] i_2_fu_212_p2;
reg   [4:0] i_2_reg_308;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_12_fu_242_p2;
reg   [10:0] tmp_12_reg_313;
wire   [0:0] exitcond1_i4_fu_206_p2;
wire   [4:0] j_2_fu_254_p2;
reg   [4:0] j_2_reg_321;
wire    ap_CS_fsm_state7;
wire  signed [63:0] tmp_19_cast_fu_269_p1;
reg  signed [63:0] tmp_19_cast_reg_326;
wire   [0:0] exitcond_i8_fu_248_p2;
reg   [9:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
wire   [31:0] buffer_q0;
reg   [9:0] output_address0;
reg    output_ce0;
reg    output_we0;
wire   [31:0] output_q0;
wire    grp_convolution_kernel_fu_148_ap_start;
wire    grp_convolution_kernel_fu_148_ap_done;
wire    grp_convolution_kernel_fu_148_ap_idle;
wire    grp_convolution_kernel_fu_148_ap_ready;
wire   [9:0] grp_convolution_kernel_fu_148_buffer_r_address0;
wire    grp_convolution_kernel_fu_148_buffer_r_ce0;
wire   [3:0] grp_convolution_kernel_fu_148_kernel_address0;
wire    grp_convolution_kernel_fu_148_kernel_ce0;
wire   [9:0] grp_convolution_kernel_fu_148_output_r_address0;
wire    grp_convolution_kernel_fu_148_output_r_ce0;
wire    grp_convolution_kernel_fu_148_output_r_we0;
wire   [31:0] grp_convolution_kernel_fu_148_output_r_d0;
reg   [5:0] i_i_reg_104;
reg   [5:0] j_i_reg_115;
wire    ap_CS_fsm_state4;
reg   [4:0] i_i3_reg_126;
wire    ap_CS_fsm_state5;
reg   [4:0] j_i7_reg_137;
wire    ap_CS_fsm_state8;
reg    grp_convolution_kernel_fu_148_ap_start_reg;
wire   [10:0] tmp_fu_168_p3;
wire   [11:0] tmp_5_i_cast_fu_192_p1;
wire   [11:0] tmp_13_fu_196_p2;
wire   [9:0] tmp_s_fu_218_p3;
wire   [5:0] tmp_11_fu_230_p3;
wire   [10:0] p_shl_cast_fu_226_p1;
wire   [10:0] p_shl1_cast_fu_238_p1;
wire   [10:0] tmp_2_i_cast_fu_260_p1;
wire   [10:0] tmp_14_fu_264_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_convolution_kernel_fu_148_ap_start_reg = 1'b0;
end

conv2d_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(input_r_q0),
    .q0(buffer_q0)
);

conv2d_output #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(grp_convolution_kernel_fu_148_output_r_d0),
    .q0(output_q0)
);

convolution_kernel grp_convolution_kernel_fu_148(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convolution_kernel_fu_148_ap_start),
    .ap_done(grp_convolution_kernel_fu_148_ap_done),
    .ap_idle(grp_convolution_kernel_fu_148_ap_idle),
    .ap_ready(grp_convolution_kernel_fu_148_ap_ready),
    .buffer_r_address0(grp_convolution_kernel_fu_148_buffer_r_address0),
    .buffer_r_ce0(grp_convolution_kernel_fu_148_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .kernel_address0(grp_convolution_kernel_fu_148_kernel_address0),
    .kernel_ce0(grp_convolution_kernel_fu_148_kernel_ce0),
    .kernel_q0(kernel_q0),
    .output_r_address0(grp_convolution_kernel_fu_148_output_r_address0),
    .output_r_ce0(grp_convolution_kernel_fu_148_output_r_ce0),
    .output_r_we0(grp_convolution_kernel_fu_148_output_r_we0),
    .output_r_d0(grp_convolution_kernel_fu_148_output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convolution_kernel_fu_148_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_i_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_convolution_kernel_fu_148_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_kernel_fu_148_ap_ready == 1'b1)) begin
            grp_convolution_kernel_fu_148_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i8_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_i3_reg_126 <= i_2_reg_308;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_148_ap_done == 1'b1))) begin
        i_i3_reg_126 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_i_reg_104 <= i_reg_277;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_104 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i4_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_i7_reg_137 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_i7_reg_137 <= j_2_reg_321;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_115 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_i_reg_115 <= j_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_308 <= i_2_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_277 <= i_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_321 <= j_2_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_290 <= j_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i4_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_12_reg_313[10 : 1] <= tmp_12_fu_242_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_14_cast_reg_282[10 : 5] <= tmp_14_cast_fu_176_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_18_cast_reg_295[11 : 0] <= tmp_18_cast_fu_201_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i8_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_19_cast_reg_326 <= tmp_19_cast_fu_269_p1;
    end
end

always @ (*) begin
    if (((exitcond1_i4_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i4_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_address0 = tmp_18_cast_reg_295;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = grp_convolution_kernel_fu_148_buffer_r_address0;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_ce0 = grp_convolution_kernel_fu_148_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_we0 = 1'b1;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_address0 = tmp_19_cast_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_address0 = grp_convolution_kernel_fu_148_output_r_address0;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_ce0 = grp_convolution_kernel_fu_148_output_r_ce0;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_we0 = grp_convolution_kernel_fu_148_output_r_we0;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_i_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_convolution_kernel_fu_148_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_i4_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_i8_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_i4_fu_206_p2 = ((i_i3_reg_126 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_156_p2 = ((i_i_reg_104 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i8_fu_248_p2 = ((j_i7_reg_137 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond_i_fu_180_p2 = ((j_i_reg_115 == 6'd32) ? 1'b1 : 1'b0);

assign grp_convolution_kernel_fu_148_ap_start = grp_convolution_kernel_fu_148_ap_start_reg;

assign i_2_fu_212_p2 = (i_i3_reg_126 + 5'd1);

assign i_fu_162_p2 = (i_i_reg_104 + 6'd1);

assign input_r_address0 = tmp_18_cast_fu_201_p1;

assign j_2_fu_254_p2 = (j_i7_reg_137 + 5'd1);

assign j_fu_186_p2 = (j_i_reg_115 + 6'd1);

assign kernel_address0 = grp_convolution_kernel_fu_148_kernel_address0;

assign kernel_ce0 = grp_convolution_kernel_fu_148_kernel_ce0;

assign p_shl1_cast_fu_238_p1 = tmp_11_fu_230_p3;

assign p_shl_cast_fu_226_p1 = tmp_s_fu_218_p3;

assign result_address0 = tmp_19_cast_reg_326;

assign result_d0 = output_q0;

assign tmp_11_fu_230_p3 = {{i_i3_reg_126}, {1'd0}};

assign tmp_12_fu_242_p2 = (p_shl_cast_fu_226_p1 - p_shl1_cast_fu_238_p1);

assign tmp_13_fu_196_p2 = (tmp_14_cast_reg_282 + tmp_5_i_cast_fu_192_p1);

assign tmp_14_cast_fu_176_p1 = tmp_fu_168_p3;

assign tmp_14_fu_264_p2 = (tmp_12_reg_313 + tmp_2_i_cast_fu_260_p1);

assign tmp_18_cast_fu_201_p1 = tmp_13_fu_196_p2;

assign tmp_19_cast_fu_269_p1 = $signed(tmp_14_fu_264_p2);

assign tmp_2_i_cast_fu_260_p1 = j_i7_reg_137;

assign tmp_5_i_cast_fu_192_p1 = j_i_reg_115;

assign tmp_fu_168_p3 = {{i_i_reg_104}, {5'd0}};

assign tmp_s_fu_218_p3 = {{i_i3_reg_126}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_14_cast_reg_282[4:0] <= 5'b00000;
    tmp_14_cast_reg_282[11] <= 1'b0;
    tmp_18_cast_reg_295[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_12_reg_313[0] <= 1'b0;
end

endmodule //conv2d
